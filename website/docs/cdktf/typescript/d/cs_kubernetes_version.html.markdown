---
subcategory: "Container Service for Kubernetes (ACK)"
layout: "alicloud"
page_title: "Alicloud: alicloud_cs_kubernetes_version"
sidebar_current: "docs-alicloud-datasource-cs-kubernetes-version"
description: |-
  Provides a data source to query the details of the Kubernetes version supported by ACK.

---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_cs\_kubernetes\_version

This data source provides the details of the Kubernetes version supported by ACK.

-> **NOTE:** Available in 1.170.0+.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudCsKubernetesVersionDefault =
      new alicloud.dataAlicloudCsKubernetesVersion.DataAlicloudCsKubernetesVersion(
        this,
        "default",
        {
          clusterType: "ManagedKubernetes",
          kubernetesVersion: "1.22.3-aliyun.1",
          profile: "Default",
        }
      );
    new cdktf.TerraformOutput(this, "metadata", {
      value: dataAlicloudCsKubernetesVersionDefault.metadata,
    });
  }
}

```

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudCsKubernetesVersionDefault =
      new alicloud.dataAlicloudCsKubernetesVersion.DataAlicloudCsKubernetesVersion(
        this,
        "default",
        {
          clusterType: "Kubernetes",
          kubernetesVersion: "1.22.3-aliyun.1",
          profile: "Default",
        }
      );
    new cdktf.TerraformOutput(this, "metadata", {
      value: dataAlicloudCsKubernetesVersionDefault.metadata,
    });
  }
}

```

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudCsKubernetesVersionDefault =
      new alicloud.dataAlicloudCsKubernetesVersion.DataAlicloudCsKubernetesVersion(
        this,
        "default",
        {
          clusterType: "ManagedKubernetes",
          kubernetesVersion: "1.22.3-aliyun.1",
          profile: "Serverless",
        }
      );
    new cdktf.TerraformOutput(this, "metadata", {
      value: dataAlicloudCsKubernetesVersionDefault.metadata,
    });
  }
}

```

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudCsKubernetesVersionDefault =
      new alicloud.dataAlicloudCsKubernetesVersion.DataAlicloudCsKubernetesVersion(
        this,
        "default",
        {
          clusterType: "ManagedKubernetes",
          kubernetesVersion: "1.20.11-aliyunedge.1",
          profile: "Edge",
        }
      );
    new cdktf.TerraformOutput(this, "metadata", {
      value: dataAlicloudCsKubernetesVersionDefault.metadata,
    });
  }
}

```

## Argument Reference

The following arguments are supported.

* `clusterType` - (Required) The type of cluster. Its valid value are `kubernetes` and `managedKubernetes`.
* `kubernetesVersion` - (Optional) The ACK released kubernetes version. 
* `profile` - (Optional) The profile of cluster. Its valid value are `default`, `serverless` and `edge`.

## Attributes Reference

The following attributes are exported.

* `metadata` - A list of metadata of kubernetes version.
  * `version` - The ACK released kubernetes version. 
  * `runtime` - The list of supported runtime.
    * `name` - The runtime name.
    * `version` - The runtime version.

    
<!-- cache-key: cdktf-0.17.0-pre.15 input-0199b6147b7a53cf3f60367bb4ea3fd8ab5ee6818dee7bfeed3e0e05c938b21f -->