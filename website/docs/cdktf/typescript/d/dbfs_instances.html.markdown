---
subcategory: "Database File System (DBFS)"
layout: "alicloud"
page_title: "Alicloud: alicloud_dbfs_instances"
sidebar_current: "docs-alicloud-datasource-dbfs-instances"
description: |-
  Provides a list of DBFS Instances to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_dbfs\_instances

This data source provides the DBFS Instances of the current Alibaba Cloud user.

-> **NOTE:** Available in v1.136.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudDbfsInstancesIds =
      new alicloud.dataAlicloudDbfsInstances.DataAlicloudDbfsInstances(
        this,
        "ids",
        {
          ids: ["example_id"],
        }
      );
    const dataAlicloudDbfsInstancesNameRegex =
      new alicloud.dataAlicloudDbfsInstances.DataAlicloudDbfsInstances(
        this,
        "nameRegex",
        {
          nameRegex: "^my-Instance",
        }
      );
    new cdktf.TerraformOutput(this, "dbfs_instance_id_1", {
      value: cdktf.propertyAccess(dataAlicloudDbfsInstancesIds.instances, [
        "0",
        "id",
      ]),
    });
    new cdktf.TerraformOutput(this, "dbfs_instance_id_2", {
      value: cdktf.propertyAccess(
        dataAlicloudDbfsInstancesNameRegex.instances,
        ["0", "id"]
      ),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `ids` - (Optional, ForceNew, Computed)  A list of Instance IDs.
* `nameRegex` - (Optional, ForceNew) A regex string to filter results by Instance name.
* `outputFile` - (Optional) File name where to save data source results (after running `terraform plan`).
* `status` - (Optional, ForceNew) Database file system state. Valid values: `attached`, `attaching`, `creating`, `deleted`, `deleting`, `detaching`, `resizing`, `snapshotting`, `unattached`, `upgrading`.

## Argument Reference

The following attributes are exported in addition to the arguments listed above:

* `names` - A list of Instance names.
* `instances` - A list of DBFS Instances. Each element contains the following attributes:
    * `attachNodeNumber` - the number of nodes of the Database file system.
    * `category` -  The type of the Database file system. Valid values: `standard`.
    * `createTime` - The create time of the Database file system.
    * `dbfsClusterId` - The cluster ID of the Database file system.
    * `ecsList` - The collection of ECS instances mounted to the Database file system.
        * `ecsId` - The ID of the ECS instance.
    * `enableRaid` - Whether to create the Database file system in RAID way. Valid values : `true` anf `false`. 
    * `encryption` - Whether to encrypt the Database file system. Valid values: `true` and `false`.
    * `id` - The ID of the Instance.
    * `instanceId` -  The ID of the Database File System
    * `instanceName` - The name of the Database file system.
    * `kmsKeyId` - The KMS key ID of the Database file system used. This parameter is valid When `encryption` parameter is set to `true`.
    * `paymentType` - Thr payment type of the Database file system. Valid value: `payAsYouGo`.
    * `performanceLevel` - The performance level of the Database file system. Valid values: `pl0`, `pl1`, `pl2`, `pl3`.
    * `raidStripeUnitNumber` - The number of strip . When `enableRaid` parameter is set to `true` will transfer. This parameter is valid When `enableRaid` parameter is set to `true`.
    * `size` - The size Of the Database file system. Unit: GiB.
    * `status` - The status of the Database file system.
    * `zoneId` - The Zone ID of the Database file system.

<!-- cache-key: cdktf-0.17.0-pre.15 input-cffc61615b854e6e80e952b0c88c14c4f69f40044408f9535606f628345fdb79 -->