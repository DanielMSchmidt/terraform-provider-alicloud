---
subcategory: "NAT Gateway"
layout: "alicloud"
page_title: "Alicloud: alicloud_vpc_nat_ip_cidrs"
sidebar_current: "docs-alicloud-datasource-vpc-nat-ip-cidrs"
description: |-
  Provides a list of Vpc Nat Ip Cidrs to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_vpc\_nat\_ip\_cidrs

This data source provides the Vpc Nat Ip Cidrs of the current Alibaba Cloud user.

-> **NOTE:** Available in v1.136.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudVpcNatIpCidrsAtIpCidrName =
      new alicloud.dataAlicloudVpcNatIpCidrs.DataAlicloudVpcNatIpCidrs(
        this,
        "atIpCidrName",
        {
          natGatewayId: "example_value",
          natIpCidrName: ["example_value-1"],
        }
      );
    const dataAlicloudVpcNatIpCidrsIds =
      new alicloud.dataAlicloudVpcNatIpCidrs.DataAlicloudVpcNatIpCidrs(
        this,
        "ids",
        {
          ids: ["example_value-1", "example_value-2"],
          natGatewayId: "example_value",
        }
      );
    const dataAlicloudVpcNatIpCidrsNameRegex =
      new alicloud.dataAlicloudVpcNatIpCidrs.DataAlicloudVpcNatIpCidrs(
        this,
        "nameRegex",
        {
          nameRegex: "^my-NatIpCidr",
          natGatewayId: "example_value",
        }
      );
    const dataAlicloudVpcNatIpCidrsNatIpCidr =
      new alicloud.dataAlicloudVpcNatIpCidrs.DataAlicloudVpcNatIpCidrs(
        this,
        "natIpCidr",
        {
          natGatewayId: "example_value",
          natIpCidrs: ["example_value-1"],
        }
      );
    const dataAlicloudVpcNatIpCidrsStatus =
      new alicloud.dataAlicloudVpcNatIpCidrs.DataAlicloudVpcNatIpCidrs(
        this,
        "status",
        {
          ids: ["example_value-1"],
          natGatewayId: "example_value",
          status: "Available",
        }
      );
    new cdktf.TerraformOutput(this, "vpc_nat_ip_cidr_id_1", {
      value: cdktf.propertyAccess(dataAlicloudVpcNatIpCidrsIds.cidrs, [
        "0",
        "id",
      ]),
    });
    new cdktf.TerraformOutput(this, "vpc_nat_ip_cidr_id_2", {
      value: cdktf.propertyAccess(dataAlicloudVpcNatIpCidrsNameRegex.cidrs, [
        "0",
        "id",
      ]),
    });
    new cdktf.TerraformOutput(this, "vpc_nat_ip_cidr_id_3", {
      value: cdktf.propertyAccess(dataAlicloudVpcNatIpCidrsStatus.cidrs, [
        "0",
        "id",
      ]),
    });
    new cdktf.TerraformOutput(this, "vpc_nat_ip_cidr_id_4", {
      value: cdktf.propertyAccess(dataAlicloudVpcNatIpCidrsNatIpCidr.cidrs, [
        "0",
        "id",
      ]),
    });
    new cdktf.TerraformOutput(this, "vpc_nat_ip_cidr_id_5", {
      value: cdktf.propertyAccess(dataAlicloudVpcNatIpCidrsAtIpCidrName.cidrs, [
        "0",
        "id",
      ]),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `ids` - (Optional, ForceNew, Computed)  A list of Nat Ip Cidr IDs.
* `nameRegex` - (Optional, ForceNew) A regex string to filter results by Nat Ip Cidr name.
* `natGatewayId` - (Required, ForceNew) NAT IP ADDRESS range to the security group of the Kafka VPC NAT gateway instance ID.
* `natIpCidrs` - (Optional, ForceNew) The NAT CIDR block to be created. Support up to `20`. The CIDR block must meet the following conditions: It must be `10000/8`, `1721600/12`, `19216800/16`, or one of their subnets. The subnet mask must be `16` to `32` bits in lengths. To use a public CIDR block as the NAT CIDR block, the VPC to which the VPC NAT gateway belongs must be authorized to use public CIDR blocks. For more information, see [Create a VPC NAT gateway](https://www.alibabacloud.com/help/doc-detail/268230.htm).
* `outputFile` - (Optional) File name where to save data source results (after running `terraform plan`).
* `natIpCidrName` - (Optional, ForceNew) The name of the CIDR block that you want to query. Support up to `20`.
* `status` - (Optional, ForceNew) The status of the NAT IP address. Valid values:`available`.

## Argument Reference

The following attributes are exported in addition to the arguments listed above:

* `names` - A list of Nat Ip Cidr names.
* `cidrs` - A list of Vpc Nat Ip Cidrs. Each element contains the following attributes:
	* `createTime` - The time when the CIDR block was created.
	* `id` - The ID of the Nat Ip Cidr.
	* `isDefault` - Whether it is the default NAT IP ADDRESS. Valid values:`true` or `false`.`true`: is the default NAT IP ADDRESS. `false`: it is not the default NAT IP ADDRESS.
	* `natGatewayId` - The ID of the VPC NAT gateway.
	* `natIpCidr` - The NAT CIDR block to be created. The CIDR block must meet the following conditions: It must be `10000/8`, `1721600/12`, `19216800/16`, or one of their subnets. The subnet mask must be `16` to `32` bits in lengths. To use a public CIDR block as the NAT CIDR block, the VPC to which the VPC NAT gateway belongs must be authorized to use public CIDR blocks. For more information, see [Create a VPC NAT gateway](https://www.alibabacloud.com/help/doc-detail/268230.htm).
	* `natIpCidrDescription` - NAT IP ADDRESS range to the description of. Length is from `2` to `256` characters, must start with a letter or the Chinese at the beginning, but not at the` http://` Or `https://` at the beginning.
	* `natIpCidrId` - NAT IP ADDRESS instance ID.
	* `natIpCidrName` - NAT IP ADDRESS the name of the root directory. Length is from `2` to `128` characters, must start with a letter or the Chinese at the beginning can contain numbers, half a period (.), underscore (_) and dash (-). But do not start with `http://` or `https://` at the beginning.
	* `status` - The status of the CIDR block of the NAT gateway. If the value is `available`, the CIDR block is available.

<!-- cache-key: cdktf-0.17.0-pre.15 input-c61cb1bc0779fbaee2bd28db79e0f160e8b2836554c16a08de28730369850e4b -->