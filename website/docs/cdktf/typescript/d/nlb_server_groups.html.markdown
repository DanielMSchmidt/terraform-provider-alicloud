---
subcategory: "Network Load Balancer (NLB)"
layout: "alicloud"
page_title: "Alicloud: alicloud_nlb_server_groups"
sidebar_current: "docs-alicloud-datasource-nlb-server-groups"
description: |-
  Provides a list of Nlb Server Groups to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_nlb\_server\_groups

This data source provides the Nlb Server Groups of the current Alibaba Cloud user.

-> **NOTE:** Available in v1.186.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudNlbServerGroupsIds =
      new alicloud.dataAlicloudNlbServerGroups.DataAlicloudNlbServerGroups(
        this,
        "ids",
        {}
      );
    const dataAlicloudNlbServerGroupsNameRegex =
      new alicloud.dataAlicloudNlbServerGroups.DataAlicloudNlbServerGroups(
        this,
        "nameRegex",
        {
          nameRegex: "^my-ServerGroup",
        }
      );
    new cdktf.TerraformOutput(this, "nlb_server_group_id_1", {
      value: cdktf.propertyAccess(dataAlicloudNlbServerGroupsIds.groups, [
        "0",
        "id",
      ]),
    });
    new cdktf.TerraformOutput(this, "nlb_server_group_id_2", {
      value: cdktf.propertyAccess(dataAlicloudNlbServerGroupsNameRegex.groups, [
        "0",
        "id",
      ]),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `ids` - (Optional, ForceNew, Computed)  A list of Server Group IDs.
* `nameRegex` - (Optional, ForceNew) A regex string to filter results by Server Group name.
* `outputFile` - (Optional) File name where to save data source results (after running `terraform plan`).
* `resourceGroupId` - (Optional, ForceNew) The ID of the resource group to which the security group belongs.
* `serverGroupNames` - (Optional, ForceNew) The names of the server groups to be queried.
* `serverGroupType` - (Optional, ForceNew) The type of the server group. Valid values: `instance`, `ip`.
* `status` - (Optional, ForceNew) The status of the resource. Valid values: `available`, `configuring`, `creating`.

## Argument Reference

The following attributes are exported in addition to the arguments listed above:

* `names` - A list of Server Group names.
* `groups` - A list of Nlb Server Groups. Each element contains the following attributes:
	* `addressIpVersion` - The protocol version.
	* `connectionDrain` - Indicates whether connection draining is enabled.
	* `connectionDrainTimeout` - The timeout period of connection draining. Unit: seconds.
	* `healthCheck` - The configurations of health checks.
		* `healthCheckInterval` - The interval between two consecutive health checks.
		* `healthCheckType` - The protocol that is used for health checks.
		* `healthyThreshold` - The number of times that an unhealthy backend server must consecutively pass health checks before it is declared healthy.
		* `unhealthyThreshold` - The number of times that a healthy backend server must consecutively fail health checks before it is declared unhealthy.
		* `healthCheckHttpCode` - The HTTP status codes returned for health checks.
		* `healthCheckUrl` - The path to which health check requests are sent.
		* `healthCheckConnectPort` - The backend port that is used for health checks.
		* `healthCheckConnectTimeout` - The maximum timeout period of a health check response.
		* `healthCheckDomain` - The domain name that is used for health checks.
		* `healthCheckEnabled` - Specifies whether to enable health checks.
		* `httpCheckMethod` - The HTTP method that is used for health checks.
	* `protocol` - The protocol used to forward requests to the backend servers.
	* `relatedLoadBalancerIds` - The NLB instance.
	* `scheduler` - The routing algorithm.
	* `serverCount` - The number of server groups associated with the NLB instance.
	* `serverGroupName` - The name of the server group.
	* `serverGroupType` - The type of the server group.
	* `status` - The status of the server group.
	* `id` - The ID of the Server Group.
	* `vpcId` - The ID of the VPC to which the server group belongs.
	* `preserveClientIpEnabled` - Indicates whether client address retention is enabled.
	* `resourceGroupId` - The ID of the resource group to which the security group belongs.
	* `tags` - A mapping of tags to assign to the resource.
<!-- cache-key: cdktf-0.17.0-pre.15 input-93120162b5956da91e9667a9061a1aa79c16f921be9a2e92bd2345b36334beed -->