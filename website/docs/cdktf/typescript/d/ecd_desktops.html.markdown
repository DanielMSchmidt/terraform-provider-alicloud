---
subcategory: "Elastic Desktop Service (ECD)"
layout: "alicloud"
page_title: "Alicloud: alicloud_ecd_desktops"
sidebar_current: "docs-alicloud-datasource-ecd-desktops"
description: |-
  Provides a list of Ecd Desktops to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_ecd\_desktops

This data source provides the Ecd Desktops of the current Alibaba Cloud user.

-> **NOTE:** Available in v1.144.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const alicloudEcdPolicyGroupDefault =
      new alicloud.ecdPolicyGroup.EcdPolicyGroup(this, "default", {
        authorizeAccessPolicyRules: [
          {
            cidrIp: "1.2.3.4/24",
            description: "example_value",
          },
        ],
        authorizeSecurityPolicyRules: [
          {
            cidrIp: "0.0.0.0/0",
            description: "example_value",
            ipProtocol: "TCP",
            policy: "accept",
            portRange: "80/80",
            priority: "1",
            type: "inflow",
          },
        ],
        clipboard: "readwrite",
        localDrive: "read",
        policyGroupName: "your_policy_group_name",
      });
    const alicloudEcdSimpleOfficeSiteDefault =
      new alicloud.ecdSimpleOfficeSite.EcdSimpleOfficeSite(this, "default_1", {
        cidrBlock: "172.16.0.0/12",
        desktopAccessType: "Internet",
        officeSiteName: "your_office_site_name",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEcdSimpleOfficeSiteDefault.overrideLogicalId("default");
    const alicloudEcdUserDefault = new alicloud.ecdUser.EcdUser(
      this,
      "default_2",
      {
        email: "your_email",
        endUserId: "your_end_user_id",
        password: "your_password",
        phone: "your_phone",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEcdUserDefault.overrideLogicalId("default");
    const dataAlicloudEcdBundlesDefault =
      new alicloud.dataAlicloudEcdBundles.DataAlicloudEcdBundles(
        this,
        "default_3",
        {
          bundleType: "SYSTEM",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudEcdBundlesDefault.overrideLogicalId("default");
    const alicloudEcdDesktopDefault = new alicloud.ecdDesktop.EcdDesktop(
      this,
      "default_4",
      {
        bundleId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudEcdBundlesDefault.bundles, [
            "0",
            "id",
          ])
        ),
        desktopName: "your_desktop_name",
        endUserIds: [cdktf.Token.asString(alicloudEcdUserDefault.id)],
        officeSiteId: cdktf.Token.asString(
          alicloudEcdSimpleOfficeSiteDefault.id
        ),
        policyGroupId: cdktf.Token.asString(alicloudEcdPolicyGroupDefault.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEcdDesktopDefault.overrideLogicalId("default");
    const dataAlicloudEcdDesktopsIds =
      new alicloud.dataAlicloudEcdDesktops.DataAlicloudEcdDesktops(
        this,
        "ids",
        {
          ids: [cdktf.Token.asString(alicloudEcdDesktopDefault.id)],
        }
      );
    const dataAlicloudEcdDesktopsNameRegex =
      new alicloud.dataAlicloudEcdDesktops.DataAlicloudEcdDesktops(
        this,
        "nameRegex",
        {
          nameRegex: cdktf.Token.asString(
            alicloudEcdDesktopDefault.desktopName
          ),
        }
      );
    new cdktf.TerraformOutput(this, "ecd_desktop_id_1", {
      value: cdktf.propertyAccess(dataAlicloudEcdDesktopsIds.desktops, [
        "0",
        "id",
      ]),
    });
    new cdktf.TerraformOutput(this, "ecd_desktop_id_2", {
      value: cdktf.propertyAccess(dataAlicloudEcdDesktopsNameRegex.desktops, [
        "0",
        "id",
      ]),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `desktopName` - (Optional, ForceNew) The desktop name.
* `officeSiteId` - (Optional, ForceNew) The ID of the Simple Office Site.
* `ids` - (Optional, ForceNew, Computed)  A list of Desktop IDs.
* `nameRegex` - (Optional, ForceNew) A regex string to filter results by Desktop name.
* `outputFile` - (Optional) File name where to save data source results (after running `terraform plan`).
* `policyGroupId` - (Optional, ForceNew) The policy group id of the Desktop.
* `status` - (Optional, ForceNew) The status of the Desktop. Valid values: `deleted`, `expired`, `pending`, `running`, `starting`, `stopped`, `stopping`.

## Argument Reference

The following attributes are exported in addition to the arguments listed above:

* `names` - A list of Desktop names.
* `desktops` - A list of Ecd Desktops. Each element contains the following attributes:
	* `cpu` - The number of CPUs.
	* `createTime` - The creation time of the Desktop.
	* `desktopId` - The desktop id of the Desktop.
	* `desktopName` - The desktop name of the Desktop.
	* `desktopType` - The desktop type of the Desktop.
	* `directoryId` - The directory id of the Desktop.
	* `endUserIds` - The desktop end user id of the Desktop.
	* `expiredTime` - The expired time of the Desktop.
	* `id` - The ID of the Desktop.
	* `imageId` - The image id of the Desktop.
	* `memory` - The memory of the Desktop.
	* `networkInterfaceId` - The network interface id of the Desktop.
	* `paymentType` - The payment type of the Desktop.
	* `policyGroupId` - The policy group id of the Desktop.
	* `status` - The status of the Desktop. Valid values: `deleted`, `expired`, `pending`, `running`, `starting`, `stopped`, `stopping`.
	* `systemDiskSize` - The system disk size of the Desktop.
<!-- cache-key: cdktf-0.17.0-pre.15 input-5de145306b38dc9848b9e77e6938351571b789105e3ca31f9967214e0261f053 -->