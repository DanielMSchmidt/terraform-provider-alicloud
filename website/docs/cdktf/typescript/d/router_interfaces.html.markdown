---
subcategory: "Express Connect"
layout: "alicloud"
page_title: "Alicloud: alicloud_router_interfaces"
sidebar_current: "docs-alicloud-datasource-router-interfaces"
description: |-
    Provides a list of router interfaces to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_router\_interfaces

This data source provides information about [router interfaces](https://www.alibabacloud.com/help/doc-detail/52412.htm)
that connect VPCs together.

-> **DEPRECATED:**  This datasource has been deprecated from version `11990`. Please use new resource [alicloud_express_connect_router_interfaces](https://www.terraform.io/docs/providers/alicloud/d/alicloud_express_connect_router_interfaces).

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudRouterInterfacesRouterInterfacesDs =
      new alicloud.dataAlicloudRouterInterfaces.DataAlicloudRouterInterfaces(
        this,
        "router_interfaces_ds",
        {
          nameRegex: "^testenv",
          status: "Active",
        }
      );
    new cdktf.TerraformOutput(this, "first_router_interface_id", {
      value: cdktf.propertyAccess(
        dataAlicloudRouterInterfacesRouterInterfacesDs.interfaces,
        ["0", "id"]
      ),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `nameRegex` - (Optional) A regex string used to filter by router interface name.
* `status` - (Optional) Expected status. Valid values are `active`, `inactive` and `idle`.
* `specification` - (Optional) Specification of the link, such as `small1` (10Mb), `middle1` (100Mb), `large2` (2Gb), ...etc.
* `routerId` - (Optional) ID of the VRouter located in the local region.
* `routerType` - (Optional) Router type in the local region. Valid values are `vRouter` and `vbr` (physical connection).
* `role` - (Optional) Role of the router interface. Valid values are `initiatingSide` (connection initiator) and 
  `acceptingSide` (connection receiver). The value of this parameter must be `initiatingSide` if the `routerType` is set to `vbr`.
* `oppositeInterfaceId` - (Optional) ID of the peer router interface.
* `oppositeInterfaceOwnerId` - (Optional) Account ID of the owner of the peer router interface.
* `ids` - (Optional, Available in 1.44.0+) A list of router interface IDs.
* `outputFile` - (Optional) File name where to save data source results (after running `terraform plan`).

## Attributes Reference

The following attributes are exported in addition to the arguments listed above:

* `ids` - A list of router interface IDs.
* `names` - A list of router interface names.
* `interfaces` - A list of router interfaces. Each element contains the following attributes:
  * `id` - Router interface ID.
  * `status` - Router interface status. Possible values: `active`, `inactive` and `idle`.
  * `name` - Router interface name.
  * `description` - Router interface description.
  * `role` - Router interface role. Possible values: `initiatingSide` and `acceptingSide`.
  * `specification` - Router interface specification. Possible values: `small1`, `middle1`, `large2`, ...etc.
  * `routerId` - ID of the VRouter located in the local region.
  * `routerType` - Router type in the local region. Possible values: `vRouter` and `vbr`.
  * `vpcId` - ID of the VPC that owns the router in the local region.
  * `accessPointId` - ID of the access point used by the VBR.
  * `creationTime` - Router interface creation time.
  * `oppositeRegionId` - Peer router region ID.
  * `oppositeInterfaceId` - Peer router interface ID.
  * `oppositeRouterId` - Peer router ID.
  * `oppositeRouterType` - Router type in the peer region. Possible values: `vRouter` and `vbr`.
  * `oppositeInterfaceOwnerId` - Account ID of the owner of the peer router interface.
  * `healthCheckSourceIp` - Source IP address used to perform health check on the physical connection.
  * `healthCheckTargetIp` - Destination IP address used to perform health check on the physical connection.

<!-- cache-key: cdktf-0.17.0-pre.15 input-b216a043f99b99d9a791cf3e98be4acc2cf03df4a045bad6b387712e6fce8446 -->