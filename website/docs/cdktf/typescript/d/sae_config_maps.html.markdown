---
subcategory: "Serverless App Engine (SAE)"
layout: "alicloud"
page_title: "Alicloud: alicloud_sae_config_maps"
sidebar_current: "docs-alicloud-datasource-sae-config-maps"
description: |-
  Provides a list of Sae Config Maps to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_sae\_config\_maps

This data source provides the Sae Config Maps of the current Alibaba Cloud user.

-> **NOTE:** Available in v1.130.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const configMapName = new cdktf.TerraformVariable(this, "ConfigMapName", {
      default: "examplename",
    });
    const alicloudSaeNamespaceExample = new alicloud.saeNamespace.SaeNamespace(
      this,
      "example",
      {
        namespaceDescription: "your_description",
        namespaceId: "cn-hangzhou:yourname",
        namespaceName: "example_value",
      }
    );
    const dataAlicloudSaeConfigMapsNameRegex =
      new alicloud.dataAlicloudSaeConfigMaps.DataAlicloudSaeConfigMaps(
        this,
        "nameRegex",
        {
          nameRegex: "^example",
          namespaceId: cdktf.Token.asString(
            alicloudSaeNamespaceExample.namespaceId
          ),
        }
      );
    new cdktf.TerraformOutput(this, "sae_config_map_id", {
      value: cdktf.propertyAccess(dataAlicloudSaeConfigMapsNameRegex.maps, [
        "0",
        "id",
      ]),
    });
    const alicloudSaeConfigMapExample = new alicloud.saeConfigMap.SaeConfigMap(
      this,
      "example_4",
      {
        data: cdktf.Fn.jsonencode({
          "env.home": "/root",
          "env.shell": "/bin/sh",
        }),
        name: configMapName.stringValue,
        namespaceId: cdktf.Token.asString(
          alicloudSaeNamespaceExample.namespaceId
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSaeConfigMapExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `ids` - (Optional, ForceNew, Computed)  A list of Config Map IDs.
* `nameRegex` - (Optional, ForceNew) A regex string to filter results by Config Map name.
* `namespaceId` - (Required, ForceNew) The NamespaceId of Config Maps. The Id of Namespace.It can contain 2 to 32 characters.The value is in format {RegionId}:{namespace}.
* `outputFile` - (Optional) File name where to save data source results (after running `terraform plan`).

## Argument Reference

The following attributes are exported in addition to the arguments listed above:

* `names` - A list of Config Map names.
* `maps` - A list of Sae Config Maps. Each element contains the following attributes:
	* `configMapId` - The first ID of the resource.
	* `createTime` - The Creation Time of the ConfigMap.
	* `data` - ConfigMap instance data. The value's format is a `json` string
	* `description` - The Description of Config Map.
	* `id` - The ID of the Config Map.
	* `name` - ConfigMap instance name.
	* `namespaceId` - The NamespaceId of Config Maps.

<!-- cache-key: cdktf-0.17.0-pre.15 input-3995471f77b0b3a8fc04dc64f79e0722612d2095ed244103395cbaae7a18d135 -->