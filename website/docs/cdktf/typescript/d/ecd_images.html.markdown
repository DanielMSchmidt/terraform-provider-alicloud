---
subcategory: "Elastic Desktop Service (ECD)"
layout: "alicloud"
page_title: "Alicloud: alicloud_ecd_images"
sidebar_current: "docs-alicloud-datasource-ecd-images"
description: |-
  Provides a list of Ecd Images to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_ecd\_images

This data source provides the Ecd Images of the current Alibaba Cloud user.

-> **NOTE:** Available in v1.146.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const alicloudEcdPolicyGroupDefault =
      new alicloud.ecdPolicyGroup.EcdPolicyGroup(this, "default", {
        authorizeAccessPolicyRules: [
          {
            cidrIp: "1.2.3.4/24",
            description: "example_value",
          },
        ],
        authorizeSecurityPolicyRules: [
          {
            cidrIp: "0.0.0.0/0",
            description: "example_value",
            ipProtocol: "TCP",
            policy: "accept",
            portRange: "80/80",
            priority: "1",
            type: "inflow",
          },
        ],
        clipboard: "readwrite",
        localDrive: "read",
        policyGroupName: "your_policy_group_name",
      });
    const alicloudEcdSimpleOfficeSiteDefault =
      new alicloud.ecdSimpleOfficeSite.EcdSimpleOfficeSite(this, "default_1", {
        cidrBlock: "172.16.0.0/12",
        desktopAccessType: "Internet",
        officeSiteName: "your_simple_office_site_name",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEcdSimpleOfficeSiteDefault.overrideLogicalId("default");
    const dataAlicloudEcdBundlesDefault =
      new alicloud.dataAlicloudEcdBundles.DataAlicloudEcdBundles(
        this,
        "default_2",
        {
          bundleType: "SYSTEM",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudEcdBundlesDefault.overrideLogicalId("default");
    const alicloudEcdDesktopDefault = new alicloud.ecdDesktop.EcdDesktop(
      this,
      "default_3",
      {
        bundleId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudEcdBundlesDefault.bundles, [
            "1",
            "id",
          ])
        ),
        desktopName: "your_desktop_name",
        officeSiteId: cdktf.Token.asString(
          alicloudEcdSimpleOfficeSiteDefault.id
        ),
        policyGroupId: cdktf.Token.asString(alicloudEcdPolicyGroupDefault.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEcdDesktopDefault.overrideLogicalId("default");
    const alicloudEcdImageDefault = new alicloud.ecdImage.EcdImage(
      this,
      "default_4",
      {
        description: "example_value",
        desktopId: cdktf.Token.asString(alicloudEcdDesktopDefault.id),
        imageName: "your_image_name",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEcdImageDefault.overrideLogicalId("default");
    const dataAlicloudEcdImagesIds =
      new alicloud.dataAlicloudEcdImages.DataAlicloudEcdImages(this, "ids", {
        ids: [cdktf.Token.asString(alicloudEcdImageDefault.id)],
      });
    const dataAlicloudEcdImagesNameRegex =
      new alicloud.dataAlicloudEcdImages.DataAlicloudEcdImages(
        this,
        "nameRegex",
        {
          nameRegex: cdktf.Token.asString(alicloudEcdImageDefault.imageName),
        }
      );
    new cdktf.TerraformOutput(this, "ecd_image_id_1", {
      value: cdktf.propertyAccess(dataAlicloudEcdImagesIds.images, ["0", "id"]),
    });
    new cdktf.TerraformOutput(this, "ecd_image_id_2", {
      value: cdktf.propertyAccess(dataAlicloudEcdImagesNameRegex.images, [
        "0",
        "id",
      ]),
    });
  }
}

```

## Argument Reference

The following arguments are supported:


* `ids` - (Optional, ForceNew, Computed)  A list of Image IDs.
* `imageType` - (Optional, ForceNew) The image type of the image. Valid values: `system`, `custom`.
* `nameRegex` - (Optional, ForceNew) A regex string to filter results by Image name.
* `outputFile` - (Optional) File name where to save data source results (after running `terraform plan`).
* `status` - (Optional, ForceNew) The status of the image. Valid values: `creating`, `available`, `createFailed`.
* `osType` - (Optional, ForceNew, Available in 1.170.0+) The operating system type of the image. Valid values: `windows` and `linux`.
* `desktopInstanceType` - (Optional, ForceNew, Available in 1.170.0+) The desktop type of the image.

## Argument Reference

The following attributes are exported in addition to the arguments listed above:

* `names` - A list of Image names.
* `images` - A list of Ecd Images. Each element contains the following attributes:
	* `createTime` - The creation time of the image.
	* `dataDiskSize` - The size of data disk of the image.
	* `description` - The description of the image.
	* `gpuCategory` - The Gpu Category of the image.
	* `id` - The ID of the Image.
	* `imageId` - The image id of the image.
	* `imageName` - The image name.
	* `imageType` - The image type of the image. Valid values: `system`, `custom`.
	* `osType` - The os type of the image.
	* `progress` - The progress of the image.
	* `size` - The size of the image.
	* `status` - The status of the image. Valid values: `creating`, `available`, `createFailed`.
<!-- cache-key: cdktf-0.17.0-pre.15 input-2b66c498b5e6f90edeb670b75b2a34ba3efa3ec360c1b3b6188816dcc69d76dd -->