---
subcategory: "NAT Gateway"
layout: "alicloud"
page_title: "Alicloud: alicloud_snat_entries"
sidebar_current: "docs-alicloud-datasource-snat-entries"
description: |-
    Provides a list of Snat Entries owned by an Alibaba Cloud account.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_snat\_entries

This data source provides a list of Snat Entries owned by an Alibaba Cloud account.

-> **NOTE:** Available in 1.37.0+.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "snat-entry-example-name",
    });
    const alicloudEipAddressFoo = new alicloud.eipAddress.EipAddress(
      this,
      "foo",
      {
        addressName: name.stringValue,
      }
    );
    const alicloudVpcFoo = new alicloud.vpc.Vpc(this, "foo_2", {
      cidrBlock: "172.16.0.0/12",
      name: name.stringValue,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVpcFoo.overrideLogicalId("foo");
    const dataAlicloudZonesDefault =
      new alicloud.dataAlicloudZones.DataAlicloudZones(this, "default", {
        availableResourceCreation: "VSwitch",
      });
    const alicloudNatGatewayFoo = new alicloud.natGateway.NatGateway(
      this,
      "foo_4",
      {
        name: name.stringValue,
        specification: "Small",
        vpcId: cdktf.Token.asString(alicloudVpcFoo.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudNatGatewayFoo.overrideLogicalId("foo");
    const alicloudVswitchFoo = new alicloud.vswitch.Vswitch(this, "foo_5", {
      availabilityZone: cdktf.Token.asString(
        cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
      ),
      cidrBlock: "172.16.0.0/21",
      vpcId: cdktf.Token.asString(alicloudVpcFoo.id),
      vswitchName: name.stringValue,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchFoo.overrideLogicalId("foo");
    const alicloudEipAssociationFoo =
      new alicloud.eipAssociation.EipAssociation(this, "foo_6", {
        allocationId: cdktf.Token.asString(alicloudEipAddressFoo.id),
        instanceId: cdktf.Token.asString(alicloudNatGatewayFoo.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEipAssociationFoo.overrideLogicalId("foo");
    const alicloudSnatEntryFoo = new alicloud.snatEntry.SnatEntry(
      this,
      "foo_7",
      {
        snatIp: cdktf.Token.asString(alicloudEipAddressFoo.ipAddress),
        snatTableId: cdktf.Token.asString(alicloudNatGatewayFoo.snatTableIds),
        sourceVswitchId: cdktf.Token.asString(alicloudVswitchFoo.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSnatEntryFoo.overrideLogicalId("foo");
    const dataAlicloudSnatEntriesFoo =
      new alicloud.dataAlicloudSnatEntries.DataAlicloudSnatEntries(
        this,
        "foo_8",
        {
          snatTableId: cdktf.Token.asString(alicloudSnatEntryFoo.snatTableId),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudSnatEntriesFoo.overrideLogicalId("foo");
  }
}

```

## Argument Reference

The following arguments are supported:

* `ids` - (Optional) A list of Snat Entries IDs.
* `snatIp` - (Optional) The public IP of the Snat Entry.
* `sourceCidr` - (Optional) The source CIDR block of the Snat Entry.
* `snatTableId` - (Required) The ID of the Snat table.
* `nameRegex` - (Optional, ForceNew, Available in 1.119.1+) A regex string to filter results by the resource name. 
* `snatEntryName` - (Optional, ForceNew, Available in 1.119.1+) The name of snat entry.
* `sourceVswitchId` - (Optional, ForceNew, Available in 1.119.1+) The source vswitch ID.
* `status` - (Optional, ForceNew, Available in 1.119.1+) The status of the Snat Entry. Valid values: `available`, `deleting` and `pending`.
* `outputFile` - (Optional) File name where to save data source results (after running `terraform plan`).

## Attributes Reference

The following attributes are exported in addition to the arguments listed above:

* `ids` - (Optional) A list of Snat Entries IDs.
* `entries` - A list of Snat Entries. Each element contains the following attributes:
  * `id` - The ID of the Snat Entry.
  * `snatIp` - The public IP of the Snat Entry.
  * `sourceCidr` - The source CIDR block of the Snat Entry.
  * `status` - The status of the Snat Entry.
  * `snatEntryId` - The ID of snat entry.
  * `snatEntryName` - The name of snat entry.
  * `sourceVswitchId` - The source vswitch ID.


<!-- cache-key: cdktf-0.17.0-pre.15 input-72e7068ed385f549d6744859ad8fd9fb3b604a183c7a0b5cae1aeed0ee537da7 -->