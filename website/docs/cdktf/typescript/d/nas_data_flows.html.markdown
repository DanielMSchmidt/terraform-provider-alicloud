---
subcategory: "Network Attached Storage (NAS)"
layout: "alicloud"
page_title: "Alicloud: alicloud_nas_data_flows"
sidebar_current: "docs-alicloud-datasource-nas-data-flows"
description: |-
  Provides a list of Nas Data Flows to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_nas\_data\_flows

This data source provides the Nas Data Flows of the current Alibaba Cloud user.

-> **NOTE:** Available in v1.153.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudNasDataFlowsIds =
      new alicloud.dataAlicloudNasDataFlows.DataAlicloudNasDataFlows(
        this,
        "ids",
        {
          fileSystemId: "example_value",
          ids: ["example_value-1", "example_value-2"],
        }
      );
    const dataAlicloudNasDataFlowsStatus =
      new alicloud.dataAlicloudNasDataFlows.DataAlicloudNasDataFlows(
        this,
        "status",
        {
          fileSystemId: "example_value",
          status: "Running",
        }
      );
    new cdktf.TerraformOutput(this, "nas_data_flow_id_1", {
      value: cdktf.propertyAccess(dataAlicloudNasDataFlowsIds.flows, [
        "0",
        "id",
      ]),
    });
    new cdktf.TerraformOutput(this, "nas_data_flow_id_2", {
      value: cdktf.propertyAccess(dataAlicloudNasDataFlowsStatus.flows, [
        "0",
        "id",
      ]),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `fileSystemId` - (Required, ForceNew) The ID of the file system.
* `ids` - (Optional, ForceNew, Computed)  A list of Data Flow IDs.
* `outputFile` - (Optional) File name where to save data source results (after running `terraform plan`).
* `status` - (Optional, ForceNew) The status of the Data flow. Including: `starting`, `running`, `updating`, `deleting`, `stopping`, `stopped`, `misconfigured`.

## Argument Reference

The following attributes are exported in addition to the arguments listed above:

* `flows` - A list of Nas Data Flows. Each element contains the following attributes:
 * `createTime` - The time when Fileset was created. Executing the ISO8601 standard means that the return format is: 'yyyy-MM-ddTHH:mm:ssZ'.
 * `dataFlowId` - The ID of the Data Flow.
 * `description` - The Description of data flow.
 * `errorMessage` - Error message.
 * `fileSystemId` - The ID of the file system.
 * `fileSystemPath` - The path of Fileset in the CPFS file system.
 * `fsetDescription` - Description of automatic update.
 * `fsetId` - The ID of the Fileset.
 * `id` - The resource ID of the data flow. The value formats as `<file_system_id>:<data_flow_id>`.
 * `sourceSecurityType` - The security protection type of the source storage.
 * `sourceStorage` - The access path of the source store. Format: `<storage type>://<path>`.
 * `status` - The status of the Data flow.
 * `throughput` - The maximum transmission bandwidth of data flow, unit: `mb/s`.
<!-- cache-key: cdktf-0.17.0-pre.15 input-32adb06136078348dcbe44c264e5e272c57012d0480f47ec5ca0e7ebe1ede378 -->