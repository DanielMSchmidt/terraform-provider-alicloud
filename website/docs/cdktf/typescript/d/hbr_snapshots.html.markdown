---
subcategory: "Hybrid Backup Recovery (HBR)"
layout: "alicloud"
page_title: "Alicloud: alicloud_hbr_snapshots"
sidebar_current: "docs-alicloud-datasource-hbr-snapshots"
description: |-
  Provides a list of Hybrid Backup Recovery (HBR) Snapshots to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_hbr\_snapshots

This data source provides the Hbr Snapshots of the current Alibaba Cloud user.

-> **NOTE:** Available in v1.133.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudHbrEcsBackupPlansDefault =
      new alicloud.dataAlicloudHbrEcsBackupPlans.DataAlicloudHbrEcsBackupPlans(
        this,
        "default",
        {
          nameRegex: "plan-tf-used-dont-delete",
        }
      );
    const dataAlicloudHbrNasBackupPlansDefault =
      new alicloud.dataAlicloudHbrNasBackupPlans.DataAlicloudHbrNasBackupPlans(
        this,
        "default_1",
        {
          nameRegex: "plan-tf-used-dont-delete",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudHbrNasBackupPlansDefault.overrideLogicalId("default");
    const dataAlicloudHbrOssBackupPlansDefault =
      new alicloud.dataAlicloudHbrOssBackupPlans.DataAlicloudHbrOssBackupPlans(
        this,
        "default_2",
        {
          nameRegex: "plan-tf-used-dont-delete",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudHbrOssBackupPlansDefault.overrideLogicalId("default");
    new alicloud.dataAlicloudHbrSnapshots.DataAlicloudHbrSnapshots(
      this,
      "ecs_snapshots",
      {
        instanceId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudHbrEcsBackupPlansDefault.plans, [
            "0",
            "instance_id",
          ])
        ),
        sourceType: "ECS_FILE",
        vaultId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudHbrEcsBackupPlansDefault.plans, [
            "0",
            "vault_id",
          ])
        ),
      }
    );
    const dataAlicloudHbrSnapshotsNasSnapshots =
      new alicloud.dataAlicloudHbrSnapshots.DataAlicloudHbrSnapshots(
        this,
        "nas_snapshots",
        {
          completeTime: "2021-08-23T14:17:15CST",
          completeTimeChecker: "GREATER_THAN_OR_EQUAL",
          createTime: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudHbrNasBackupPlansDefault.plans, [
              "0",
              "create_time",
            ])
          ),
          fileSystemId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudHbrNasBackupPlansDefault.plans, [
              "0",
              "file_system_id",
            ])
          ),
          sourceType: "NAS",
          vaultId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudHbrNasBackupPlansDefault.plans, [
              "0",
              "vault_id",
            ])
          ),
        }
      );
    new alicloud.dataAlicloudHbrSnapshots.DataAlicloudHbrSnapshots(
      this,
      "oss_snapshots",
      {
        bucket: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudHbrOssBackupPlansDefault.plans, [
            "0",
            "bucket",
          ])
        ),
        completeTime: "2021-07-20T14:17:15CST,2021-07-24T14:17:15CST",
        completeTimeChecker: "BETWEEN",
        sourceType: "OSS",
        vaultId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudHbrOssBackupPlansDefault.plans, [
            "0",
            "vault_id",
          ])
        ),
      }
    );
    new cdktf.TerraformOutput(this, "hbr_snapshot_id_1", {
      value: cdktf.propertyAccess(
        dataAlicloudHbrSnapshotsNasSnapshots.snapshots,
        ["0", "id"]
      ),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `ids` - (Optional, ForceNew, Computed)  A list of Snapshot IDs.
* `vaultId` - (Required, ForceNew) The ID of Vault.
* `sourceType` - (Required, ForceNew) Data source type, valid values: `ecsFile`, `oss`, `nas`.
* `status` - (Optional, ForceNew) The status of snapshot, valid values: `complete`, `partialComplete`.
* `instanceId` - (Optional, ForceNew) The ID of ECS instance. The ecs backup client must have been installed on the host. While source_type equals `ecsFile`, this parameter must be set.
* `bucket` - (Optional, ForceNew) The bucket name of OSS. While source_type equals `oss`, this parameter must be set.
* `fileSystemId` - (Optional, ForceNew) The File System ID of Nas. While source_type equals `nas`, this parameter must be set.
* `createTime` - (Optional, ForceNew) File system creation timestamp of Nas. While source_type equals `nas`, this parameter must be set. **Note** The time format of the API adopts the ISO 8601 format, such as `20210709T15:45:30Cst` or `20210709T07:45:30Z`.
* `completeTime` - (Optional, ForceNew) Timestamp of Snapshot completion. Note The time format of the API adopts the ISO 8601 format, such as 2021-07-09T15:45:30CST or 2021-07-09T07:45:30Z. **Note**: While `completeTimeChecker` equals `between`, this field should be formatted such as `"20210820T14:17:15Cst,20210826T14:17:15Cst"`, The first part of this string is the start time, the second part is the end time, and the two parts should be separated by commas.
* `completeTimeChecker` - (Optional, ForceNew) Complete time filter operator. Optional values: `matchTerm`, `greaterThan`, `greaterThanOrEqual`, `lessThan`, `lessThanOrEqual`, `between`.
* `outputFile` - (Optional) File name where to save data source results (after running `terraform plan`).

## Argument Reference

The following attributes are exported in addition to the arguments listed above:

* `snapshots` - A list of Hbr Snapshots. Each element contains the following attributes:
	* `id` - The ID of the Snapshot.
	* `snapshotId` - The ID of the Snapshot.
	* `snapshotHash` - The hashcode of Snapshot.
	* `jobId` - The job ID of backup task.
	* `sourceType` - Data source type, optional values: `ecsFile`, `oss`, `nas`.
	* `backupType` - Backup type. Possible values: `complete` (full backup).
	* `actualBytes` - The actual data volume of the snapshot. Unit byte.
	* `actualItems` - The actual number of items in the snapshot. (Currently only file backup is available).
	* `bytesDone` - The incremental amount of backup data. Unit byte.
	* `bytesTotal` - The total amount of data sources. Unit byte.
	* `createdTime` - Snapshot creation time. UNIX time in seconds.
	* `startTime` - The start time of the snapshot. UNIX time in seconds.
	* `updatedTime` - The update time of snapshot. UNIX time in seconds.
	* `completeTime` - The time when the snapshot completed. UNIX time in seconds.
	* `instanceId` - (ECS_FILE) The ID of ECS instance.
	* `clientId` - (ECS_FILE) The ID of ECS backup client.
	* `bucket` - (OSS) The name of OSS bucket.
	* `fileSystemId` - (NAS) The ID of NAS File system.
	* `createTime` - (NAS) File System Creation Time of Nas. Unix Time Seconds.
	* `path` - (ECS_FILE, NAS) Backup Path.
	* `prefix` - (OSS) Backup file prefix.
	* `itemsDone` - The number of backup items. (Currently only file backup is available).
	* `itemsTotal` - The total number of data source items. (Currently only file backup is available).
	* `parentSnapshotHash` - The hashcode of parent backup snapshot.
	* `retention` - The number of days to keep.
	* `status` - The status of snapshot execution. Possible values: `complete`, `partialComplete`, `failed`.

<!-- cache-key: cdktf-0.17.0-pre.15 input-97d8f481a86f3560551612c37cd59f9f48557292cae479ffc704096ae153e84d -->