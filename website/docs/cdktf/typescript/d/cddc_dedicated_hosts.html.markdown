---
subcategory: "ApsaraDB for MyBase (CDDC)"
layout: "alicloud"
page_title: "Alicloud: alicloud_cddc_dedicated_hosts"
sidebar_current: "docs-alicloud-datasource-cddc-dedicated-hosts"
description: |-
  Provides a list of Cddc Dedicated Hosts to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_cddc\_dedicated\_hosts

This data source provides the Cddc Dedicated Hosts of the current Alibaba Cloud user.

-> **NOTE:** Available in v1.147.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudCddcDedicatedHostsAllocationStatus =
      new alicloud.dataAlicloudCddcDedicatedHosts.DataAlicloudCddcDedicatedHosts(
        this,
        "allocationStatus",
        {
          allocationStatus: "Allocatable",
          dedicatedHostGroupId: "example_value",
          ids: ["example_value-1", "example_value-2"],
        }
      );
    const dataAlicloudCddcDedicatedHostsHostType =
      new alicloud.dataAlicloudCddcDedicatedHosts.DataAlicloudCddcDedicatedHosts(
        this,
        "hostType",
        {
          dedicatedHostGroupId: "example_value",
          hostType: "dhg_cloud_ssd",
          ids: ["example_value-1", "example_value-2"],
        }
      );
    const dataAlicloudCddcDedicatedHostsIds =
      new alicloud.dataAlicloudCddcDedicatedHosts.DataAlicloudCddcDedicatedHosts(
        this,
        "ids",
        {
          dedicatedHostGroupId: "example_value",
          ids: ["example_value-1", "example_value-2"],
        }
      );
    const dataAlicloudCddcDedicatedHostsStatus =
      new alicloud.dataAlicloudCddcDedicatedHosts.DataAlicloudCddcDedicatedHosts(
        this,
        "status",
        {
          dedicatedHostGroupId: "example_value",
          ids: ["example_value-1", "example_value-2"],
          status: "1",
        }
      );
    const dataAlicloudCddcDedicatedHostsZoneId =
      new alicloud.dataAlicloudCddcDedicatedHosts.DataAlicloudCddcDedicatedHosts(
        this,
        "zoneId",
        {
          dedicatedHostGroupId: "example_value",
          ids: ["example_value-1", "example_value-2"],
          zoneId: "example_value",
        }
      );
    new cdktf.TerraformOutput(this, "cddc_dedicated_host_id_1", {
      value: cdktf.propertyAccess(dataAlicloudCddcDedicatedHostsIds.hosts, [
        "0",
        "id",
      ]),
    });
    new cdktf.TerraformOutput(this, "cddc_dedicated_host_id_2", {
      value: cdktf.propertyAccess(dataAlicloudCddcDedicatedHostsStatus.hosts, [
        "0",
        "id",
      ]),
    });
    new cdktf.TerraformOutput(this, "cddc_dedicated_host_id_3", {
      value: cdktf.propertyAccess(dataAlicloudCddcDedicatedHostsZoneId.hosts, [
        "0",
        "id",
      ]),
    });
    new cdktf.TerraformOutput(this, "cddc_dedicated_host_id_4", {
      value: cdktf.propertyAccess(
        dataAlicloudCddcDedicatedHostsAllocationStatus.hosts,
        ["0", "id"]
      ),
    });
    new cdktf.TerraformOutput(this, "cddc_dedicated_host_id_5", {
      value: cdktf.propertyAccess(
        dataAlicloudCddcDedicatedHostsHostType.hosts,
        ["0", "id"]
      ),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `allocationStatus` - (Optional, ForceNew) Specifies whether instances can be created on the host. Valid values: `allocatable` or `suspended`. `allocatable`: Instances can be created on the host. `suspended`: Instances cannot be created on the host.
* `dedicatedHostGroupId` - (Required, ForceNew) The ID of the dedicated cluster.
* `enableDetails` - (Optional) Default to `false`. Set it to `true` can output more details about resource attributes.
* `hostType` - (Optional, ForceNew) The storage type of the host. Valid values: `dhgLocalSsd` or `dhgCloudSsd`. `dhgLocalSsd`: specifies that the host uses local SSDs. `dhgCloudSsd`: specifies that the host uses enhanced SSDs (ESSDs).
* `ids` - (Optional, ForceNew, Computed)  A list of Dedicated Host IDs.
* `orderId` - (Optional, ForceNew) The ID of the order.
* `outputFile` - (Optional) File name where to save data source results (after running `terraform plan`).
* `status` - (Optional, ForceNew) The state of the host. Valid values: 
  * `0:` The host is being created. 
  * `1`: The host is running. 
  * `2`: The host is faulty. 
  * `3`: The host is ready for deactivation. 
  * `4`: The host is being maintained. 
  * `5`: The host is deactivated. 
  * `6`: The host is restarting. 
  * `7`: The host is locked.
* `zoneId` - (Optional, ForceNew) The ID of the zone.
* `tags` - (Optional, ForceNew) A mapping of tags to assign to the resource.

## Argument Reference

The following attributes are exported in addition to the arguments listed above:

* `hosts` - A list of Cddc Dedicated Hosts. Each element contains the following attributes:
  * `bastionInstanceId` - The ID of the bastion host with which the host is associated.
  * `cpuAllocationRatio` - The numeric value of the CPU over commit ratio of the dedicated cluster.
  * `cpuUsed` - The number of CPU cores used by the host.
  * `createTime` - The time when the host was created. The time follows the ISO 8601 standard in the `yyyyMmDdThh:mm:ssZ` format. The time is displayed in UTC.
  * `dedicatedHostGroupId` - The ID of the dedicated cluster in which the host is created.
  * `dedicatedHostId` - The ID of the host.
  * `diskAllocationRatio` - The disk usage in percentage.
  * `ecsClassCode` - The Elastic Compute Service (ECS) instance type.
  * `endTime` - The time when the host expires. The time follows the ISO 8601 standard in the `yyyyMmDdThh:mm:ssZ` format. The time is displayed in UTC.
  * `engine` - The type of the database engine that is used by the host.
  * `expiredTime` - The time when the host expires. The time follows the ISO 8601 standard in the `yyyyMmDdThh:mm:ssZ` format. The time is displayed in UTC.
  * `hostClass` - The instance type of the host.
  * `hostCpu` - The number of CPU cores specified for the host. Unit: `core`.
  * `hostMem` - The memory of the host. Unit: `gb`.
  * `hostName` - The name of the host.
  * `hostStorage` - The total storage capacity of the host. Unit: `gb`.
  * `hostType` - The storage type of the host.
  * `id` - The ID of the Dedicated Host. The value formats as `<dedicated_host_group_id>:<dedicated_host_id>`.
  * `imageCategory` - The image type of the host.
  * `ipAddress` - The IP address of the host.
  * `memAllocationRatio` - The memory usage in percentage.
  * `memoryUsed` - The amount of memory used by the host. Unit: `gb`.
  * `openPermission` - Indicates whether you have the OS permissions on the host. Valid values: `0`: You do not have the OS permissions on the host. `1`: You have the OS permissions on the host.
  * `allocationStatus` - Specifies whether instances can be created on the host. Valid values: `1` or `0`. `1`: Instances can be created on the host. `0`: Instances cannot be created on the host.
  * `status` - The state of the host.
  * `storageUsed` - The storage usage of the host. Unit: `gb`.
  * `tags` - The tag of the resource.
    * `tagKey` - The key of the tags.
    * `tagValue` - The value of the tags.
  * `vpcId` - The ID of the virtual private cloud (VPC) to which the host is connected.
  * `vswitchId` - The ID of the vSwitch.
  * `zoneId` - The zone ID of the host.
<!-- cache-key: cdktf-0.17.0-pre.15 input-469c0e1369f62e7209cd3cea5ec0298f316e33473acb89aad65551a5f3908e2d -->