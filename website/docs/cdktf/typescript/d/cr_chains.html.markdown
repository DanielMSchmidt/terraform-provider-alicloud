---
subcategory: "Container Registry (CR)"
layout: "alicloud"
page_title: "Alicloud: alicloud_cr_chains"
sidebar_current: "docs-alicloud-datasource-cr-chains"
description: |-
  Provides a list of Cr Chains to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_cr\_chains

This data source provides the Cr Chains of the current Alibaba Cloud user.

For information about CR Chains and how to use it, see [What is Chain](https://www.alibabacloud.com/help/en/doc-detail/357821.html).

-> **NOTE:** Available in v1.161.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudCrChainsIds =
      new alicloud.dataAlicloudCrChains.DataAlicloudCrChains(this, "ids", {
        ids: ["example_value-1", "example_value-2"],
        instanceId: "example_value",
      });
    const dataAlicloudCrChainsNameRegex =
      new alicloud.dataAlicloudCrChains.DataAlicloudCrChains(
        this,
        "nameRegex",
        {
          instanceId: "example_value",
          nameRegex: "^my-Chain",
        }
      );
    new cdktf.TerraformOutput(this, "cr_chain_id_1", {
      value: cdktf.propertyAccess(dataAlicloudCrChainsIds.chains, ["0", "id"]),
    });
    new cdktf.TerraformOutput(this, "cr_chain_id_2", {
      value: cdktf.propertyAccess(dataAlicloudCrChainsNameRegex.chains, [
        "0",
        "id",
      ]),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `instanceId` - (Required, ForceNew) The ID of CR Enterprise Edition instance.
* `nameRegex` - (Optional, ForceNew) A regex string to filter results by Chain name.
* `repoName` - (Optional, ForceNew) The name of CR Enterprise Edition repository.
* `repoNamespaceName` - (Optional, ForceNew) The name of CR Enterprise Edition namespace.
* `outputFile` - (Optional) File name where to save data source results (after running `terraform plan`).

## Attributes Reference

The following attributes are exported in addition to the arguments listed above:

* `ids` - A list of Chain IDs.
* `names` - A list of Chain names.
* `chains` - A list of Cr Chains. Each element contains the following attributes:
  * `id` - The resource ID of the delivery chain. The value formats as `<instance_id>:<chain_id>`.
  * `chainId` - The ID of delivery chain.
  * `instanceId` - The ID of CR Enterprise Edition instance.
  * `chainName` - The name of delivery chain.
  * `description` - The description of delivery chain.
  * `chainConfig` - The configuration of delivery chain.
    * `routers` - Execution sequence relationship between delivery chain nodes.
      * `from` - Source node.
        * `nodeName` - The name of node. Valid values: `dockerImageBuild`, `dockerImagePush`, `vulnerabilityScanning`, `activateReplication`, `trigger`, `snapshot`, `triggerSnapshot`.
      * `to` - Destination node.
        * `nodeName` - The name of node. Valid values: `dockerImageBuild`, `dockerImagePush`, `vulnerabilityScanning`, `activateReplication`, `trigger`, `snapshot`, `triggerSnapshot`.
    * `nodes` - Each node in the delivery chain.
      * `nodeName` - The name of delivery chain node.
      * `enable` - Whether to enable the delivery chain node. Valid values: `true`, `false`.
      * `nodeConfig` - The configuration of delivery chain node.
        * `denyPolicy` - Blocking rules for scanning nodes in delivery chain nodes. **Note:** When `nodeName` is `vulnerabilityScanning`, the parameters in `denyPolicy` need to be filled in.
          * `issueCount` - The count of scanning vulnerabilities that triggers blocking.
          * `issueLevel` - The level of scanning vulnerability that triggers blocking. Valid values: `low`, `medium`, `high`, `unknown`.
          * `logic` - The logic of trigger blocking. Valid values: `and`, `or`.
          * `action` - The action of trigger blocking. Valid values: `block`, `blockRetag`, `blockDeleteTag`. While `block` means block the delivery chain from continuing to execute, `blockRetag` means block overwriting push image tag, `blockDeleteTag` means block deletion of mirror tags.
  * `createTime` - The creation time of delivery chain.
  * `modifiedTime` - The modification time of delivery chain description.
  * `scopeId` - Delivery chain scope ID.
  * `scopeType` - Delivery chain scope type.
<!-- cache-key: cdktf-0.17.0-pre.15 input-b8544978b255deac4a7e649b5af6ab25511b3d9e75c2fbf4d187058e025e5b5b -->