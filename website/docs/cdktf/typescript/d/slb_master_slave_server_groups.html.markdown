---
subcategory: "Classic Load Balancer (SLB)"
layout: "alicloud"
page_title: "Alicloud: alicloud_slb_master_slave_server_groups"
sidebar_current: "docs-alicloud-datasource-slb-master-slave-server-groups"
description: |-
    Provides a list of master slave server groups related to a server load balancer to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_slb\_master\_slave\_server\_groups

This data source provides the master slave server groups related to a server load balancer.

-> **NOTE:** Available in 1.54.0+

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "tf-testAccSlbMasterSlaveServerGroupVpc",
    });
    const alicloudVpcMain = new alicloud.vpc.Vpc(this, "main", {
      cidrBlock: "172.16.0.0/16",
      name: name.stringValue,
    });
    const dataAlicloudImagesImage =
      new alicloud.dataAlicloudImages.DataAlicloudImages(this, "image", {
        mostRecent: true,
        nameRegex: "^ubuntu_18.*64",
        owners: "system",
      });
    const dataAlicloudZonesDefault =
      new alicloud.dataAlicloudZones.DataAlicloudZones(this, "default", {
        availableDiskCategory: "cloud_efficiency",
        availableResourceCreation: "VSwitch",
      });
    const alicloudSecurityGroupGroup = new alicloud.securityGroup.SecurityGroup(
      this,
      "group",
      {
        name: name.stringValue,
        vpcId: cdktf.Token.asString(alicloudVpcMain.id),
      }
    );
    const alicloudVswitchMain = new alicloud.vswitch.Vswitch(this, "main_5", {
      cidrBlock: "172.16.0.0/16",
      vpcId: cdktf.Token.asString(alicloudVpcMain.id),
      vswitchName: name.stringValue,
      zoneId: cdktf.Token.asString(
        cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchMain.overrideLogicalId("main");
    const dataAlicloudInstanceTypesDefault =
      new alicloud.dataAlicloudInstanceTypes.DataAlicloudInstanceTypes(
        this,
        "default_6",
        {
          availabilityZone: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
          ),
          eniAmount: 2,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudInstanceTypesDefault.overrideLogicalId("default");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudInstanceInstanceCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber("2")
    );
    const alicloudInstanceInstance = new alicloud.instance.Instance(
      this,
      "instance",
      {
        availabilityZone: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
        ),
        imageId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudImagesImage.images, ["0", "id"])
        ),
        instanceChargeType: "PostPaid",
        instanceName: name.stringValue,
        instanceType: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudInstanceTypesDefault.instanceTypes, [
            "0",
            "id",
          ])
        ),
        internetChargeType: "PayByTraffic",
        internetMaxBandwidthOut: cdktf.Token.asNumber("10"),
        securityGroups: [cdktf.Token.asString(alicloudSecurityGroupGroup.id)],
        systemDiskCategory: "cloud_efficiency",
        vswitchId: cdktf.Token.asString(alicloudVswitchMain.id),
        count: alicloudInstanceInstanceCount,
      }
    );
    const alicloudSlbLoadBalancerInstance =
      new alicloud.slbLoadBalancer.SlbLoadBalancer(this, "instance_8", {
        loadBalancerName: name.stringValue,
        loadBalancerSpec: "slb.s2.small",
        vswitchId: cdktf.Token.asString(alicloudVswitchMain.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSlbLoadBalancerInstance.overrideLogicalId("instance");
    const alicloudSlbMasterSlaveServerGroupGroup =
      new alicloud.slbMasterSlaveServerGroup.SlbMasterSlaveServerGroup(
        this,
        "group_9",
        {
          loadBalancerId: cdktf.Token.asString(
            alicloudSlbLoadBalancerInstance.id
          ),
          name: name.stringValue,
          servers: [
            {
              port: 100,
              serverId: cdktf.Token.asString(
                cdktf.propertyAccess(alicloudInstanceInstance, ["0", "id"])
              ),
              serverType: "Master",
              weight: 100,
            },
            {
              port: 100,
              serverId: cdktf.Token.asString(
                cdktf.propertyAccess(alicloudInstanceInstance, ["1", "id"])
              ),
              serverType: "Slave",
              weight: 100,
            },
          ],
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSlbMasterSlaveServerGroupGroup.overrideLogicalId("group");
    const dataAlicloudSlbMasterSlaveServerGroupsSampleDs =
      new alicloud.dataAlicloudSlbMasterSlaveServerGroups.DataAlicloudSlbMasterSlaveServerGroups(
        this,
        "sample_ds",
        {
          loadBalancerId: cdktf.Token.asString(
            alicloudSlbLoadBalancerInstance.id
          ),
        }
      );
    new cdktf.TerraformOutput(this, "first_slb_server_group_id", {
      value: cdktf.propertyAccess(
        dataAlicloudSlbMasterSlaveServerGroupsSampleDs.groups,
        ["0", "id"]
      ),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `loadBalancerId` - ID of the SLB.
* `ids` - (Optional) A list of master slave server group IDs to filter results.
* `nameRegex` - (Optional) A regex string to filter results by master slave server group name.
* `outputFile` - (Optional) File name where to save data source results (after running `terraform plan`).

## Attributes Reference

The following attributes are exported in addition to the arguments listed above:

* `ids` - A list of SLB master slave server groups IDs.
* `names` - A list of SLB master slave server groups names.
* `groups` - A list of SLB master slave server groups. Each element contains the following attributes:
  * `id` - master slave server group ID.
  * `name` - master slave server group name.
  * `servers` - ECS instances associated to the group. Each element contains the following attributes:
    * `instanceId` - ID of the attached ECS instance.
    * `weight` - Weight associated to the ECS instance.
    * `port` - The port used by the master slave server group.
    * `serverType` - The server type of the attached ECS instance.
    * `isBackup` - (Removed from v1.63.0) Determine if the server is executing.


<!-- cache-key: cdktf-0.17.0-pre.15 input-35f4efa07fa3adb8f09dc54fad8153c40db91091cbd179d5d2a7a41d458cb9ce -->