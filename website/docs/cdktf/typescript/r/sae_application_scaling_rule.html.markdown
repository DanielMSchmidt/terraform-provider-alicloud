---
subcategory: "Serverless App Engine (SAE)"
layout: "alicloud"
page_title: "Alicloud: alicloud_sae_application_scaling_rule"
sidebar_current: "docs-alicloud-resource-sae-application-scaling-rule"
description: |-
  Provides a Alicloud Serverless App Engine (SAE) Application Scaling Rule resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_sae\_application\_scaling\_rule

Provides a Serverless App Engine (SAE) Application Scaling Rule resource.

For information about Serverless App Engine (SAE) Application Scaling Rule and how to use it, see [What is Application Scaling Rule](https://help.aliyun.com/document_detail/134120.html).

-> **NOTE:** Available in v1.159.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const alicloudSaeNamespaceDefault = new alicloud.saeNamespace.SaeNamespace(
      this,
      "default",
      {
        namespaceDescription: "example_value",
        namespaceId: "example_value",
        namespaceName: "example_value",
      }
    );
    const dataAlicloudVpcsDefault =
      new alicloud.dataAlicloudVpcs.DataAlicloudVpcs(this, "default_1", {
        nameRegex: "default-NODELETING",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVpcsDefault.overrideLogicalId("default");
    const dataAlicloudVswitchesDefault =
      new alicloud.dataAlicloudVswitches.DataAlicloudVswitches(
        this,
        "default_2",
        {
          vpcId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVswitchesDefault.overrideLogicalId("default");
    const alicloudSaeApplicationDefault =
      new alicloud.saeApplication.SaeApplication(this, "default_3", {
        appDescription: "example_value",
        appName: "example_value",
        cpu: cdktf.Token.asNumber("500"),
        imageUrl: "registry-vpc.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5",
        jdk: "Open JDK 8",
        memory: cdktf.Token.asNumber("2048"),
        namespaceId: cdktf.Token.asString(
          alicloudSaeNamespaceDefault.namespaceId
        ),
        packageType: "Image",
        replicas: cdktf.Token.asNumber("5"),
        timezone: "Asia/Shanghai",
        vpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
        ),
        vswitchId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVswitchesDefault.ids, ["0"])
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSaeApplicationDefault.overrideLogicalId("default");
    new alicloud.saeApplicationScalingRule.SaeApplicationScalingRule(
      this,
      "example",
      {
        appId: cdktf.Token.asString(alicloudSaeApplicationDefault.id),
        scalingRuleEnable: true,
        scalingRuleMetric: {
          maxReplicas: 50,
          metrics: [
            {
              metricTargetAverageUtilization: 20,
              metricType: "CPU",
            },
            {
              metricTargetAverageUtilization: 30,
              metricType: "MEMORY",
            },
            {
              metricTargetAverageUtilization: 20,
              metricType: "tcpActiveConn",
            },
          ],
          minReplicas: 3,
          scaleDownRules: {
            disabled: false,
            stabilizationWindowSeconds: 10,
            step: 10,
          },
          scaleUpRules: {
            disabled: false,
            stabilizationWindowSeconds: 0,
            step: 10,
          },
        },
        scalingRuleName: "example-value",
        scalingRuleTimer: {
          beginDate: "2022-02-25",
          endDate: "2022-03-25",
          period: "* * *",
          schedules: [
            {
              atTime: "08:00",
              maxReplicas: 10,
              minReplicas: 3,
            },
            {
              atTime: "20:00",
              maxReplicas: 50,
              minReplicas: 3,
            },
          ],
        },
        scalingRuleType: "mix",
      }
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `appId` - (Required, ForceNew) Application ID.
* `minReadyInstanceRatio` - (Optional) The min ready instance ratio.
* `minReadyInstances` - (Optional) The min ready instances.
* `scalingRuleEnable` - (Optional, Computed) True whether the auto scaling policy is enabled. The value description is as follows: true: enabled state. false: disabled status. Valid values: `false`, `true`.
* `scalingRuleName` - (Required, ForceNew) The name of a custom elastic scaling policy. In the application, the policy name cannot be repeated. It must start with a lowercase letter, and can only contain lowercase letters, numbers, and dashes (-), and no more than 32 characters. After the scaling policy is successfully created, the policy name cannot be modified.
* `scalingRuleType` - (Required, ForceNew) Flexible strategy type. Valid values: `mix`, `timing` and `metric`.
* `scalingRuleTimer` - (Optional) Configuration of Timing Resilient Policies. See the following `Block scaling_rule_timer`.
* `scalingRuleMetric` - (Optional) Monitor the configuration of the indicator elasticity strategy. See the following `Block scaling_rule_metric`.

#### Block scaling_rule_timer

The scaling_rule_timer supports the following:

* `beginDate` - (Optional) The Start date. When the `beginDate` and `endDate` values are empty. it indicates long-term execution and is the default value.
* `endDate` - (Optional) The End Date. When the `beginDate` and `endDate` values are empty. it indicates long-term execution and is the default value.
* `period` - (Optional) The period in which a timed elastic scaling strategy is executed.
* `schedules` - (Optional) Resilient Scaling Strategy Trigger Timing. See the following `Block schedules`.

#### Block schedules

The schedules supports the following:

* `atTime` - (Optional) Trigger point in time. When supporting format: minutes, for example: `08:00`.
* `targetReplicas` - (Optional) This parameter can specify the number of instances to be applied or the minimum number of surviving instances per deployment. value range [1,50]. -> **NOTE:** The attribute is valid when the attribute `scalingRuleType` is `timing`.
* `maxReplicas` - (Optional) Maximum number of instances applied. -> **NOTE:** The attribute is valid when the attribute `scalingRuleType` is `mix`.
* `minReplicas` - (Optional) Minimum number of instances applied. -> **NOTE:** The attribute is valid when the attribute `scalingRuleType` is `mix`.

#### Block scaling_rule_metric

The scaling_rule_metric supports the following:

* `maxReplicas` - (Optional) Maximum number of instances applied.
* `minReplicas` - (Optional) Minimum number of instances applied.
* `metrics` - (Optional) Indicator rule configuration. See the following `Block metrics`.
* `scaleUpRules` - (Optional) Apply expansion rules. See the following `Block scale_up_rules`.
* `scaleDownRules` - (Optional) Apply shrink rules. See the following `Block scale_down_rules`.

#### Block scale_up_rules

The scale_up_rules supports the following:

* `step` - (Optional) Elastic expansion or contraction step size. the maximum number of instances to be scaled in per unit time.
* `stabilizationWindowSeconds` - (Optional) Cooling time for expansion or contraction. Valid values: `0` to `3600`. Unit: seconds. The default is `0` seconds.
* `disabled` - (Optional) Whether shrinkage is prohibited.

#### Block scale_down_rules

The scale_down_rules supports the following:

* `step` - (Optional) Elastic expansion or contraction step size. the maximum number of instances to be scaled in per unit time.
* `stabilizationWindowSeconds` - (Optional) Cooling time for expansion or contraction. Valid values: `0` to `3600`. Unit: seconds. The default is `0` seconds.
* `disabled` - (Optional) Whether shrinkage is prohibited.

#### Block metrics

The metrics supports the following:

* `metricTargetAverageUtilization` - (Optional) According to different `metricType`, set the target value of the corresponding monitoring index.
* `metricType` - (Optional) Monitoring indicator trigger condition. Valid values: `cpu`, `memory`, `tcpActiveConn`, `qps`, `rt`, `slbQps`, `slbRt`, `intranetSlbQps` and `intranetSlbRt`. The values are described as follows:
  - CPU: CPU usage.
  - MEMORY: MEMORY usage.
  - tcpActiveConn: The average number of TCP active connections for a single instance in 30 seconds.
  - QPS: The average QPS of a single instance within 1 minute of JAVA application.
  - RT: The average response time of all service interfaces within 1 minute of JAVA application.
  - SLB_QPS: The average public network SLB QPS of a single instance within 15 seconds.
  - SLB_RT: The average response time of public network SLB within 15 seconds.
  - INTRANET_SLB_QPS: The average private network SLB QPS of a single instance within 15 seconds.
  - INTRANET_SLB_RT: The average response time of private network SLB within 15 seconds.
**NOTE:** From version 1.206.0, `metricType` can be set to `qps`, `rt`, `intranetSlbQps`, `intranetSlbRt`.
* `slbId` - (Optional, Available in 1.206.0+) SLB ID.
* `slbProject` - (Optional, Available in 1.206.0+) The project of the Log Service.
* `slbLogStore` - (Optional, Available in 1.206.0+) The log store of the Log Service.
* `vport` - (Optional, Available in 1.206.0+) SLB listening port.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID of Application Scaling Rule. The value formats as `<app_id>:<scaling_rule_name>`.

## Import

Serverless App Engine (SAE) Application Scaling Rule can be imported using the id, e.g.

```shell
$ terraform import alicloud_sae_application_scaling_rule.example <app_id>:<scaling_rule_name>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-ba6306da6fc2e9d051e3464ec3ad18454a07cc17ec696a1d8c944db68bc01c34 -->