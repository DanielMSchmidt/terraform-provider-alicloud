---
subcategory: "Apsara File Storage for HDFS (DFS)"
layout: "alicloud"
page_title: "Alicloud: alicloud_dfs_file_system"
sidebar_current: "docs-alicloud-resource-dfs-file-system"
description: |-
  Provides a Alicloud DFS File System resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_dfs\_file\_system

Provides a DFS File System resource.

For information about DFS File System and how to use it, see [What is File System](https://www.alibabacloud.com/help/doc-detail/207144.htm).

-> **NOTE:** Available in v1.140.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "tf-testAccFileSystem",
    });
    const dataAlicloudDfsZonesDefault =
      new alicloud.dataAlicloudDfsZones.DataAlicloudDfsZones(
        this,
        "default",
        {}
      );
    const alicloudDfsFileSystemDefault =
      new alicloud.dfsFileSystem.DfsFileSystem(this, "default_2", {
        description: name.stringValue,
        fileSystemName: name.stringValue,
        protocolType: "HDFS",
        spaceCapacity: cdktf.Token.asNumber("1024"),
        storageType: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudDfsZonesDefault.zones, [
            "0",
            "options",
            "0",
            "storage_type",
          ])
        ),
        throughputMode: "Standard",
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudDfsZonesDefault.zones, [
            "0",
            "zone_id",
          ])
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudDfsFileSystemDefault.overrideLogicalId("default");
  }
}

```

## Argument Reference

The following arguments are supported:

* `description` - (Optional) The description of the File system.
* `fileSystemName` - (Required) The name of the File system.
* `protocolType` - (Required, ForceNew) The protocol type. Valid values: `hdfs`.
* `provisionedThroughputInMiBps` - (Optional, ForceNew) The preset throughput of the File system. Valid values: `1` to `1024`, Unit: MB/s. **NOTE:** Only when `throughputMode` is `provisioned`, this param is valid.
* `spaceCapacity` - (Required) The capacity budget of the File system. **NOTE:** When the actual data storage reaches the file system capacity budget, the data cannot be written. The file system capacity budget does not support shrinking.
* `storageType` - (Required, ForceNew) The storage specifications of the File system. Valid values: `performance`, `standard`.
* `throughputMode` - (Optional, Sensitive) The throughput mode of the File system. Valid values: `provisioned`, `standard`.
* `zoneId` - (Required, ForceNew) The zone ID of the File system.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of File System.

## Import

DFS File System can be imported using the id, e.g.

```shell
$ terraform import alicloud_dfs_file_system.example <id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-fb97a5116811d38b4049a09478816717b6ece4388a17c6bbfd1ac3e9a77d9dec -->