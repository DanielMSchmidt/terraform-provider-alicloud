---
subcategory: "RDS"
layout: "alicloud"
page_title: "Alicloud: alicloud_rds_db_node"
sidebar_current: "docs-alicloud-resource-rds-db-node"
description: |-
  Provide RDS cluster instance to increase node resources.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_rds\_db\_node

Provide RDS cluster instance to increase node resources.
-> **NOTE:** Available in 1.202.0+.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "tf-testaccrdsdbnodes",
    });
    const dataAlicloudDbZonesDefault =
      new alicloud.dataAlicloudDbZones.DataAlicloudDbZones(this, "default", {
        category: "cluster",
        dbInstanceStorageType: "cloud_essd",
        engine: "MySQL",
        engineVersion: "8.0",
        instanceChargeType: "PostPaid",
      });
    const dataAlicloudVpcsDefault =
      new alicloud.dataAlicloudVpcs.DataAlicloudVpcs(this, "default_2", {
        nameRegex: "^default-NODELETING$",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVpcsDefault.overrideLogicalId("default");
    const dataAlicloudVswitchesDefault =
      new alicloud.dataAlicloudVswitches.DataAlicloudVswitches(
        this,
        "default_3",
        {
          vpcId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
          ),
          zoneId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudDbZonesDefault.ids, ["0"])
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVswitchesDefault.overrideLogicalId("default");
    const dataAlicloudDbInstanceClassesDefault =
      new alicloud.dataAlicloudDbInstanceClasses.DataAlicloudDbInstanceClasses(
        this,
        "default_4",
        {
          category: "cluster",
          dbInstanceStorageType: "cloud_essd",
          engine: "MySQL",
          engineVersion: "8.0",
          instanceChargeType: "PostPaid",
          zoneId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudDbZonesDefault.zones, ["0", "id"])
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudDbInstanceClassesDefault.overrideLogicalId("default");
    const alicloudDbInstanceDefault = new alicloud.dbInstance.DbInstance(
      this,
      "default_5",
      {
        dbInstanceStorageType: "cloud_essd",
        engine: "MySQL",
        engineVersion: "8.0",
        instanceName: name.stringValue,
        instanceStorage: cdktf.Token.asNumber(
          cdktf.propertyAccess(
            dataAlicloudDbInstanceClassesDefault.instanceClasses,
            ["0", "storage_range", "min"]
          )
        ),
        instanceType: cdktf.Token.asString(
          cdktf.propertyAccess(
            dataAlicloudDbInstanceClassesDefault.instanceClasses,
            ["0", "instance_class"]
          )
        ),
        vswitchId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVswitchesDefault.ids, ["0"])
        ),
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudDbZonesDefault.ids, ["0"])
        ),
        zoneIdSlaveA: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudDbZonesDefault.ids, ["0"])
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudDbInstanceDefault.overrideLogicalId("default");
    new alicloud.rdsDbNode.RdsDbNode(this, "node", {
      classCode: cdktf.Token.asString(alicloudDbInstanceDefault.instanceType),
      dbInstanceId: cdktf.Token.asString(alicloudDbInstanceDefault.id),
      zoneId: cdktf.Token.asString(alicloudDbInstanceDefault.zoneId),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `dbInstanceId` - (Required, ForceNew) The Id of instance that can run database.
* `classCode` - (Required, ForceNew) The specification information of the node.
* `zoneId` - (Required, ForceNew) The zone ID of the node.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of node.The value formats as `<db_instance_id>:<node_id>`.
* `nodeId` - The ID of the node.
* `nodeRole` - The role of node.
* `nodeRegionId` - The region ID of the node.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 30 mins) Use when opening exclusive agent (until it reaches the initial `running` status).
* `delete` - (Defaults to 20 mins) Use when closing exclusive agent.

## Import

RDS MySQL database cluster node agent function can be imported using id, e.g.

```shell
$ terraform import alicloud_rds_db_node.example <db_instance_id>:<node_id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-8a34964b91f0510c468df860bac4fc05242774bd22aecc045db278eae313ae3f -->