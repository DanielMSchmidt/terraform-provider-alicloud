---
subcategory: "Application Load Balancer (ALB)"
layout: "alicloud"
page_title: "Alicloud: alicloud_alb_load_balancer"
sidebar_current: "docs-alicloud-resource-alb-load-balancer"
description: |-
  Provides a Alicloud ALB Load Balancer resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_alb\_load\_balancer

Provides a ALB Load Balancer resource.

For information about ALB Load Balancer and how to use it, see [What is Load Balancer](https://www.alibabacloud.com/help/doc-detail/197341.htm).

-> **NOTE:** Available in v1.132.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "example-name",
    });
    const dataAlicloudAlbZonesDefault =
      new alicloud.dataAlicloudAlbZones.DataAlicloudAlbZones(
        this,
        "default",
        {}
      );
    const dataAlicloudResourceManagerResourceGroupsDefault =
      new alicloud.dataAlicloudResourceManagerResourceGroups.DataAlicloudResourceManagerResourceGroups(
        this,
        "default_2",
        {}
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudResourceManagerResourceGroupsDefault.overrideLogicalId(
      "default"
    );
    const dataAlicloudVpcsDefault =
      new alicloud.dataAlicloudVpcs.DataAlicloudVpcs(this, "default_3", {
        nameRegex: "default-NODELETING",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVpcsDefault.overrideLogicalId("default");
    const dataAlicloudVswitchesDefault1 =
      new alicloud.dataAlicloudVswitches.DataAlicloudVswitches(
        this,
        "default_1",
        {
          vpcId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
          ),
          zoneId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudAlbZonesDefault.zones, ["0", "id"])
          ),
        }
      );
    const dataAlicloudVswitchesDefault2 =
      new alicloud.dataAlicloudVswitches.DataAlicloudVswitches(
        this,
        "default_2_5",
        {
          vpcId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
          ),
          zoneId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudAlbZonesDefault.zones, ["1", "id"])
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVswitchesDefault2.overrideLogicalId("default_2");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudVswitchVswitch1Count = cdktf.TerraformCount.of(
      cdktf.Token.asNumber(
        cdktf.conditional(
          cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault1.ids), 0),
          0,
          1
        )
      )
    );
    const alicloudVswitchVswitch1 = new alicloud.vswitch.Vswitch(
      this,
      "vswitch_1",
      {
        cidrBlock: cdktf.Fn.cidrsubnet(
          cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.vpcs, [
              "0",
              "cidr_block",
            ])
          ),
          8,
          2
        ),
        vpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
        ),
        vswitchName: name.stringValue,
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudAlbZonesDefault.zones, ["0", "id"])
        ),
        count: alicloudVswitchVswitch1Count,
      }
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudVswitchVswitch2Count = cdktf.TerraformCount.of(
      cdktf.Token.asNumber(
        cdktf.conditional(
          cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault2.ids), 0),
          0,
          1
        )
      )
    );
    const alicloudVswitchVswitch2 = new alicloud.vswitch.Vswitch(
      this,
      "vswitch_2",
      {
        cidrBlock: cdktf.Fn.cidrsubnet(
          cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.vpcs, [
              "0",
              "cidr_block",
            ])
          ),
          8,
          4
        ),
        vpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
        ),
        vswitchName: name.stringValue,
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudAlbZonesDefault.zones, ["1", "id"])
        ),
        count: alicloudVswitchVswitch2Count,
      }
    );
    const alicloudAlbLoadBalancerDefault =
      new alicloud.albLoadBalancer.AlbLoadBalancer(this, "default_8", {
        addressAllocatedMode: "Fixed",
        addressType: "Internet",
        loadBalancerBillingConfig: {
          payType: "PayAsYouGo",
        },
        loadBalancerEdition: "Basic",
        loadBalancerName: name.stringValue,
        modificationProtectionConfig: {
          status: "NonProtection",
        },
        resourceGroupId: cdktf.Token.asString(
          cdktf.propertyAccess(
            dataAlicloudResourceManagerResourceGroupsDefault.groups,
            ["0", "id"]
          )
        ),
        tags: {
          Created: "TF",
        },
        vpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
        ),
        zoneMappings: [
          {
            vswitchId: cdktf.Token.asString(
              cdktf.conditional(
                cdktf.Op.gt(
                  cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault1.ids),
                  0
                ),
                cdktf.propertyAccess(dataAlicloudVswitchesDefault1.ids, ["0"]),
                cdktf.propertyAccess(
                  cdktf.Fn.concat([
                    cdktf.propertyAccess(alicloudVswitchVswitch1, ["*", "id"]),
                    [""],
                  ]),
                  ["0"]
                )
              )
            ),
            zoneId: cdktf.Token.asString(
              cdktf.propertyAccess(dataAlicloudAlbZonesDefault.zones, [
                "0",
                "id",
              ])
            ),
          },
          {
            vswitchId: cdktf.Token.asString(
              cdktf.conditional(
                cdktf.Op.gt(
                  cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault2.ids),
                  0
                ),
                cdktf.propertyAccess(dataAlicloudVswitchesDefault2.ids, ["0"]),
                cdktf.propertyAccess(
                  cdktf.Fn.concat([
                    cdktf.propertyAccess(alicloudVswitchVswitch2, ["*", "id"]),
                    [""],
                  ]),
                  ["0"]
                )
              )
            ),
            zoneId: cdktf.Token.asString(
              cdktf.propertyAccess(dataAlicloudAlbZonesDefault.zones, [
                "1",
                "id",
              ])
            ),
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudAlbLoadBalancerDefault.overrideLogicalId("default");
  }
}

```

## Argument Reference

The following arguments are supported:

* `accessLogConfig` - (Optional) The Access Logging Configuration Structure. See the following `Block access_log_config`.
* `addressAllocatedMode` - (Optional, ForceNew) The method in which IP addresses are assigned. Valid values: `fixed` and `dynamic`. Default value: `dynamic`.
  *`fixed`: The ALB instance uses a fixed IP address. 
  *`dynamic`: An IP address is dynamically assigned to each zone of the ALB instance.
* `addressType` - (Required) The type of IP address that the ALB instance uses to provide services. Valid values: `intranet`, `internet`. **NOTE:** From version 1.193.1, `addressType` can be modified.
* `deletionProtectionEnabled` - (Optional) The deletion protection enabled. Valid values: `true` and `false`. Default value: `false`.
* `dryRun` - (Optional) Specifies whether to precheck the API request. Valid values: `true` and `false`.
* `loadBalancerBillingConfig` - (Required, ForceNew) The configuration of the billing method. See the following `Block load_balancer_billing_config`.
* `loadBalancerEdition` - (Required) The edition of the ALB instance. Different editions have different limits and billing methods. Valid values: `basic`, `standard` and `standardWithWaf`(Available in v1.193.1+).
* `loadBalancerName` - (Required) The name of the resource.
* `modificationProtectionConfig` - (Optional, Computed) Modify the Protection Configuration. See the following `Block modification_protection_config`.
* `resourceGroupId` - (Optional, Computed) The ID of the resource group.
* `vpcId` - (Required, ForceNew) The ID of the virtual private cloud (VPC) where the ALB instance is deployed.
* `zoneMappings` - (Required, ForceNew) The zones and vSwitches. You must specify at least two zones. See the following `Block zone_mappings`.
* `addressIpVersion` - (Optional, ForceNew, Computed, Available in v1.193.1+) The IP version. Valid values: `ipv4`, `dualStack`.
* `tags` - (Optional) A mapping of tags to assign to the resource. **NOTE:** The Key of `tags` cannot begin with "aliyun", "acs:", "http://", "https://", "ack" or "ingress".

#### Block load_balancer_billing_config

The load_balancer_billing_config supports the following:

* `payType` - (Required) The billing method of the ALB instance. Valid value: `payAsYouGo`.

#### Block zone_mappings

The zone_mappings supports the following: 

* `vswitchId` - (Required) The ID of the vSwitch that corresponds to the zone. Each zone can use only one vSwitch and subnet.
* `zoneId` - (Required) The ID of the zone to which the ALB instance belongs.

#### Block modification_protection_config

The modification_protection_config supports the following: 

* `status` - (Optional, Computed, Available in v1.132.0+) Specifies whether to enable the configuration read-only mode for the ALB instance. Valid values: `nonProtection` and `consoleProtection`.
  * `nonProtection` - disables the configuration read-only mode. After you disable the configuration read-only mode, you cannot set the ModificationProtectionReason parameter. If the parameter is set, the value is cleared.
  * `consoleProtection` - enables the configuration read-only mode. After you enable the configuration read-only mode, you can set the ModificationProtectionReason parameter.
* `reason` - (Optional, Computed, Available in v1.132.0+) The reason for modification protection. This parameter must be 2 to 128 characters in length, and can contain letters, digits, periods, underscores, and hyphens. The reason must start with a letter. **Note:** This parameter takes effect only when `status` is set to `consoleProtection`.

#### Block access_log_config

The access_log_config supports the following: 

* `logProject` - (Optional) The log service that access logs are shipped to.
* `logStore` - (Optional) The log service that access logs are shipped to.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of Load Balancer.
* `status` - The load balancer status. Valid values: `active`, `configuring`, `createFailed`
* `dnsName` - The domain name of the ALB instance. **NOTE:** Available in v1.158.0+.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 2 mins) Used when create the Load Balancer.
* `update` - (Defaults to 2 mins) Used when update the Load Balancer.
* `delete` - (Defaults to 2 mins) Used when delete the Load Balancer.

## Import

ALB Load Balancer can be imported using the id, e.g.

```shell
$ terraform import alicloud_alb_load_balancer.example <id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-a0735855a241c3edef3e877d70d044ffd91e95d50095673817ad06b48667b090 -->