---
subcategory: "Function Compute Service (FC)"
layout: "alicloud"
page_title: "Alicloud: alicloud_fc_trigger"
sidebar_current: "docs-alicloud-resource-fc"
description: |-
  Provides a Alicloud Function Compute Trigger resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_fc\_trigger

Provides an Alicloud Function Compute Trigger resource. Based on trigger, execute your code in response to events in Alibaba Cloud.
 For information about Service and how to use it, see [What is Function Compute](https://www.alibabacloud.com/help/doc-detail/52895.htm).

-> **NOTE:** The resource requires a provider field 'account_id'. [See account_id](https://www.terraform.io/docs/providers/alicloud/index.html#account_id).

## Example Usage

Basic Usage

```terraform
variable "region" {
  default = "cn-hangzhou"
}

variable "account" {
  default = "12345"
}

provider "alicloud" {
  account_id = var.account
  region     = var.region
}

resource "alicloud_fc_trigger" "foo" {
  service    = "my-fc-service"
  function   = "hello-world"
  name       = "hello-trigger"
  role       = alicloud_ram_role.foo.arn
  source_arn = "acs:log:${var.region}:${var.account}:project/${alicloud_log_project.foo.name}"
  type       = "log"
  config     = <<EOF
    {
        "sourceConfig": {
            "project": "project-for-fc",
            "logstore": "project-for-fc"
        },
        "jobConfig": {
            "maxRetryTime": 3,
            "triggerInterval": 60
        },
        "functionParameter": {
            "a": "b",
            "c": "d"
        },
        "logConfig": {
            "project": "project-for-fc-log",
            "logstore": "project-for-fc-log"
        },
        "enable": true
    }
  
EOF


  depends_on = [alicloud_ram_role_policy_attachment.foo]
}

resource "alicloud_ram_role" "foo" {
  name     = "${var.name}-trigger"
  document = <<EOF
  {
    "Statement": [
      {
        "Action": "sts:AssumeRole",
        "Effect": "Allow",
        "Principal": {
          "Service": [
            "log.aliyuncs.com"
          ]
        }
      }
    ],
    "Version": "1"
  }
  
EOF


  description = "this is a test"
  force       = true
}

resource "alicloud_ram_role_policy_attachment" "foo" {
  role_name   = alicloud_ram_role.foo.name
  policy_name = "AliyunLogFullAccess"
  policy_type = "System"
}
```

MNS topic trigger:

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "fctriggermnstopic",
    });
    const alicloudFcServiceFoo = new alicloud.fcService.FcService(this, "foo", {
      internetAccess: false,
      name: name.stringValue,
    });
    const alicloudLogProjectFoo = new alicloud.logProject.LogProject(
      this,
      "foo_2",
      {
        description: "tf unit test",
        name: name.stringValue,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudLogProjectFoo.overrideLogicalId("foo");
    new alicloud.logStore.LogStore(this, "bar", {
      name: "${" + name.value + "}-source",
      project: cdktf.Token.asString(alicloudLogProjectFoo.name),
      retentionPeriod: cdktf.Token.asNumber("3000"),
      shardCount: 1,
    });
    const alicloudLogStoreFoo = new alicloud.logStore.LogStore(this, "foo_4", {
      name: name.stringValue,
      project: cdktf.Token.asString(alicloudLogProjectFoo.name),
      retentionPeriod: cdktf.Token.asNumber("3000"),
      shardCount: 1,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudLogStoreFoo.overrideLogicalId("foo");
    const alicloudMnsTopicFoo = new alicloud.mnsTopic.MnsTopic(this, "foo_5", {
      name: name.stringValue,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudMnsTopicFoo.overrideLogicalId("foo");
    const alicloudOssBucketFoo = new alicloud.ossBucket.OssBucket(
      this,
      "foo_6",
      {
        bucket: name.stringValue,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudOssBucketFoo.overrideLogicalId("foo");
    const alicloudOssBucketObjectFoo =
      new alicloud.ossBucketObject.OssBucketObject(this, "foo_7", {
        bucket: cdktf.Token.asString(alicloudOssBucketFoo.id),
        key: "fc/hello.zip",
        source: "./hello.zip",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudOssBucketObjectFoo.overrideLogicalId("foo");
    const alicloudRamRoleFoo = new alicloud.ramRole.RamRole(this, "foo_8", {
      description: "this is a test",
      document:
        '  {\n    "Statement": [\n      {\n        "Action": "sts:AssumeRole",\n        "Effect": "Allow",\n        "Principal": {\n          "Service": [\n            "mns.aliyuncs.com"\n          ]\n        }\n      }\n    ],\n    "Version": "1"\n  }\n',
      force: true,
      name: "${" + name.value + "}-trigger",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudRamRoleFoo.overrideLogicalId("foo");
    const alicloudRamRolePolicyAttachmentFoo =
      new alicloud.ramRolePolicyAttachment.RamRolePolicyAttachment(
        this,
        "foo_9",
        {
          policyName: "AliyunMNSNotificationRolePolicy",
          policyType: "System",
          roleName: cdktf.Token.asString(alicloudRamRoleFoo.name),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudRamRolePolicyAttachmentFoo.overrideLogicalId("foo");
    const dataAlicloudAccountCurrent =
      new alicloud.dataAlicloudAccount.DataAlicloudAccount(this, "current", {});
    const dataAlicloudRegionsCurrentRegion =
      new alicloud.dataAlicloudRegions.DataAlicloudRegions(
        this,
        "current_region",
        {
          current: true,
        }
      );
    const alicloudFcFunctionFoo = new alicloud.fcFunction.FcFunction(
      this,
      "foo_12",
      {
        handler: "hello.handler",
        memorySize: 512,
        name: name.stringValue,
        ossBucket: cdktf.Token.asString(alicloudOssBucketFoo.id),
        ossKey: cdktf.Token.asString(alicloudOssBucketObjectFoo.key),
        runtime: "python2.7",
        service: cdktf.Token.asString(alicloudFcServiceFoo.name),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudFcFunctionFoo.overrideLogicalId("foo");
    const alicloudFcTriggerFoo = new alicloud.fcTrigger.FcTrigger(
      this,
      "foo_13",
      {
        configMns:
          '  {\n    "filterTag":"testTag",\n    "notifyContentFormat":"STREAM",\n    "notifyStrategy":"BACKOFF_RETRY"\n  }\n',
        dependsOn: ["alicloud_ram_role_policy_attachment.foo"],
        function: cdktf.Token.asString(alicloudFcFunctionFoo.name),
        name: name.stringValue,
        role: cdktf.Token.asString(alicloudRamRoleFoo.arn),
        service: cdktf.Token.asString(alicloudFcServiceFoo.name),
        sourceArn:
          "acs:mns:" +
          cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudRegionsCurrentRegion.regions, [
              "0",
              "id",
            ])
          ) +
          ":${" +
          dataAlicloudAccountCurrent.id +
          "}:/topics/${" +
          alicloudMnsTopicFoo.name +
          "}",
        type: "mns_topic",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudFcTriggerFoo.overrideLogicalId("foo");
  }
}

```

CDN events trigger:

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "fctriggercdneventsconfig",
    });
    const alicloudCdnDomainNewDomain = new alicloud.cdnDomainNew.CdnDomainNew(
      this,
      "domain",
      {
        cdnType: "web",
        domainName: "${" + name.value + "}.tf.com",
        scope: "overseas",
        sources: [
          {
            content: "1.1.1.1",
            port: 80,
            priority: 20,
            type: "ipaddr",
            weight: 10,
          },
        ],
      }
    );
    const alicloudFcServiceFoo = new alicloud.fcService.FcService(this, "foo", {
      internetAccess: false,
      name: name.stringValue,
    });
    const alicloudOssBucketFoo = new alicloud.ossBucket.OssBucket(
      this,
      "foo_3",
      {
        bucket: name.stringValue,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudOssBucketFoo.overrideLogicalId("foo");
    const alicloudOssBucketObjectFoo =
      new alicloud.ossBucketObject.OssBucketObject(this, "foo_4", {
        bucket: cdktf.Token.asString(alicloudOssBucketFoo.id),
        key: "fc/hello.zip",
        source: "./hello.zip",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudOssBucketObjectFoo.overrideLogicalId("foo");
    const alicloudRamPolicyFoo = new alicloud.ramPolicy.RamPolicy(
      this,
      "foo_5",
      {
        description: "this is a test",
        document:
          '    {\n        "Version": "1",\n        "Statement": [\n        {\n            "Action": [\n            "fc:InvokeFunction"\n            ],\n        "Resource": [\n            "acs:fc:*:*:services/tf_cdnEvents/functions/*",\n            "acs:fc:*:*:services/tf_cdnEvents.*/functions/*"\n        ],\n        "Effect": "Allow"\n        }\n        ]\n    }\n',
        force: true,
        name: "${" + name.value + "}-trigger",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudRamPolicyFoo.overrideLogicalId("foo");
    const alicloudRamRoleFoo = new alicloud.ramRole.RamRole(this, "foo_6", {
      description: "this is a test",
      document:
        '    {\n        "Version": "1",\n        "Statement": [\n            {\n                "Action": "cdn:Describe*",\n                "Resource": "*",\n                "Effect": "Allow",\n\t\t        "Principal": {\n                "Service":\n                    ["log.aliyuncs.com"]\n                }\n            }\n        ]\n    }\n',
      force: true,
      name: "${" + name.value + "}-trigger",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudRamRoleFoo.overrideLogicalId("foo");
    const alicloudRamRolePolicyAttachmentFoo =
      new alicloud.ramRolePolicyAttachment.RamRolePolicyAttachment(
        this,
        "foo_7",
        {
          policyName: cdktf.Token.asString(alicloudRamPolicyFoo.name),
          policyType: "Custom",
          roleName: cdktf.Token.asString(alicloudRamRoleFoo.name),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudRamRolePolicyAttachmentFoo.overrideLogicalId("foo");
    const dataAlicloudAccountCurrent =
      new alicloud.dataAlicloudAccount.DataAlicloudAccount(this, "current", {});
    const alicloudFcFunctionFoo = new alicloud.fcFunction.FcFunction(
      this,
      "foo_9",
      {
        handler: "hello.handler",
        memorySize: 512,
        name: name.stringValue,
        ossBucket: cdktf.Token.asString(alicloudOssBucketFoo.id),
        ossKey: cdktf.Token.asString(alicloudOssBucketObjectFoo.key),
        runtime: "python2.7",
        service: cdktf.Token.asString(alicloudFcServiceFoo.name),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudFcFunctionFoo.overrideLogicalId("foo");
    new alicloud.fcTrigger.FcTrigger(this, "default", {
      config:
        '      {"eventName":"LogFileCreated",\n     "eventVersion":"1.0.0",\n     "notes":"cdn events trigger",\n     "filter":{\n        "domain": ["${' +
        alicloudCdnDomainNewDomain.domainName +
        '}"]\n        }\n    }\n',
      dependsOn: ["alicloud_ram_role_policy_attachment.foo"],
      function: cdktf.Token.asString(alicloudFcFunctionFoo.name),
      name: name.stringValue,
      role: cdktf.Token.asString(alicloudRamRoleFoo.arn),
      service: cdktf.Token.asString(alicloudFcServiceFoo.name),
      sourceArn: "acs:cdn:*:${" + dataAlicloudAccountCurrent.id + "}",
      type: "cdn_events",
    });
  }
}

```

EventBridge trigger:

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "fctriggereventbridgeconfig",
    });
    new alicloud.eventBridgeServiceLinkedRole.EventBridgeServiceLinkedRole(
      this,
      "service_linked_role",
      {
        productName: "AliyunServiceRoleForEventBridgeSendToFC",
      }
    );
    const alicloudFcServiceFoo = new alicloud.fcService.FcService(this, "foo", {
      internetAccess: false,
      name: name.stringValue,
    });
    const alicloudOssBucketFoo = new alicloud.ossBucket.OssBucket(
      this,
      "foo_3",
      {
        bucket: name.stringValue,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudOssBucketFoo.overrideLogicalId("foo");
    const alicloudOssBucketObjectFoo =
      new alicloud.ossBucketObject.OssBucketObject(this, "foo_4", {
        bucket: cdktf.Token.asString(alicloudOssBucketFoo.id),
        key: "fc/hello.zip",
        source: "./hello.zip",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudOssBucketObjectFoo.overrideLogicalId("foo");
    new alicloud.dataAlicloudAccount.DataAlicloudAccount(this, "current", {});
    const alicloudFcFunctionFoo = new alicloud.fcFunction.FcFunction(
      this,
      "foo_6",
      {
        handler: "hello.handler",
        memorySize: 512,
        name: name.stringValue,
        ossBucket: cdktf.Token.asString(alicloudOssBucketFoo.id),
        ossKey: cdktf.Token.asString(alicloudOssBucketObjectFoo.key),
        runtime: "python2.7",
        service: cdktf.Token.asString(alicloudFcServiceFoo.name),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudFcFunctionFoo.overrideLogicalId("foo");
    new alicloud.fcTrigger.FcTrigger(this, "default", {
      config:
        '    {\n        "triggerEnable": false,\n        "asyncInvocationType": false,\n        "eventRuleFilterPattern": "{\\"source\\":[\\"acs.oss\\"],\\"type\\":[\\"oss:BucketCreated:PutBucket\\"]}",\n        "eventSourceConfig": {\n            "eventSourceType": "Default"\n        }\n    }\n',
      function: cdktf.Token.asString(alicloudFcFunctionFoo.name),
      name: name.stringValue,
      service: cdktf.Token.asString(alicloudFcServiceFoo.name),
      type: "eventbridge",
    });
    new alicloud.fcTrigger.FcTrigger(this, "mns", {
      config:
        '    {\n        "triggerEnable": false,\n        "asyncInvocationType": false,\n        "eventRuleFilterPattern": "{}",\n        "eventSourceConfig": {\n            "eventSourceType": "MNS",\n            "eventSourceParameters": {\n                "sourceMNSParameters": {\n                    "RegionId": "cn-hangzhou",\n                    "QueueName": "mns-queue",\n                    "IsBase64Decode": true\n                }\n            }\n        }\n    }\n',
      function: cdktf.Token.asString(alicloudFcFunctionFoo.name),
      name: name.stringValue,
      service: cdktf.Token.asString(alicloudFcServiceFoo.name),
      type: "eventbridge",
    });
    new alicloud.fcTrigger.FcTrigger(this, "rabbitmq", {
      config:
        '    {\n        "triggerEnable": false,\n        "asyncInvocationType": false,\n        "eventRuleFilterPattern": "{}",\n        "eventSourceConfig": {\n            "eventSourceType": "RabbitMQ",\n            "eventSourceParameters": {\n                "sourceRabbitMQParameters": {\n                    "RegionId": "cn-hangzhou",\n                    "InstanceId": "amqp-cn-****** ",\n                    "VirtualHostName": "test-virtual",\n                    "QueueName": "test-queue"\n                }\n            }\n        }\n    }\n',
      function: cdktf.Token.asString(alicloudFcFunctionFoo.name),
      name: name.stringValue,
      service: cdktf.Token.asString(alicloudFcServiceFoo.name),
      type: "eventbridge",
    });
    new alicloud.fcTrigger.FcTrigger(this, "rocketmq", {
      config:
        '    {\n        "triggerEnable": false,\n        "asyncInvocationType": false,\n        "eventRuleFilterPattern": "{}",\n        "eventSourceConfig": {\n            "eventSourceType": "RocketMQ",\n            "eventSourceParameters": {\n                "sourceRocketMQParameters": {\n                    "RegionId": "cn-hangzhou",\n                    "InstanceId": "MQ_INST_164901546557****_BAAN****",\n                    "GroupID": "GID_group1",\n                    "Topic": "mytopic",\n                    "Timestamp": 1636597951984,\n                    "Tag": "test-tag",\n                    "Offset": "CONSUME_FROM_LAST_OFFSET"\n                }\n            }\n        }\n    }\n',
      function: cdktf.Token.asString(alicloudFcFunctionFoo.name),
      name: name.stringValue,
      service: cdktf.Token.asString(alicloudFcServiceFoo.name),
      type: "eventbridge",
    });
  }
}

```

## Module Support

You can use to the existing [fc module](https://registry.terraform.io/modules/terraform-alicloud-modules/fc/alicloud) 
to create several triggers quickly.

## Argument Reference

The following arguments are supported:

* `service` - (Required, ForceNew) The Function Compute service name.
* `function` - (Required, ForceNew) The Function Compute function name.
* `name` - (ForceNew) The Function Compute trigger name. It is the only in one service and is conflict with "name_prefix".
* `namePrefix` - (ForceNew) Setting a prefix to get a only trigger name. It is conflict with "name".
* `role` - (Optional) RAM role arn attached to the Function Compute trigger. Role used by the event source to call the function. The value format is "acs:ram::$account-id:role/$role-name". See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
* `sourceArn` - (Optional, ForceNew) Event source resource address. See [Create a trigger](https://www.alibabacloud.com/help/doc-detail/53102.htm) for more details.
* `config` - (Optional) The config of Function Compute trigger.It is valid when `type` is not "mns_topic".See [Configure triggers and events](https://www.alibabacloud.com/help/doc-detail/70140.htm) for more details.
* `configMns` - (Optional, ForceNew, Available in 1.41.0) The config of Function Compute trigger when the type is "mns_topic".It is conflict with `config`.
* `type` - (Required, ForceNew) The Type of the trigger. Valid values: ["oss", "log", "timer", "http", "mns_topic", "cdn_events", "eventbridge"].

-> **NOTE:** Config does not support modification when type is mns_topic.
-> **NOTE:** type = cdn_events, available in 1.47.0+.
-> **NOTE:** type = eventbridge, available in 1.173.0+.

## Attributes Reference

The following arguments are exported:

* `id` - The ID of the function. The value is formate as `<service>:<function>:<name>`.
* `lastModified` - The date this resource was last modified.
* `triggerId` - The Function Compute trigger ID.

## Import

Function Compute trigger can be imported using the id, e.g.

```shell
$ terraform import alicloud_fc_trigger.foo my-fc-service:hello-world:hello-trigger
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-dfa22fe8e4521b557697a1b10cd3335acad8f2c197237ca7bb38d5bbfc5845b2 -->