---
subcategory: "Simple Application Server"
layout: "alicloud"
page_title: "Alicloud: alicloud_simple_application_server_snapshot"
sidebar_current: "docs-alicloud-resource-simple-application-server-snapshot"
description: |-
  Provides a Alicloud Simple Application Server Snapshot resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_simple\_application\_server\_snapshot

Provides a Simple Application Server Snapshot resource.

For information about Simple Application Server Snapshot and how to use it, see [What is Snapshot](https://www.alibabacloud.com/help/doc-detail/190452.htm).

-> **NOTE:** Available in v1.143.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudSimpleApplicationServerImagesExample =
      new alicloud.dataAlicloudSimpleApplicationServerImages.DataAlicloudSimpleApplicationServerImages(
        this,
        "example",
        {}
      );
    const dataAlicloudSimpleApplicationServerInstancesExample =
      new alicloud.dataAlicloudSimpleApplicationServerInstances.DataAlicloudSimpleApplicationServerInstances(
        this,
        "example_1",
        {}
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudSimpleApplicationServerInstancesExample.overrideLogicalId(
      "example"
    );
    const dataAlicloudSimpleApplicationServerPlansExample =
      new alicloud.dataAlicloudSimpleApplicationServerPlans.DataAlicloudSimpleApplicationServerPlans(
        this,
        "example_2",
        {}
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudSimpleApplicationServerPlansExample.overrideLogicalId(
      "example"
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudSimpleApplicationServerInstanceExampleCount =
      cdktf.TerraformCount.of(
        cdktf.Token.asNumber(
          cdktf.conditional(
            cdktf.Op.gt(
              cdktf.Fn.lengthOf(
                dataAlicloudSimpleApplicationServerInstancesExample.ids
              ),
              0
            ),
            0,
            1
          )
        )
      );
    const alicloudSimpleApplicationServerInstanceExample =
      new alicloud.simpleApplicationServerInstance.SimpleApplicationServerInstance(
        this,
        "example_3",
        {
          imageId: cdktf.Token.asString(
            cdktf.propertyAccess(
              dataAlicloudSimpleApplicationServerImagesExample.images,
              ["0", "id"]
            )
          ),
          instanceName: "example_value",
          paymentType: "Subscription",
          period: 1,
          planId: cdktf.Token.asString(
            cdktf.propertyAccess(
              dataAlicloudSimpleApplicationServerPlansExample.plans,
              ["0", "id"]
            )
          ),
          count: alicloudSimpleApplicationServerInstanceExampleCount,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSimpleApplicationServerInstanceExample.overrideLogicalId("example");
    const dataAlicloudSimpleApplicationServerDisksExample =
      new alicloud.dataAlicloudSimpleApplicationServerDisks.DataAlicloudSimpleApplicationServerDisks(
        this,
        "example_4",
        {
          instanceId: cdktf.Token.asString(
            cdktf.conditional(
              cdktf.Op.gt(
                cdktf.Fn.lengthOf(
                  dataAlicloudSimpleApplicationServerInstancesExample.ids
                ),
                0
              ),
              cdktf.propertyAccess(
                dataAlicloudSimpleApplicationServerInstancesExample.ids,
                ["0"]
              ),
              cdktf.propertyAccess(
                alicloudSimpleApplicationServerInstanceExample,
                ["0", "id"]
              )
            )
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudSimpleApplicationServerDisksExample.overrideLogicalId(
      "example"
    );
    const alicloudSimpleApplicationServerSnapshotExample =
      new alicloud.simpleApplicationServerSnapshot.SimpleApplicationServerSnapshot(
        this,
        "example_5",
        {
          diskId: cdktf.Token.asString(
            cdktf.propertyAccess(
              dataAlicloudSimpleApplicationServerDisksExample.ids,
              ["0"]
            )
          ),
          snapshotName: "example_value",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSimpleApplicationServerSnapshotExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `diskId` - (Required, ForceNew) The ID of the disk.
* `snapshotName` - (Required, ForceNew) The name of the snapshot. The name must be `2` to `50` characters in length. It must start with a letter and cannot start with `http://` or `https://`. It can contain letters, digits, colons (:), underscores (_), periods (.),and hyphens (-).

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of Snapshot.
* `status` - The status of the snapshot. Valid values: `progressing`, `accomplished` and `failed`.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 20 mins) Used when create the Snapshot.

## Import

Simple Application Server Snapshot can be imported using the id, e.g.

```shell
$ terraform import alicloud_simple_application_server_snapshot.example <id>
```
<!-- cache-key: cdktf-0.17.0-pre.15 input-a50b2b3e22d585eb7d8e4b5a3bc05a07c16a17161dfcbf83b3aa2873642d92f6 -->