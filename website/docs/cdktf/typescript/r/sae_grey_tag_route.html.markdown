---
subcategory: "Serverless App Engine (SAE)"
layout: "alicloud"
page_title: "Alicloud: alicloud_sae_grey_tag_route"
sidebar_current: "docs-alicloud-resource-sae-grey_tag_route"
description: |-
  Provides a Alicloud Serverless App Engine (SAE) GreyTagRoute resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_sae\_grey\_tag\_route

Provides a Serverless App Engine (SAE) GreyTagRoute resource.

For information about Serverless App Engine (SAE) GreyTagRoute and how to use it, see [What is GreyTagRoute](https://help.aliyun.com/document_detail/97792.html).

-> **NOTE:** Available in v1.160.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "tf-testacc",
    });
    const region = new cdktf.TerraformVariable(this, "region", {
      default: "cn-hangzhou",
    });
    const alicloudSaeNamespaceDefault = new alicloud.saeNamespace.SaeNamespace(
      this,
      "default",
      {
        namespaceDescription: name.stringValue,
        namespaceId: cdktf.Fn.join(
          ":",
          cdktf.Token.asList([region.value, name.value])
        ),
        namespaceName: name.stringValue,
      }
    );
    const dataAlicloudVpcsDefault =
      new alicloud.dataAlicloudVpcs.DataAlicloudVpcs(this, "default_3", {
        nameRegex: "default-NODELETING",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVpcsDefault.overrideLogicalId("default");
    const dataAlicloudVswitchesDefault =
      new alicloud.dataAlicloudVswitches.DataAlicloudVswitches(
        this,
        "default_4",
        {
          vpcId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVswitchesDefault.overrideLogicalId("default");
    const alicloudSaeApplicationDefault =
      new alicloud.saeApplication.SaeApplication(this, "default_5", {
        appDescription: name.stringValue,
        appName: name.stringValue,
        cpu: cdktf.Token.asNumber("500"),
        imageUrl: "registry-vpc.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5",
        jdk: "Open JDK 8",
        memory: cdktf.Token.asNumber("2048"),
        namespaceId: cdktf.Token.asString(
          alicloudSaeNamespaceDefault.namespaceId
        ),
        packageType: "Image",
        replicas: cdktf.Token.asNumber("5"),
        timezone: "Asia/Shanghai",
        vpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
        ),
        vswitchId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVswitchesDefault.ids, ["0"])
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSaeApplicationDefault.overrideLogicalId("default");
    const alicloudSaeGreyTagRouteDefault =
      new alicloud.saeGreyTagRoute.SaeGreyTagRoute(this, "default_6", {
        appId: cdktf.Token.asString(alicloudSaeApplicationDefault.id),
        description: name.stringValue,
        dubboRules: [
          {
            condition: "OR",
            group: "DUBBO",
            items: [
              {
                cond: "==",
                expr: ".key1",
                index: cdktf.Token.asNumber("1"),
                operator: "rawvalue",
                value: "value1",
              },
            ],
            methodName: "test",
            serviceName: "com.test.service",
            version: "1.0.0",
          },
        ],
        greyTagRouteName: name.stringValue,
        scRules: [
          {
            condition: "AND",
            items: [
              {
                cond: "==",
                name: "tftest",
                operator: "rawvalue",
                type: "param",
                value: "test",
              },
            ],
            path: "/tf/test",
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSaeGreyTagRouteDefault.overrideLogicalId("default");
  }
}

```

## Argument Reference

The following arguments are supported:

* `appId` - (Required, ForceNew) The ID  of the SAE Application.
* `description` - (Optional) The description of GreyTagRoute.
* `greyTagRouteName` - (Required, ForceNew) The name of GreyTagRoute.
* `dubboRules` - (Optional) The grayscale rule created for Dubbo Application. The details see Block `dubboRules`.
* `scRules` - (Optional) The grayscale rule created for SpringCloud Application. The details see Block `scRules`.

### dubbo_rules

The `dubboRules` supports the following:
* `methodName` - (Optional) The method name
* `serviceName` - (Optional) The service name.
* `version` - (Optional) The service version.
* `condition` - (Optional) The Conditional Patterns for Grayscale Rules. Valid values: `and`, `or`.
* `group` - (Optional) The service group.
* `items` - (Optional) A list of conditions items. The details see Block `dubboRulesItems`.

#### dubbo_rules_items

The `dubboRulesItems` supports the following:
* `index` - (Optional) The parameter number.
* `expr` - (Optional) The parameter value gets the expression.
* `cond` - (Optional) The comparison operator. Valid values: `>`, `<`, `>=`, `<=`, `==`, `!=`.
* `value` - (Optional) The value of the parameter.
* `operator` - (Optional) The operator. Valid values: `rawvalue`, `list`, `mod`, `deterministicProportionalSteamingDivision`

### sc_rules

The `scRules` supports the following:
* `path` - (Optional) The path corresponding to the grayscale rule.
* `condition` - (Optional) The conditional Patterns for Grayscale Rules. Valid values: `and`, `or`.
* `items` - (Optional) A list of conditions items. The details see Block `scRulesItems`.

#### sc_rules_items

The `scRulesItems` supports the following:
* `name` - (Optional) The name of the parameter.
* `type` - (Optional) The compare types. Valid values: `param`, `cookie`, `header`.
* `cond` - (Optional) The comparison operator. Valid values: `>`, `<`, `>=`, `<=`, `==`, `!=`.
* `value` - (Optional) The value of the parameter.
* `operator` - (Optional) The operator. Valid values: `rawvalue`, `list`, `mod`, `deterministicProportionalSteamingDivision`.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of GreyTagRoute.


#### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 1 mins) Used when create the resource.
* `update` - (Defaults to 1 mins) Used when update the resource.
* `delete` - (Defaults to 1 mins) Used when delete the resource.

## Import

Serverless App Engine (SAE) GreyTagRoute can be imported using the id, e.g.

```shell
$ terraform import alicloud_sae_grey_tag_route.example <id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-36770cb26eba26291faff06362342e5345e3ef552e0f97fe5b212bb7d71364f1 -->