---
subcategory: "Classic Load Balancer (SLB)"
layout: "alicloud"
page_title: "Alicloud: alicloud_slb_master_slave_server_group"
sidebar_current: "docs-alicloud-resource-slb-master-slave-server-group"
description: |-
  Provides a Load Banlancer Master Slave Server Group resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_slb\_master\_slave\_server\_group

A master slave server group contains two ECS instances. The master slave server group can help you to define multiple listening dimension.

-> **NOTE:** One ECS instance can be added into multiple master slave server groups.

-> **NOTE:** One master slave server group can only add two ECS instances, which are master server and slave server.

-> **NOTE:** One master slave server group can be attached with tcp/udp listeners in one load balancer.

-> **NOTE:** One Classic and Internet load balancer, its master slave server group can add Classic and VPC ECS instances.

-> **NOTE:** One Classic and Intranet load balancer, its master slave server group can only add Classic ECS instances.

-> **NOTE:** One VPC load balancer, its master slave server group can only add the same VPC ECS instances.

-> **NOTE:** Available in 1.54.0+

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const slbMasterSlaveServerGroup = new cdktf.TerraformVariable(
      this,
      "slb_master_slave_server_group",
      {
        default: "forSlbMasterSlaveServerGroup",
      }
    );
    const alicloudVpcMain = new alicloud.vpc.Vpc(this, "main", {
      cidrBlock: "172.16.0.0/16",
      vpcName: slbMasterSlaveServerGroup.stringValue,
    });
    const dataAlicloudImagesImage =
      new alicloud.dataAlicloudImages.DataAlicloudImages(this, "image", {
        mostRecent: true,
        nameRegex: "^ubuntu_18.*64",
        owners: "system",
      });
    const dataAlicloudZonesMsServerGroup =
      new alicloud.dataAlicloudZones.DataAlicloudZones(
        this,
        "ms_server_group",
        {
          availableDiskCategory: "cloud_efficiency",
          availableResourceCreation: "VSwitch",
        }
      );
    const alicloudSecurityGroupGroup = new alicloud.securityGroup.SecurityGroup(
      this,
      "group",
      {
        name: slbMasterSlaveServerGroup.stringValue,
        vpcId: cdktf.Token.asString(alicloudVpcMain.id),
      }
    );
    const alicloudVswitchMain = new alicloud.vswitch.Vswitch(this, "main_5", {
      cidrBlock: "172.16.0.0/16",
      vpcId: cdktf.Token.asString(alicloudVpcMain.id),
      vswitchName: slbMasterSlaveServerGroup.stringValue,
      zoneId: cdktf.Token.asString(
        cdktf.propertyAccess(dataAlicloudZonesMsServerGroup.zones, ["0", "id"])
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchMain.overrideLogicalId("main");
    const dataAlicloudInstanceTypesMsServerGroup =
      new alicloud.dataAlicloudInstanceTypes.DataAlicloudInstanceTypes(
        this,
        "ms_server_group_6",
        {
          availabilityZone: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudZonesMsServerGroup.zones, [
              "0",
              "id",
            ])
          ),
          eniAmount: 2,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudInstanceTypesMsServerGroup.overrideLogicalId("ms_server_group");
    const alicloudEcsNetworkInterfaceMsServerGroup =
      new alicloud.ecsNetworkInterface.EcsNetworkInterface(
        this,
        "ms_server_group_7",
        {
          networkInterfaceName: slbMasterSlaveServerGroup.stringValue,
          securityGroupIds: [
            cdktf.Token.asString(alicloudSecurityGroupGroup.id),
          ],
          vswitchId: cdktf.Token.asString(alicloudVswitchMain.id),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEcsNetworkInterfaceMsServerGroup.overrideLogicalId(
      "ms_server_group"
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudInstanceMsServerGroupCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber("2")
    );
    const alicloudInstanceMsServerGroup = new alicloud.instance.Instance(
      this,
      "ms_server_group_8",
      {
        availabilityZone: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudZonesMsServerGroup.zones, [
            "0",
            "id",
          ])
        ),
        imageId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudImagesImage.images, ["0", "id"])
        ),
        instanceChargeType: "PostPaid",
        instanceName: slbMasterSlaveServerGroup.stringValue,
        instanceType: cdktf.Token.asString(
          cdktf.propertyAccess(
            dataAlicloudInstanceTypesMsServerGroup.instanceTypes,
            ["0", "id"]
          )
        ),
        internetChargeType: "PayByTraffic",
        internetMaxBandwidthOut: cdktf.Token.asNumber("10"),
        securityGroups: [cdktf.Token.asString(alicloudSecurityGroupGroup.id)],
        systemDiskCategory: "cloud_efficiency",
        vswitchId: cdktf.Token.asString(alicloudVswitchMain.id),
        count: alicloudInstanceMsServerGroupCount,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudInstanceMsServerGroup.overrideLogicalId("ms_server_group");
    const alicloudSlbLoadBalancerMsServerGroup =
      new alicloud.slbLoadBalancer.SlbLoadBalancer(this, "ms_server_group_9", {
        loadBalancerName: slbMasterSlaveServerGroup.stringValue,
        loadBalancerSpec: "slb.s2.small",
        vswitchId: cdktf.Token.asString(alicloudVswitchMain.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSlbLoadBalancerMsServerGroup.overrideLogicalId("ms_server_group");
    const alicloudSlbMasterSlaveServerGroupGroup =
      new alicloud.slbMasterSlaveServerGroup.SlbMasterSlaveServerGroup(
        this,
        "group_10",
        {
          loadBalancerId: cdktf.Token.asString(
            alicloudSlbLoadBalancerMsServerGroup.id
          ),
          name: slbMasterSlaveServerGroup.stringValue,
          servers: [
            {
              port: 100,
              serverId: cdktf.Token.asString(
                cdktf.propertyAccess(alicloudInstanceMsServerGroup, ["0", "id"])
              ),
              serverType: "Master",
              weight: 100,
            },
            {
              port: 100,
              serverId: cdktf.Token.asString(
                cdktf.propertyAccess(alicloudInstanceMsServerGroup, ["1", "id"])
              ),
              serverType: "Slave",
              weight: 100,
            },
          ],
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSlbMasterSlaveServerGroupGroup.overrideLogicalId("group");
    const alicloudEcsNetworkInterfaceAttachmentMsServerGroup =
      new alicloud.ecsNetworkInterfaceAttachment.EcsNetworkInterfaceAttachment(
        this,
        "ms_server_group_11",
        {
          instanceId: cdktf.Token.asString(
            cdktf.propertyAccess(alicloudInstanceMsServerGroup, ["0", "id"])
          ),
          networkInterfaceId: cdktf.Token.asString(
            alicloudEcsNetworkInterfaceMsServerGroup.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEcsNetworkInterfaceAttachmentMsServerGroup.overrideLogicalId(
      "ms_server_group"
    );
    new alicloud.slbListener.SlbListener(this, "tcp", {
      bandwidth: cdktf.Token.asNumber("10"),
      establishedTimeout: 600,
      frontendPort: cdktf.Token.asNumber("22"),
      healthCheckConnectPort: 20,
      healthCheckHttpCode: "http_2xx",
      healthCheckInterval: 5,
      healthCheckTimeout: 8,
      healthCheckType: "tcp",
      healthCheckUri: "/console",
      healthyThreshold: 8,
      loadBalancerId: cdktf.Token.asString(
        alicloudSlbLoadBalancerMsServerGroup.id
      ),
      masterSlaveServerGroupId: cdktf.Token.asString(
        alicloudSlbMasterSlaveServerGroupGroup.id
      ),
      persistenceTimeout: 3600,
      protocol: "tcp",
      unhealthyThreshold: 8,
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `loadBalancerId` - (Required, ForceNew) The Load Balancer ID which is used to launch a new master slave server group.
* `name` - (Required, ForceNew) Name of the master slave server group. 
* `servers` - (Optional, ForceNew) A list of ECS instances to be added. Only two ECS instances can be supported in one resource. It contains six sub-fields as `Block server` follows.
* `deleteProtectionValidation` - (Optional, Available in 1.63.0+) Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.

## Block servers

The servers mapping supports the following:

* `serverIds` - (Required) A list backend server ID (ECS instance ID).
* `port` - (Required) The port used by the backend server. Valid value range: [1-65535].
* `weight` - (Optional) Weight of the backend server. Valid value range: [0-100]. Default to 100.
* `type` - (Optional, Available in 1.51.0+) Type of the backend server. Valid value ecs, eni. Default to eni.
* `serverType` - (Optional) The server type of the backend server. Valid value Master, Slave.
* `isBackup` - (Removed from v1.63.0) Determine if the server is executing. Valid value 0, 1. 

## Attributes Reference

The following attributes are exported:

* `id` - The ID of the master slave server group.

## Import

Load balancer master slave server group can be imported using the id, e.g.

```shell
$ terraform import alicloud_slb_master_slave_server_group.example abc123456
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-660deb5004dfa8f094408af17a6f7ede8c440d9528b8660e9ed2c7ea26adc2f2 -->