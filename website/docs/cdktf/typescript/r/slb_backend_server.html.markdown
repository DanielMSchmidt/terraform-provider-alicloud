---
subcategory: "Classic Load Balancer (SLB)"
layout: "alicloud"
page_title: "Alicloud: alicloud_slb_backend_server"
sidebar_current: "docs-alicloud-resource-slb-backend-server"
description: |-
  Provides an Application Load Balancer Backend Server resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_slb\_backend\_server

Add a group of backend servers (ECS or ENI instance) to the Server Load Balancer or remove them from it.

-> **NOTE:** Available in 1.53.0+

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const slbBackendServerName = new cdktf.TerraformVariable(
      this,
      "slb_backend_server_name",
      {
        default: "slbbackendservertest",
      }
    );
    const alicloudVpcBackendServer = new alicloud.vpc.Vpc(
      this,
      "backend_server",
      {
        cidrBlock: "172.16.0.0/16",
        vpcName: slbBackendServerName.stringValue,
      }
    );
    const dataAlicloudImagesBackendServer =
      new alicloud.dataAlicloudImages.DataAlicloudImages(
        this,
        "backend_server_2",
        {
          mostRecent: true,
          nameRegex: "^ubuntu_18.*64",
          owners: "system",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudImagesBackendServer.overrideLogicalId("backend_server");
    const dataAlicloudZonesBackendServer =
      new alicloud.dataAlicloudZones.DataAlicloudZones(
        this,
        "backend_server_3",
        {
          availableDiskCategory: "cloud_efficiency",
          availableResourceCreation: "VSwitch",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudZonesBackendServer.overrideLogicalId("backend_server");
    const alicloudSecurityGroupBackendServer =
      new alicloud.securityGroup.SecurityGroup(this, "backend_server_4", {
        name: slbBackendServerName.stringValue,
        vpcId: cdktf.Token.asString(alicloudVpcBackendServer.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSecurityGroupBackendServer.overrideLogicalId("backend_server");
    const alicloudVswitchBackendServer = new alicloud.vswitch.Vswitch(
      this,
      "backend_server_5",
      {
        cidrBlock: "172.16.0.0/16",
        vpcId: cdktf.Token.asString(alicloudVpcBackendServer.id),
        vswitchName: slbBackendServerName.stringValue,
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudZonesBackendServer.zones, [
            "0",
            "id",
          ])
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchBackendServer.overrideLogicalId("backend_server");
    const dataAlicloudInstanceTypesBackendServer =
      new alicloud.dataAlicloudInstanceTypes.DataAlicloudInstanceTypes(
        this,
        "backend_server_6",
        {
          availabilityZone: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudZonesBackendServer.zones, [
              "0",
              "id",
            ])
          ),
          cpuCoreCount: 1,
          memorySize: 2,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudInstanceTypesBackendServer.overrideLogicalId("backend_server");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudInstanceBackendServerCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber("2")
    );
    const alicloudInstanceBackendServer = new alicloud.instance.Instance(
      this,
      "backend_server_7",
      {
        availabilityZone: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudZonesBackendServer.zones, [
            "0",
            "id",
          ])
        ),
        imageId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudImagesBackendServer.images, [
            "0",
            "id",
          ])
        ),
        instanceChargeType: "PostPaid",
        instanceName: slbBackendServerName.stringValue,
        instanceType: cdktf.Token.asString(
          cdktf.propertyAccess(
            dataAlicloudInstanceTypesBackendServer.instanceTypes,
            ["0", "id"]
          )
        ),
        internetChargeType: "PayByTraffic",
        internetMaxBandwidthOut: cdktf.Token.asNumber("10"),
        securityGroups: cdktf.Token.asList(
          cdktf.propertyAccess(alicloudSecurityGroupBackendServer, ["*", "id"])
        ),
        systemDiskCategory: "cloud_efficiency",
        vswitchId: cdktf.Token.asString(alicloudVswitchBackendServer.id),
        count: alicloudInstanceBackendServerCount,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudInstanceBackendServer.overrideLogicalId("backend_server");
    const alicloudSlbLoadBalancerBackendServer =
      new alicloud.slbLoadBalancer.SlbLoadBalancer(this, "backend_server_8", {
        instanceChargeType: "PayByCLCU",
        loadBalancerName: slbBackendServerName.stringValue,
        vswitchId: cdktf.Token.asString(alicloudVswitchBackendServer.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSlbLoadBalancerBackendServer.overrideLogicalId("backend_server");
    const alicloudSlbBackendServerBackendServer =
      new alicloud.slbBackendServer.SlbBackendServer(this, "backend_server_9", {
        backendServers: [
          {
            serverId: cdktf.Token.asString(
              cdktf.propertyAccess(alicloudInstanceBackendServer, ["0", "id"])
            ),
            weight: 100,
          },
          {
            serverId: cdktf.Token.asString(
              cdktf.propertyAccess(alicloudInstanceBackendServer, ["1", "id"])
            ),
            weight: 100,
          },
        ],
        loadBalancerId: cdktf.Token.asString(
          alicloudSlbLoadBalancerBackendServer.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSlbBackendServerBackendServer.overrideLogicalId("backend_server");
  }
}

```

## Argument Reference

The following arguments are supported:

* `loadBalancerId` - (Required) ID of the load balancer.
* `backendServers` - (Optional) A list of instances to added backend server in the SLB. It contains three sub-fields as `Block server` follows.
* `deleteProtectionValidation` - (Optional, Available in 1.63.0+) Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.

## Block servers

The servers mapping supports the following:

* `serverId` - (Required) A list backend server ID (ECS instance ID).
* `weight` - (Optional) Weight of the backend server. Valid value range: [0-100]. 
* `type` - (Optional) Type of the backend server. Valid value `ecs`, `eni`, `eci`. Default to `ecs`. **NOTE:** From 1.170.0+, The `eci` is valid. 
* `serverIp` - (Optional, Computed, Available in 1.93.0+) ServerIp of the backend server. This parameter can be specified when the type is `eni`. `ecs` type currently does not support adding `serverIp` parameter.

## Attributes Reference

The following attributes are exported:

* `id` - The ID of the resource and the value same as load balancer id.

## Import

Load balancer backend server can be imported using the load balancer id.

```shell
$ terraform import alicloud_slb_backend_server.example <load_balancer_id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-5c277989b6b747e548b5e0f297fbbd4302222d041bdb43567244a37009496f1e -->