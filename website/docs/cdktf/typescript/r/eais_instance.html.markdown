---
subcategory: "Elastic Accelerated Computing Instances (EAIS)"
layout: "alicloud"
page_title: "Alicloud: alicloud_eais_instance"
sidebar_current: "docs-alicloud-resource-eais-instance"
description: |-
  Provides a Alicloud EAIS Instance resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_eais\_instance

Provides a EAIS Instance resource.

For information about EAIS Instance and how to use it, see [What is Instance](https://help.aliyun.com/document_detail/185066.html).

-> **NOTE:** Available in v1.137.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "%v",
    });
    const dataAlicloudVpcsDefault =
      new alicloud.dataAlicloudVpcs.DataAlicloudVpcs(this, "default", {
        cidrBlock: "172.16.0.0/12",
      });
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudVpcDefaultCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber(
        cdktf.conditional(
          cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVpcsDefault.ids), 0),
          0,
          1
        )
      )
    );
    const alicloudVpcDefault = new alicloud.vpc.Vpc(this, "default_2", {
      cidrBlock: "172.16.0.0/12",
      vpcName: name.stringValue,
      count: alicloudVpcDefaultCount,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVpcDefault.overrideLogicalId("default");
    const dataAlicloudVswitchesDefault =
      new alicloud.dataAlicloudVswitches.DataAlicloudVswitches(
        this,
        "default_3",
        {
          vpcId: cdktf.Token.asString(
            cdktf.conditional(
              cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVpcsDefault.ids), 0),
              cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"]),
              cdktf.propertyAccess(alicloudVpcDefault, ["0", "id"])
            )
          ),
          zoneId: "cn-hangzhou-h",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVswitchesDefault.overrideLogicalId("default");
    const alicloudSecurityGroupDefault =
      new alicloud.securityGroup.SecurityGroup(this, "default_4", {
        description: "tf test",
        name: name.stringValue,
        vpcId: cdktf.Token.asString(
          cdktf.conditional(
            cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVpcsDefault.ids), 0),
            cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"]),
            cdktf.propertyAccess(alicloudVpcDefault, ["0", "id"])
          )
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSecurityGroupDefault.overrideLogicalId("default");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudVswitchDefaultCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber(
        cdktf.conditional(
          cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault.ids), 0),
          0,
          1
        )
      )
    );
    const alicloudVswitchDefault = new alicloud.vswitch.Vswitch(
      this,
      "default_5",
      {
        cidrBlock: cdktf.Fn.cidrsubnet(
          cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.vpcs, [
              "0",
              "cidr_block",
            ])
          ),
          8,
          2
        ),
        vpcId: cdktf.Token.asString(
          cdktf.conditional(
            cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVpcsDefault.ids), 0),
            cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"]),
            cdktf.propertyAccess(alicloudVpcDefault, ["0", "id"])
          )
        ),
        vswitchName: name.stringValue,
        zoneId: "cn-hangzhou-h",
        count: alicloudVswitchDefaultCount,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchDefault.overrideLogicalId("default");
    const alicloudEaisInstanceDefault = new alicloud.eaisInstance.EaisInstance(
      this,
      "default_6",
      {
        instanceName: name.stringValue,
        instanceType: "eais.ei-a6.4xlarge",
        securityGroupId: cdktf.Token.asString(alicloudSecurityGroupDefault.id),
        vswitchId: cdktf.Token.asString(
          cdktf.conditional(
            cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault.ids), 0),
            cdktf.propertyAccess(dataAlicloudVswitchesDefault.ids, ["0"]),
            cdktf.propertyAccess(alicloudVswitchDefault, ["0", "id"])
          )
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEaisInstanceDefault.overrideLogicalId("default");
  }
}

```

## Argument Reference

The following arguments are supported:

* `force` - (Optional) Whether to force deletion when the instance status does not meet the deletion conditions. Valid values: `true` and `false`.
* `instanceName` - (Optional, ForceNew) The name of the instance.
* `instanceType` - (Required, ForceNew) The type of the resource. Valid values: `eaisEiA64Xlarge`, `eaisEiA62Xlarge`, `eaisEiA6Xlarge`, `eaisEiA6Large`, `eaisEiA6Medium`.
* `securityGroupId` - (Required) The ID of the security group.
* `vswitchId` - (Required) The ID of the vswitch.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of Instance.
* `status` - The status of the resource. Valid values: `attaching`, `available`, `detaching`, `inUse`, `starting`, `unavailable`.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 5 mins) Used when create the Instance.

## Import

EAIS Instance can be imported using the id, e.g.

```shell
$ terraform import alicloud_eais_instance.example <id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-19c430450b70e6fa26de40bf3f9eab65790528087e01942027c2ec3e543e1bcf -->