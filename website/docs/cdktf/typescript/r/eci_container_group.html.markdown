---
subcategory: "Elastic Container Instance (ECI)"
layout: "alicloud"
page_title: "Alicloud: alicloud_eci_container_group"
sidebar_current: "docs-alicloud-resource-eci-container-group"
description: |-
  Provides a Alicloud ECI Container Group resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_eci\_container\_group

Provides ECI Container Group resource.

For information about ECI Container Group and how to use it, see [What is Container Group](https://www.alibabacloud.com/help/en/doc-detail/90341.htm).

-> **NOTE:** Available in v1.111.0+.

## Example Usage

Basic Usage

```terraform
resource "alicloud_eci_container_group" "example" {
  container_group_name = "tf-testacc-eci-gruop"
  cpu                  = 8.0
  memory               = 16.0
  restart_policy       = "OnFailure"
  security_group_id    = alicloud_security_group.group.id
  vswitch_id           = data.alicloud_vpcs.default.vpcs.0.vswitch_ids.0
  tags = {
    TF = "create"
  }

  containers {
    image             = "registry-vpc.cn-beijing.aliyuncs.com/eci_open/nginx:alpine"
    name              = "nginx"
    working_dir       = "/tmp/nginx"
    image_pull_policy = "IfNotPresent"
    commands          = ["/bin/sh", "-c", "sleep 9999"]
    volume_mounts {
      mount_path = "/tmp/test"
      read_only  = false
      name       = "empty1"
    }
    ports {
      port     = 80
      protocol = "TCP"
    }
    environment_vars {
      key   = "test"
      value = "nginx"
    }
    liveness_probe {
      period_seconds        = "5"
      initial_delay_seconds = "5"
      success_threshold     = "1"
      failure_threshold     = "3"
      timeout_seconds       = "1"
      exec {
        commands = ["cat /tmp/healthy"]
      }
    }
    readiness_probe {
      period_seconds        = "5"
      initial_delay_seconds = "5"
      success_threshold     = "1"
      failure_threshold     = "3"
      timeout_seconds       = "1"
      exec {
        commands = ["cat /tmp/healthy"]
      }
    }
  }
  containers {
    image    = "registry-vpc.cn-beijing.aliyuncs.com/eci_open/centos:7"
    name     = "centos"
    commands = ["/bin/sh", "-c", "sleep 9999"]
  }
  init_containers {
    name              = "init-busybox"
    image             = "registry-vpc.cn-beijing.aliyuncs.com/eci_open/busybox:1.30"
    image_pull_policy = "IfNotPresent"
    commands          = ["echo"]
    args              = ["hello initcontainer"]
  }
  volumes {
    name = "empty1"
    type = "EmptyDirVolume"
  }
  volumes {
    name = "empty2"
    type = "EmptyDirVolume"
  }
}
```

## Argument Reference

The following arguments are supported:

* `containerGroupName` - (Required, ForceNew) The name of the container group.
* `containers` - (Required) The list of containers.
* `cpu` - (Optional, Computed) The amount of CPU resources allocated to the container group.
* `dnsConfig` - (Optional) The structure of dnsConfig.
* `eciSecurityContext` - (Optional) The security context of the container group.
* `hostAliases` - (Optional, ForceNew) HostAliases.
* `initContainers` - (Optional) The list of initContainers.
* `instanceType` - (Optional, ForceNew) The type of the ECS instance.
* `memory` - (Optional, Computed) The amount of memory resources allocated to the container group.
* `ramRoleName` - (Optional, ForceNew) The RAM role that the container group assumes. ECI and ECS share the same RAM role.
* `resourceGroupId` - (Optional, Computed, ForceNew) The ID of the resource group.
* `restartPolicy` - (Optional, Computed) The restart policy of the container group. Valid values: `always`, `never`, `onFailure`.
* `securityGroupId` - (Required, ForceNew) The ID of the security group to which the container group belongs. Container groups within the same security group can access each other.
* `volumes` - (Optional) The list of volumes.
* `vswitchId` - (Required, ForceNew) The ID of the VSwitch. Currently, container groups can only be deployed in VPC networks. The number of IP addresses in the VSwitch CIDR block determines the maximum number of container groups that can be created in the VSwitch. Before you can create an ECI instance, plan the CIDR block of the VSwitch.
* `zoneId` - (Optional, Computed, ForceNew) The ID of the zone where you want to deploy the container group. If no value is specified, the system assigns a zone to the container group. By default, no value is specified.
* `imageRegistryCredential` - (Optional, Available in 1.141.0+) The image registry credential. The details see Block `imageRegistryCredential`.
* `autoMatchImageCache` - (Optional, Available in 1.166.0+) Specifies whether to automatically match the image cache. Default value: false.
* `insecureRegistry` - (Optional, Available in 1.170.0+) The address of the self-built mirror warehouse. When creating an image cache using an image in a self-built image repository with a self-signed certificate, you need to configure this parameter to skip certificate authentication to avoid image pull failure due to certificate authentication failure.
* `plainHttpRegistry` - (Optional, Available in 1.170.0+) The address of the self-built mirror warehouse. When creating an image cache from an image in a self-built image repository using the HTTP protocol, you need to configure this parameter so that the ECI uses the HTTP protocol to pull the image to avoid image pull failure due to different protocols.
* `autoCreateEip` - (Optional, Available in 1.170.0+) Specifies whether to automatically create an EIP and bind the EIP to the elastic container instance.
* `eipBandwidth` - (Optional, Available in 1.170.0+) The bandwidth of the EIP. The default value is `5`.
* `eipInstanceId` - (Optional, Available in 1.170.0+) The ID of the elastic IP address (EIP).
* `tags` - (Optional) A mapping of tags to assign to the resource.
  - Key: It can be up to 64 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It cannot be a null string.
  - Value: It can be up to 128 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It can be a null string.
* `acrRegistryInfo` - (Optional, ForceNew, Available in 1.189.0+) The ACR enterprise edition example properties.

#### Block volumes

The volumes supports the following: 
* `name` - (Optional) The name of the volume.
* `type` - (Optional) The type of the volume.
* `configFileVolumeConfigFileToPaths` - (Optional) ConfigFileVolumeConfigFileToPaths.

* `diskVolumeDiskId` - (Optional, ForceNew) The ID of DiskVolume.
* `diskVolumeFsType` - (Optional, ForceNew) The system type of DiskVolume.

* `flexVolumeDriver` - (Optional, ForceNew) The name of the FlexVolume driver.
* `flexVolumeFsType` - (Optional, ForceNew) The type of the mounted file system. The default value is determined by the script of FlexVolume.
* `flexVolumeOptions` - (Optional, ForceNew) The list of FlexVolume objects. Each object is a key-value pair contained in a JSON string.

* `nfsVolumePath` - (Optional) The path to the NFS volume.
* `nfsVolumeReadOnly` - (Optional) The nfs volume read only. Default to `false`.
* `nfsVolumeServer` - (Optional) The address of the NFS server.

-> **NOTE:** Every volumes mounted must have name and type attributes.

#### Block config_file_volume_config_file_to_paths

The config_file_volume_config_file_to_paths supports the following: 

* `content` - (Optional) The content of the configuration file. Maximum size: 32 KB.
* `path` - (Optional) The relative file path.

#### Block init_containers

The init_containers supports the following: 

* `args` - (Optional) The arguments passed to the commands.
* `commands` - (Optional) The commands run by the init container.
* `cpu` - (Optional) The amount of CPU resources allocated to the container.
* `environmentVars` - (Optional) The structure of environmentVars.
* `gpu` - (Optional) The number GPUs.
* `image` - (Optional) The image of the container.
* `imagePullPolicy` - (Optional) The restart policy of the image.
* `memory` - (Optional) The amount of memory resources allocated to the container.
* `name` - (Optional) The name of the init container.
* `ports` - (Optional, ForceNew) The structure of port.
* `volumeMounts` - (Optional) The structure of volumeMounts.
* `workingDir` - (Optional) The working directory of the container.

#### Block volume_mounts in init_containers

The volume_mounts supports the following: 

* `mountPath` - (Optional) The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
* `name` - (Optional) The name of the mounted volume.
* `readOnly` - (Optional) Default to `false`.

#### Block ports in init_containers

The ports supports the following: 

* `port` - (Optional, ForceNew) The port number. Valid values: 1 to 65535.
* `protocol` - (Optional, ForceNew) Valid values: TCP and UDP.

#### Block environment_vars in init_containers

The environment_vars supports the following: 

* `key` - (Optional) The name of the variable. The name can be 1 to 128 characters in length and can contain letters, digits, and underscores (_). It cannot start with a digit.
* `value` - (Optional) The value of the variable. The value can be 0 to 256 characters in length.

#### Block host_aliases

The host_aliases supports the following: 

* `hostnames` - (Optional, ForceNew) Adds a host name.
* `ip` - (Optional, ForceNew) Adds an IP address.

#### Block image_registry_credential
The image_registry_credential supports the following:
* `password` - (Optional) The password used to log on to the image repository. It is required when `imageRegistryCredential` is configured.
* `server` - (Optional) The address of the image repository. It is required when `imageRegistryCredential` is configured.
* `userName` - (Optional) The username used to log on to the image repository. It is required when `imageRegistryCredential` is configured.

#### Block dns_config

The dns_config supports the following: 

* `nameServers` - (Optional) The list of DNS server IP addresses.
* `options` - (Optional) The structure of options.
* `searches` - (Optional) The list of DNS lookup domains.

#### Block options

The options supports the following: 

* `name` - (Optional) The name of the object.
* `value` - (Optional) The value of the object.

#### Block containers

The containers supports the following: 

* `args` - (Optional) The arguments passed to the commands.
* `commands` - (Optional) The commands run by the init container.
* `cpu` - (Optional) The amount of CPU resources allocated to the container.
* `environmentVars` - (Optional) The structure of environmentVars.
* `gpu` - (Optional) The number GPUs.
* `image` - (Required) The image of the container.
* `imagePullPolicy` - (Optional) The restart policy of the image.
* `memory` - (Optional) The amount of memory resources allocated to the container.
* `name` - (Required) The name of the init container.
* `ports` - (Optional, ForceNew) The structure of port.
* `volumeMounts` - (Optional) The structure of volumeMounts.
* `workingDir` - (Optional) The working directory of the container.
* `livenessProbe` - (Optional, Available in 1.189.0+) The health check of the container.
* `readinessProbe` - (Optional, Available in 1.189.0+) The health check of the container.

#### Block liveness_probe

The liveness_probe supports the following:

* `periodSeconds` - (Optional) Buffer time for the program to handle operations before closing.
* `initialDelaySeconds` - (Optional) Check the time to start execution, calculated from the completion of container startup.
* `successThreshold` - (Optional) The check count threshold for re-identifying successful checks since the last failed check (must be consecutive successes), default is 1. Current must be 1.
* `failureThreshold` - (Optional) Threshold for the number of checks that are determined to have failed since the last successful check (must be consecutive failures), default is 3.
* `timeoutSeconds` - (Optional) Check the timeout, the default is 1 second, the minimum is 1 second.
* `tcpSocket` - (Optional) Health check using TCP socket method.
* `exec` - (Optional) Health check using command line method.
* `httpGet` - (Optional) Health check using HTTP request method.

#### Block liveness_probe http_get

The liveness_probe http_get supports the following:

* `scheme` - (Optional) The protocol type corresponding to the HTTP Get request when using the HTTP request method for health checks. Valid values: `http`, `https`.
* `port` - (Optional) When using the HTTP request method for health check, the port number for HTTP Get request detection.
* `path` - (Optional) The path of HTTP Get request detection when setting the postStart callback function using the HTTP request method.

#### Block liveness_probe tcp_socket

The liveness_probe tcp_socket supports the following:

* `port` - (Optional) The port for TCP socket detection when using the TCP socket method for health check.

#### Block liveness_probe exec

The liveness_probe exec supports the following:

* `commands` - (Optional) Commands to be executed inside the container when performing health checks using the command line method.


#### Block readiness_probe

The readiness_probe supports the following:

* `periodSeconds` - (Optional) Buffer time for the program to handle operations before closing.
* `initialDelaySeconds` - (Optional) Check the time to start execution, calculated from the completion of container startup.
* `successThreshold` - (Optional) The check count threshold for re-identifying successful checks since the last failed check (must be consecutive successes), default is 1. Current must be 1.
* `failureThreshold` - (Optional) Threshold for the number of checks that are determined to have failed since the last successful check (must be consecutive failures), default is 3.
* `timeoutSeconds` - (Optional) Check the timeout, the default is 1 second, the minimum is 1 second.
* `tcpSocket` - (Optional) Health check using TCP socket method.
* `exec` - (Optional) Health check using command line method.
* `httpGet` - (Optional) Health check using HTTP request method.

#### Block readiness_probe http_get

The readiness_probe http_get supports the following:

* `scheme` - (Optional) The protocol type corresponding to the HTTP Get request when using the HTTP request method for health checks. Valid values: `http`, `https`.
* `port` - (Optional) When using the HTTP request method for health check, the port number for HTTP Get request detection.
* `path` - (Optional) The path of HTTP Get request detection when setting the postStart callback function using the HTTP request method.

#### Block readiness_probe tcp_socket

The readiness_probe tcp_socket supports the following:

* `port` - (Optional) The port for TCP socket detection when using the TCP socket method for health check.

#### Block readiness_probe exec

The readiness_probe exec supports the following:

* `commands` - (Optional) Commands to be executed inside the container when performing health checks using the command line method.

#### Block volume_mounts

The volume_mounts supports the following: 

* `mountPath` - (Optional) The directory of the mounted volume. Data under this directory will be overwritten by the data in the volume.
* `name` - (Optional) The name of the mounted volume.
* `readOnly` - (Optional) Default to `false`.

#### Block ports

The ports supports the following: 

* `port` - (Optional, ForceNew) The port number. Valid values: 1 to 65535.
* `protocol` - (Optional, ForceNew) Valid values: TCP and UDP.

#### Block environment_vars

The environment_vars supports the following: 

* `key` - (Optional) The name of the variable. The name can be 1 to 128 characters in length and can contain letters, digits, and underscores (_). It cannot start with a digit.
* `value` - (Optional) The value of the variable. The value can be 0 to 256 characters in length.

#### Block eci_security_context

The eci_security_context supports the following:
* `sysctls` - (Optional) system.

#### Block sysctls

The sysctls supports the following:

* `name` - (Optional, ForceNew) The name of the security context that the container group runs.
* `value` - (Optional, ForceNew) The variable value of the security context that the container group runs.

#### Block acr_registry_info

The acr_registry_info supports the following:

* `domains` - (Optional) The domain name of the ACR Enterprise Edition instance. Defaults to all domain names of the corresponding instance. Support specifying individual domain names, multiple separated by half comma.
* `instanceId` - (Optional) The ACR enterprise edition example ID.
* `regionId` - (Optional) The ACR enterprise edition instance belongs to the region.
* `instanceName` - (Optional) The name of the ACR enterprise edition instance.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of Container Group. Value as `containerGroupId`.
* `status` - The status of container group.
* `internetIp` - (Available in v1.170.0+) The Public IP of the container group.
* `intranetIp` - (Available in v1.170.0+) The Private IP of the container group.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 20 mins) Used when create the Container Group.
* `update` - (Defaults to 20 mins) Used when update the Container Group.

## Import

ECI Container Group can be imported using the id, e.g.

```shell
$ terraform import alicloud_eci_container_group.example <container_group_id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-047504d431b306aea1f292fd5b79f81aa437c6e2f723bb4ceccc6377ca20abef -->