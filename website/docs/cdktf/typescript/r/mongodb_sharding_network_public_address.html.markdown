---
subcategory: "MongoDB"
layout: "alicloud"
page_title: "Alicloud: alicloud_mongodb_sharding_network_public_address"
sidebar_current: "docs-alicloud-resource-mongodb-sharding-network-public-address"
description: |-
  Provides a Alicloud MongoDB Sharding Network Public Address resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_mongodb\_sharding\_network\_public\_address

Provides a MongoDB Sharding Network Public Address resource.

For information about MongoDB Sharding Network Public Address and how to use it, see [What is Sharding Network Public Address](https://www.alibabacloud.com/help/doc-detail/67602.html).

-> **NOTE:** Available in v1.149.0+.

-> **NOTE:** This operation supports sharded cluster instances only.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "tf-example",
    });
    const dataAlicloudMongodbZonesDefault =
      new alicloud.dataAlicloudMongodbZones.DataAlicloudMongodbZones(
        this,
        "default",
        {}
      );
    const dataAlicloudVpcsDefault =
      new alicloud.dataAlicloudVpcs.DataAlicloudVpcs(this, "default_2", {
        nameRegex: "default-NODELETING",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVpcsDefault.overrideLogicalId("default");
    const dataAlicloudVswitchesDefault =
      new alicloud.dataAlicloudVswitches.DataAlicloudVswitches(
        this,
        "default_3",
        {
          vpcId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
          ),
          zoneId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudMongodbZonesDefault.zones, [
              "0",
              "id",
            ])
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVswitchesDefault.overrideLogicalId("default");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudVswitchVswitchCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber(
        cdktf.conditional(
          cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault.ids), 0),
          0,
          1
        )
      )
    );
    const alicloudVswitchVswitch = new alicloud.vswitch.Vswitch(
      this,
      "vswitch",
      {
        cidrBlock: cdktf.Fn.cidrsubnet(
          cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.vpcs, [
              "0",
              "cidr_block",
            ])
          ),
          8,
          8
        ),
        vpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
        ),
        vswitchName: "subnet-for-local-test",
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudMongodbZonesDefault.zones, [
            "0",
            "id",
          ])
        ),
        count: alicloudVswitchVswitchCount,
      }
    );
    const alicloudMongodbShardingInstanceDefault =
      new alicloud.mongodbShardingInstance.MongodbShardingInstance(
        this,
        "default_5",
        {
          engineVersion: "4.2",
          mongoList: [
            {
              nodeClass: "dds.mongos.mid",
            },
            {
              nodeClass: "dds.mongos.mid",
            },
          ],
          name: name.stringValue,
          shardList: [
            {
              nodeClass: "dds.shard.mid",
              nodeStorage: 10,
            },
            {
              nodeClass: "dds.shard.mid",
              nodeStorage: 10,
            },
          ],
          vswitchId: cdktf.Token.asString(
            cdktf.conditional(
              cdktf.Op.gt(
                cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault.ids),
                0
              ),
              cdktf.propertyAccess(dataAlicloudVswitchesDefault.ids, ["0"]),
              cdktf.propertyAccess(
                cdktf.Fn.concat([
                  cdktf.propertyAccess(alicloudVswitchVswitch, ["*", "id"]),
                  [""],
                ]),
                ["0"]
              )
            )
          ),
          zoneId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudMongodbZonesDefault.zones, [
              "0",
              "id",
            ])
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudMongodbShardingInstanceDefault.overrideLogicalId("default");
    new alicloud.mongodbShardingNetworkPublicAddress.MongodbShardingNetworkPublicAddress(
      this,
      "example",
      {
        dbInstanceId: cdktf.Token.asString(
          alicloudMongodbShardingInstanceDefault.id
        ),
        nodeId: cdktf.Token.asString(
          cdktf.propertyAccess(
            alicloudMongodbShardingInstanceDefault.mongoList,
            ["0", "node_id"]
          )
        ),
      }
    );
  }
}

```

## Argument Reference

The following arguments are supported:

* `dbInstanceId` - (Required, ForceNew) The ID of the instance.
* `nodeId` - (Required, ForceNew) The ID of the `mongos`, `shard`, or `configserver` node in the sharded cluster instance.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID of Sharding Network Public Address. The value formats as `<db_instance_id>:<node_id>`.
* `networkAddress` - An array that consists of the endpoints of ApsaraDB for MongoDB instances.
  * `networkType` - The network type.
  * `networkAddress` - The endpoint of the instance.
  * `nodeType` - The type of the node.
  * `port` - The port number.
  * `role` - The role of the node.
  * `vpcId` - The ID of the VPC.
  * `expiredTime` - The remaining duration of the classic network address. Unit: `seconds`.
  * `ipAddress` - The IP address of the instance.
  * `vswitchId` - The vSwitch ID of the VPC.
  * `nodeId` - The ID of the `mongos`, `shard`, or `configserver` node in the sharded cluster instance.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 5 mins) Used when creating the MongoDB Sharding Network Public Address.
* `delete` - (Defaults to 5 mins) Used when terminating the MongoDB Sharding Network Public Address.

## Import

MongoDB Sharding Network Public Address can be imported using the id, e.g.

```shell
$ terraform import alicloud_mongodb_sharding_network_public_address.example <db_instance_id>:<node_id>
```
<!-- cache-key: cdktf-0.17.0-pre.15 input-ca5f32951246788e6dcf6225f8902f9a0c4dad4a0e84c9d963c1beebe91df086 -->