---
subcategory: "Data Transmission Service (DTS)"
layout: "alicloud"
page_title: "Alicloud: alicloud_dts_consumer_channel"
sidebar_current: "docs-alicloud-resource-dts-consumer-channel"
description: |-
  Provides a Alicloud DTS Consumer Channel resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_dts\_consumer\_channel

Provides a DTS Consumer Channel resource.

For information about DTS Consumer Channel and how to use it, see [What is Consumer Channel](https://www.alibabacloud.com/help/en/doc-detail/264593.htm).

-> **NOTE:** Available in v1.146.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const creation = new cdktf.TerraformVariable(this, "creation", {
      default: "Rds",
    });
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "tftestdts",
    });
    const dataAlicloudVpcsDefault =
      new alicloud.dataAlicloudVpcs.DataAlicloudVpcs(this, "default", {
        nameRegex: "default-NODELETING",
      });
    const dataAlicloudZonesDefault =
      new alicloud.dataAlicloudZones.DataAlicloudZones(this, "default_3", {
        availableResourceCreation: creation.stringValue,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudZonesDefault.overrideLogicalId("default");
    const dataAlicloudVswitchesDefault =
      new alicloud.dataAlicloudVswitches.DataAlicloudVswitches(
        this,
        "default_4",
        {
          vpcId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
          ),
          zoneId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVswitchesDefault.overrideLogicalId("default");
    const alicloudDbInstanceInstance = new alicloud.dbInstance.DbInstance(
      this,
      "instance",
      {
        engine: "MySQL",
        engineVersion: "5.6",
        instanceName: name.stringValue,
        instanceStorage: cdktf.Token.asNumber("10"),
        instanceType: "rds.mysql.s1.small",
        vswitchId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVswitchesDefault.ids, ["0"])
        ),
      }
    );
    const alicloudDtsSubscriptionJobDefault =
      new alicloud.dtsSubscriptionJob.DtsSubscriptionJob(this, "default_6", {
        dbList:
          '        {"dtstestdata": {"name": "tfaccountpri_0", "all": true}}\n',
        dtsJobName: name.stringValue,
        paymentType: "PayAsYouGo",
        sourceEndpointDatabaseName: "tfaccountpri_0",
        sourceEndpointEngineName: "MySQL",
        sourceEndpointInstanceId: cdktf.Token.asString(
          alicloudDbInstanceInstance.id
        ),
        sourceEndpointInstanceType: "RDS",
        sourceEndpointPassword: "Test12345",
        sourceEndpointRegion: "cn-hangzhou",
        sourceEndpointUserName: "tftestprivilege",
        status: "Normal",
        subscriptionInstanceNetworkType: "vpc",
        subscriptionInstanceVpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
        ),
        subscriptionInstanceVswitchId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVswitchesDefault.ids, ["0"])
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudDtsSubscriptionJobDefault.overrideLogicalId("default");
    const alicloudDbAccountAccount = new alicloud.dbAccount.DbAccount(
      this,
      "account",
      {
        accountDescription: "from terraform",
        accountName: "tftestprivilege",
        accountPassword: "Test12345",
        dbInstanceId: cdktf.Token.asString(alicloudDbInstanceInstance.id),
      }
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudDbDatabaseDbCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber("2")
    );
    const alicloudDbDatabaseDb = new alicloud.dbDatabase.DbDatabase(
      this,
      "db",
      {
        description: "from terraform",
        instanceId: cdktf.Token.asString(alicloudDbInstanceInstance.id),
        name: "tfaccountpri_${" + alicloudDbDatabaseDbCount.index + "}",
        count: alicloudDbDatabaseDbCount,
      }
    );
    const alicloudDtsConsumerChannelDefault =
      new alicloud.dtsConsumerChannel.DtsConsumerChannel(this, "default_9", {
        consumerGroupName: name.stringValue,
        consumerGroupPassword: "tftestAcc123",
        consumerGroupUserName: name.stringValue,
        dtsInstanceId: cdktf.Token.asString(
          alicloudDtsSubscriptionJobDefault.dtsInstanceId
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudDtsConsumerChannelDefault.overrideLogicalId("default");
    new alicloud.dbAccountPrivilege.DbAccountPrivilege(this, "privilege", {
      accountName: cdktf.Token.asString(alicloudDbAccountAccount.name),
      dbNames: cdktf.Token.asList(
        cdktf.propertyAccess(alicloudDbDatabaseDb, ["*", "name"])
      ),
      instanceId: cdktf.Token.asString(alicloudDbInstanceInstance.id),
      privilege: "ReadWrite",
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `consumerGroupName` - (Required, ForceNew) The name of the consumer group.
* `consumerGroupPassword` - (Required) The password of the consumer group account. The length of the `consumerGroupPassword` is limited to `8` to `32` characters. It can contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
* `consumerGroupUserName` - (Required, ForceNew) The username of the consumer group. The length of the `consumerGroupUserName` is limited to `1` to `16` characters. It can contain one or more of the following characters: uppercase letters, lowercase letters, digits, and underscores (_).
* `dtsInstanceId` - (Required) The ID of the subscription instance.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID of Consumer Channel. The value formats as `<dts_instance_id>:<consumer_group_id>`.
* `consumerGroupId` - The ID of the consumer group.

## Import

DTS Consumer Channel can be imported using the id, e.g.

```shell
$ terraform import alicloud_dts_consumer_channel.example <dts_instance_id>:<consumer_group_id>
```
<!-- cache-key: cdktf-0.17.0-pre.15 input-e5b99459153e757497f9d9c489d066db29dbcc87af9776dc9ea635dfcbca542c -->