---
subcategory: "NAT Gateway"
layout: "alicloud"
page_title: "Alicloud: alicloud_snat_entry"
sidebar_current: "docs-alicloud-resource-vpc"
description: |-
  Provides a Alicloud snat resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_snat\_entry

Provides a snat resource.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "snat-entry-example-name",
    });
    const alicloudCommonBandwidthPackageDefault =
      new alicloud.commonBandwidthPackage.CommonBandwidthPackage(
        this,
        "default",
        {
          bandwidth: cdktf.Token.asString(10),
          internetChargeType: "PayByTraffic",
          name: "tf_cbp",
          ratio: 100,
        }
      );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudEipAddressDefaultCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber("2")
    );
    const alicloudEipAddressDefault = new alicloud.eipAddress.EipAddress(
      this,
      "default_2",
      {
        addressName: name.stringValue,
        count: alicloudEipAddressDefaultCount,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEipAddressDefault.overrideLogicalId("default");
    const alicloudVpcVpc = new alicloud.vpc.Vpc(this, "vpc", {
      cidrBlock: "172.16.0.0/12",
      vpcName: name.stringValue,
    });
    const dataAlicloudZonesDefault =
      new alicloud.dataAlicloudZones.DataAlicloudZones(this, "default_4", {
        availableResourceCreation: "VSwitch",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudZonesDefault.overrideLogicalId("default");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudCommonBandwidthPackageAttachmentDefaultCount =
      cdktf.TerraformCount.of(cdktf.Token.asNumber("2"));
    const alicloudCommonBandwidthPackageAttachmentDefault =
      new alicloud.commonBandwidthPackageAttachment.CommonBandwidthPackageAttachment(
        this,
        "default_5",
        {
          bandwidthPackageId: cdktf.Token.asString(
            alicloudCommonBandwidthPackageDefault.id
          ),
          instanceId: cdktf.Token.asString(
            cdktf.Fn.element(
              cdktf.propertyAccess(alicloudEipAddressDefault, ["*", "id"]),
              cdktf.Token.asNumber(
                alicloudCommonBandwidthPackageAttachmentDefaultCount.index
              )
            )
          ),
          count: alicloudCommonBandwidthPackageAttachmentDefaultCount,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudCommonBandwidthPackageAttachmentDefault.overrideLogicalId(
      "default"
    );
    const alicloudVswitchVswitch = new alicloud.vswitch.Vswitch(
      this,
      "vswitch",
      {
        cidrBlock: "172.16.0.0/21",
        name: name.stringValue,
        vpcId: cdktf.Token.asString(alicloudVpcVpc.id),
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
        ),
      }
    );
    const alicloudNatGatewayDefault = new alicloud.natGateway.NatGateway(
      this,
      "default_7",
      {
        name: name.stringValue,
        specification: "Small",
        vpcId: cdktf.Token.asString(alicloudVswitchVswitch.vpcId),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudNatGatewayDefault.overrideLogicalId("default");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudEipAssociationDefaultCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber("2")
    );
    const alicloudEipAssociationDefault =
      new alicloud.eipAssociation.EipAssociation(this, "default_8", {
        allocationId: cdktf.Token.asString(
          cdktf.Fn.element(
            cdktf.propertyAccess(alicloudEipAddressDefault, ["*", "id"]),
            cdktf.Token.asNumber(alicloudEipAssociationDefaultCount.index)
          )
        ),
        instanceId: cdktf.Token.asString(alicloudNatGatewayDefault.id),
        count: alicloudEipAssociationDefaultCount,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEipAssociationDefault.overrideLogicalId("default");
    const alicloudSnatEntryDefault = new alicloud.snatEntry.SnatEntry(
      this,
      "default_9",
      {
        dependsOn: [alicloudEipAssociationDefault],
        snatIp: cdktf.Fn.join(
          ",",
          cdktf.Token.asList(
            cdktf.propertyAccess(alicloudEipAddressDefault, ["*", "ip_address"])
          )
        ),
        snatTableId: cdktf.Token.asString(
          alicloudNatGatewayDefault.snatTableIds
        ),
        sourceVswitchId: cdktf.Token.asString(alicloudVswitchVswitch.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSnatEntryDefault.overrideLogicalId("default");
  }
}

```

## Argument Reference

The following arguments are supported:

* `snatTableId` - (Required, ForceNew) The value can get from `alicloudNatGateway` Attributes "snat_table_ids".
* `sourceVswitchId` - (Optional, ForceNew, Computed) The vswitch ID.
* `sourceCidr` - (Optional, ForceNew, Available in 1.71.1+, Computed) The private network segment of Ecs. This parameter and the `sourceVswitchId` parameter are mutually exclusive and cannot appear at the same time.
* `snatEntryName` - (Optional, Available in 1.71.2+) The name of snat entry.
* `snatIp` - (Required, ForceNew) The SNAT ip address, the ip must along bandwidth package public ip which `alicloudNatGateway` argument `bandwidthPackages`.

## Attributes Reference

The following attributes are exported:

* `id` - The ID of the snat entry. The value formats as `<snat_table_id>:<snat_entry_id>`
* `snatEntryId` - The id of the snat entry on the server.
* `status` - (Available in 1.119.1+) The status of snat entry.

### Timeouts

-> **NOTE:** Available in 1.119.1+.

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 2 mins) Used when create the snat.
* `update` - (Defaults to 2 mins) Used when update the snat.
* `delete` - (Defaults to 2 mins) Used when delete the snat.

## Import

Snat Entry can be imported using the id, e.g.

```shell
$ terraform import alicloud_snat_entry.foo stb-1aece3:snat-232ce2
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-a63c4a86d82cef39a72840082cadd5b1b79cc996edbb1d93a4e4a74d7b68a14d -->