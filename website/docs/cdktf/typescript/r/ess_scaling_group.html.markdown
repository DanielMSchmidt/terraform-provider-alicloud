---
subcategory: "Auto Scaling"
layout: "alicloud"
page_title: "Alicloud: alicloud_ess_scaling_group"
sidebar_current: "docs-alicloud-resource-ess-scaling-group"
description: |-
  Provides a ESS scaling group resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_ess\_scaling\_group

Provides a ESS scaling group resource which is a collection of ECS instances with the same application scenarios.

It defines the maximum and minimum numbers of ECS instances in the group, and their associated Server Load Balancer instances, RDS instances, and other attributes.

-> **NOTE:** You can launch an ESS scaling group for a VPC network via specifying parameter `vswitchIds`.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "essscalinggroupconfig",
    });
    const alicloudVpcDefault = new alicloud.vpc.Vpc(this, "default", {
      cidrBlock: "172.16.0.0/16",
      vpcName: name.stringValue,
    });
    const dataAlicloudImagesDefault =
      new alicloud.dataAlicloudImages.DataAlicloudImages(this, "default_2", {
        mostRecent: true,
        nameRegex: "^ubuntu_18.*64",
        owners: "system",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudImagesDefault.overrideLogicalId("default");
    const dataAlicloudZonesDefault =
      new alicloud.dataAlicloudZones.DataAlicloudZones(this, "default_3", {
        availableDiskCategory: "cloud_efficiency",
        availableResourceCreation: "VSwitch",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudZonesDefault.overrideLogicalId("default");
    const alicloudSecurityGroupDefault =
      new alicloud.securityGroup.SecurityGroup(this, "default_4", {
        name: name.stringValue,
        vpcId: cdktf.Token.asString(alicloudVpcDefault.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSecurityGroupDefault.overrideLogicalId("default");
    const alicloudSecurityGroupRuleDefault =
      new alicloud.securityGroupRule.SecurityGroupRule(this, "default_5", {
        cidrIp: "172.16.0.0/24",
        ipProtocol: "tcp",
        nicType: "intranet",
        policy: "accept",
        portRange: "22/22",
        priority: 1,
        securityGroupId: cdktf.Token.asString(alicloudSecurityGroupDefault.id),
        type: "ingress",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSecurityGroupRuleDefault.overrideLogicalId("default");
    const alicloudVswitchDefault = new alicloud.vswitch.Vswitch(
      this,
      "default_6",
      {
        cidrBlock: "172.16.0.0/24",
        vpcId: cdktf.Token.asString(alicloudVpcDefault.id),
        vswitchName: name.stringValue,
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchDefault.overrideLogicalId("default");
    const alicloudVswitchDefault2 = new alicloud.vswitch.Vswitch(
      this,
      "default2",
      {
        cidrBlock: "172.16.1.0/24",
        vpcId: cdktf.Token.asString(alicloudVpcDefault.id),
        vswitchName: "${" + name.value + "}-bar",
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
        ),
      }
    );
    const dataAlicloudInstanceTypesDefault =
      new alicloud.dataAlicloudInstanceTypes.DataAlicloudInstanceTypes(
        this,
        "default_8",
        {
          availabilityZone: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
          ),
          cpuCoreCount: 2,
          memorySize: 4,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudInstanceTypesDefault.overrideLogicalId("default");
    const alicloudEssScalingGroupDefault =
      new alicloud.essScalingGroup.EssScalingGroup(this, "default_9", {
        defaultCooldown: 20,
        maxSize: 1,
        minSize: 1,
        removalPolicies: ["OldestInstance", "NewestInstance"],
        scalingGroupName: name.stringValue,
        vswitchIds: [
          cdktf.Token.asString(alicloudVswitchDefault.id),
          cdktf.Token.asString(alicloudVswitchDefault2.id),
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEssScalingGroupDefault.overrideLogicalId("default");
  }
}

```

## Module Support

You can use to the existing [autoscaling module](https://registry.terraform.io/modules/terraform-alicloud-modules/autoscaling/alicloud) 
to create a scaling group, configuration and lifecycle hook one-click.

## Argument Reference

The following arguments are supported:

* `minSize` - (Required) Minimum number of ECS instances in the scaling group. Value range: [0, 2000].
  **NOTE:** From version 1.204.1, `minSize` can be set to `2000`.
* `maxSize` - (Required) Maximum number of ECS instances in the scaling group. Value range: [0, 2000].
  **NOTE:** From version 1.204.1, `maxSize` can be set to `2000`.
* `desiredCapacity` - (Optional,Available in 1.76.0+) Expected number of ECS instances in the scaling group. Value range: [min_size, max_size].
* `scalingGroupName` - (Optional) Name shown for the scaling group, which must contain 2-64 characters (English or Chinese), starting with numbers, English letters or Chinese characters, and can contain numbers, underscores `_`, hyphens `-`, and decimal points `.`. If this parameter is not specified, the default value is ScalingGroupId.
* `defaultCooldown` - (Optional) Default cool-down time (in seconds) of the scaling group. Value range: [0, 86400]. The default value is 300s.
* `vswitchId` - (Deprecated) It has been deprecated from version 1.7.1 and new field 'vswitch_ids' replaces it.
* `vswitchIds` - (Optional) List of virtual switch IDs in which the ecs instances to be launched.
* `removalPolicies` - (Optional) RemovalPolicy is used to select the ECS instances you want to remove from the scaling group when multiple candidates for removal exist. Optional values:
    - OldestInstance: removes the ECS instance that is added to the scaling group at the earliest point in time.
    - NewestInstance: removes the ECS instance that is added to the scaling group at the latest point in time.
    - OldestScalingConfiguration: removes the ECS instance that is created based on the earliest scaling configuration.
    - Default values: Default value of RemovalPolicy.1: OldestScalingConfiguration. Default value of RemovalPolicy.2: OldestInstance.
* `dbInstanceIds` - (Optional) If an RDS instance is specified in the scaling group, the scaling group automatically attaches the Intranet IP addresses of its ECS instances to the RDS access whitelist.
    - The specified RDS instance must be in running status.
    - The specified RDS instanceâ€™s whitelist must have room for more IP addresses.
* `loadbalancerIds` - (Optional) If a Server Load Balancer instance is specified in the scaling group, the scaling group automatically attaches its ECS instances to the Server Load Balancer instance.
    - The Server Load Balancer instance must be enabled.
    - At least one listener must be configured for each Server Load Balancer and it HealthCheck must be on. Otherwise, creation will fail (it may be useful to add a `dependsOn` argument
      targeting your `alicloudSlbListener` in order to make sure the listener with its HealthCheck configuration is ready before creating your scaling group).
    - The Server Load Balancer instance attached with VPC-type ECS instances cannot be attached to the scaling group.
    - The default weight of an ECS instance attached to the Server Load Balancer instance is 50.
* `multiAzPolicy` - (Optional, ForceNew) Multi-AZ scaling group ECS instance expansion and contraction strategy. PRIORITY, BALANCE or COST_OPTIMIZED(Available in 1.54.0+).
* `onDemandBaseCapacity` - (Optional, Available in v1.54.0+) The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances. This base portion is provisioned first as your group scales.
* `onDemandPercentageAboveBaseCapacity` - (Optional, Available in v1.54.0+) Controls the percentages of On-Demand Instances and Spot Instances for your additional capacity beyond OnDemandBaseCapacity.  
* `spotInstancePools` - (Optional, Available in v1.54.0+) The number of Spot pools to use to allocate your Spot capacity. The Spot pools is composed of instance types of lowest price.
* `spotInstanceRemedy` - (Optional, Available in v1.54.0+) Whether to replace spot instances with newly created spot/onDemand instance when receive a spot recycling message.
* `groupDeletionProtection` - (Optional, Available in v1.102.0+) Specifies whether the scaling group deletion protection is enabled. `true` or `false`, Default value: `false`.            
* `launchTemplateId` - (Optional, Available in v1.141.0+) Instance launch template ID, scaling group obtains launch configuration from instance launch template, see [Launch Template](https://www.alibabacloud.com/help/doc-detail/73916.html). Creating scaling group from launch template enable group automatically.
* `launchTemplateVersion` - (Optional, Available in v1.159.0+) The version number of the launch template. Valid values are the version number, `latest`, or `default`, Default value: `default`.
* `groupType` - (Optional, Available in v1.164.0+) Resource type within scaling group. Optional values: ECS, ECI. Default to ECS.
* `healthCheckType` - (Optional, Available in v1.193.0+) Resource type within scaling group. Optional values: ECS, NONE. Default to ECS.
* `tags` - (Optional, Available in v1.160.0+) A mapping of tags to assign to the resource.
  - Key: It can be up to 64 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It cannot be a null string.
  - Value: It can be up to 128 characters in length. It cannot begin with "aliyun", "acs:", "http://", or "https://". It can be a null string.
* `protectedInstances` - (Optional, Available in v1.182.0+) Set or unset instances within group into protected status.

-> **NOTE:** When detach loadbalancers, instances in group will be remove from loadbalancer's `Default Server Group`; On the contrary, When attach loadbalancers, instances in group will be added to loadbalancer's `Default Server Group`.

-> **NOTE:** When detach dbInstances, private ip of instances in group will be remove from dbInstance's `whiteList`; On the contrary, When attach dbInstances, private ip of instances in group will be added to dbInstance's `whiteList`.

-> **NOTE:** `onDemandBaseCapacity`,`onDemandPercentageAboveBaseCapacity`,`spotInstancePools`,`spotInstanceRemedy` are valid only if `multiAzPolicy` is 'COST_OPTIMIZED'.


## Attributes Reference

The following attributes are exported:

* `id` - The scaling group ID.
* `minSize` - The minimum number of ECS instances.
* `maxSize` - The maximum number of ECS instances.
* `scalingGroupName` - The name of the scaling group.
* `defaultCooldown` - The default cool-down of the scaling group.
* `removalPolicies` - The removal policy used to select the ECS instance to remove from the scaling group.
* `dbInstanceIds` - The db instances id which the ECS instance attached to.
* `loadbalancerIds` - The slb instances id which the ECS instance attached to.
* `vswitchIds` - The vswitches id in which the ECS instance launched.
* `launchTemplateId` - The instance launch template ID.
* `launchTemplateVersion` - The version number of the launch template.
* `protectedInstances` - The scaling group instances in protected status.

## Import

ESS scaling group can be imported using the id, e.g.

```shell
$ terraform import alicloud_ess_scaling_group.example asg-abc123456
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-d387586332424e3ec079559dac809315c577b8422bc213b5e829386eac3504fb -->