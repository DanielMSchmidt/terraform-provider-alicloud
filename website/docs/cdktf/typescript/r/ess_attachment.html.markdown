---
subcategory: "Auto Scaling"
layout: "alicloud"
page_title: "Alicloud: alicloud_ess_attachment"
sidebar_current: "docs-alicloud-resource-ess-attachment"
description: |-
  Provides a ESS Attachment resource to attach or remove ECS instances.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_ess\_attachment

Attaches several ECS instances to a specified scaling group or remove them from it.

-> **NOTE:** ECS instances can be attached or remove only when the scaling group is active, and it has no scaling activity in progress.

-> **NOTE:** There are two types ECS instances in a scaling group: "AutoCreated" and "Attached". The total number of them can not larger than the scaling group "MaxSize".

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "essattachmentconfig",
    });
    const alicloudVpcDefault = new alicloud.vpc.Vpc(this, "default", {
      cidrBlock: "172.16.0.0/16",
      vpcName: name.stringValue,
    });
    const dataAlicloudImagesDefault =
      new alicloud.dataAlicloudImages.DataAlicloudImages(this, "default_2", {
        mostRecent: true,
        nameRegex: "^ubuntu_18.*64",
        owners: "system",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudImagesDefault.overrideLogicalId("default");
    const dataAlicloudZonesDefault =
      new alicloud.dataAlicloudZones.DataAlicloudZones(this, "default_3", {
        availableDiskCategory: "cloud_efficiency",
        availableResourceCreation: "VSwitch",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudZonesDefault.overrideLogicalId("default");
    const alicloudSecurityGroupDefault =
      new alicloud.securityGroup.SecurityGroup(this, "default_4", {
        name: name.stringValue,
        vpcId: cdktf.Token.asString(alicloudVpcDefault.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSecurityGroupDefault.overrideLogicalId("default");
    const alicloudSecurityGroupRuleDefault =
      new alicloud.securityGroupRule.SecurityGroupRule(this, "default_5", {
        cidrIp: "172.16.0.0/24",
        ipProtocol: "tcp",
        nicType: "intranet",
        policy: "accept",
        portRange: "22/22",
        priority: 1,
        securityGroupId: cdktf.Token.asString(alicloudSecurityGroupDefault.id),
        type: "ingress",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSecurityGroupRuleDefault.overrideLogicalId("default");
    const alicloudVswitchDefault = new alicloud.vswitch.Vswitch(
      this,
      "default_6",
      {
        cidrBlock: "172.16.0.0/24",
        name: name.stringValue,
        vpcId: cdktf.Token.asString(alicloudVpcDefault.id),
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchDefault.overrideLogicalId("default");
    const dataAlicloudInstanceTypesDefault =
      new alicloud.dataAlicloudInstanceTypes.DataAlicloudInstanceTypes(
        this,
        "default_7",
        {
          availabilityZone: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
          ),
          cpuCoreCount: 2,
          memorySize: 4,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudInstanceTypesDefault.overrideLogicalId("default");
    const alicloudEssScalingGroupDefault =
      new alicloud.essScalingGroup.EssScalingGroup(this, "default_8", {
        maxSize: 2,
        minSize: 0,
        removalPolicies: ["OldestInstance", "NewestInstance"],
        scalingGroupName: name.stringValue,
        vswitchIds: [cdktf.Token.asString(alicloudVswitchDefault.id)],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEssScalingGroupDefault.overrideLogicalId("default");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudInstanceDefaultCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber("2")
    );
    const alicloudInstanceDefault = new alicloud.instance.Instance(
      this,
      "default_9",
      {
        imageId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudImagesDefault.images, ["0", "id"])
        ),
        instanceChargeType: "PostPaid",
        instanceName: name.stringValue,
        instanceType: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudInstanceTypesDefault.instanceTypes, [
            "0",
            "id",
          ])
        ),
        internetChargeType: "PayByTraffic",
        internetMaxBandwidthOut: cdktf.Token.asNumber("10"),
        securityGroups: [cdktf.Token.asString(alicloudSecurityGroupDefault.id)],
        systemDiskCategory: "cloud_efficiency",
        vswitchId: cdktf.Token.asString(alicloudVswitchDefault.id),
        count: alicloudInstanceDefaultCount,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudInstanceDefault.overrideLogicalId("default");
    const alicloudEssAttachmentDefault =
      new alicloud.essAttachment.EssAttachment(this, "default_10", {
        force: true,
        instanceIds: [
          cdktf.Token.asString(
            cdktf.propertyAccess(alicloudInstanceDefault, ["0", "id"])
          ),
          cdktf.Token.asString(
            cdktf.propertyAccess(alicloudInstanceDefault, ["1", "id"])
          ),
        ],
        scalingGroupId: cdktf.Token.asString(alicloudEssScalingGroupDefault.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEssAttachmentDefault.overrideLogicalId("default");
    const alicloudEssScalingConfigurationDefault =
      new alicloud.essScalingConfiguration.EssScalingConfiguration(
        this,
        "default_11",
        {
          active: true,
          enable: true,
          forceDelete: true,
          imageId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudImagesDefault.images, ["0", "id"])
          ),
          instanceType: cdktf.Token.asString(
            cdktf.propertyAccess(
              dataAlicloudInstanceTypesDefault.instanceTypes,
              ["0", "id"]
            )
          ),
          scalingGroupId: cdktf.Token.asString(
            alicloudEssScalingGroupDefault.id
          ),
          securityGroupId: cdktf.Token.asString(
            alicloudSecurityGroupDefault.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEssScalingConfigurationDefault.overrideLogicalId("default");
  }
}

```

## Argument Reference

The following arguments are supported:

* `scalingGroupId` - (Required) ID of the scaling group of a scaling configuration.
* `instanceIds` - (Required) ID of the ECS instance to be attached to the scaling group. You can input up to 20 IDs.
* `force` - (Optional) Whether to remove forcibly "AutoCreated" ECS instances in order to release scaling group capacity "MaxSize" for attaching ECS instances. Default to false.

-> **NOTE:** "AutoCreated" ECS instance will be deleted after it is removed from scaling group, but "Attached" will be not.

-> **NOTE:** Restrictions on attaching ECS instances:

   - The attached ECS instances and the scaling group must have the same region and network type(`classic` or `vpc`).
   - The attached ECS instances and the instance with active scaling configurations must have the same instance type.
   - The attached ECS instances must in the running state.
   - The attached ECS instances has not been attached to other scaling groups.
   - The attached ECS instances supports Subscription and Pay-As-You-Go payment methods.

## Attributes Reference

The following attributes are exported:

* `id` - (Required, ForceNew) The ESS attachment resource ID.
* `instanceIds` - (Required)ID of list "Attached" ECS instance.
* `force` - Whether to delete "AutoCreated" ECS instances.

## Import

ESS attachment can be imported using the id or scaling group id, e.g.

```shell
$ terraform import alicloud_ess_attachment.example asg-abc123456
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-20f6e456df69aa7e471a4b3ad854090793d6cc38aa41f2fd4f64da0a101599b3 -->