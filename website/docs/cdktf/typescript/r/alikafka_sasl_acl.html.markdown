---
subcategory: "AliKafka"
layout: "alicloud"
page_title: "Alicloud: alicloud_alikafka_sasl_acl"
sidebar_current: "docs-alicloud-resource-alikafka-sasl_acl"
description: |-
  Provides a Alicloud Alikafka Sasl Acl resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_alikafka\_sasl\_acl

Provides an ALIKAFKA sasl acl resource.

-> **NOTE:** Available in 1.66.0+

-> **NOTE:**  Only the following regions support create alikafka sasl user.
[`cnHangzhou`,`cnBeijing`,`cnShenzhen`,`cnShanghai`,`cnQingdao`,`cnHongkong`,`cnHuhehaote`,`cnZhangjiakou`,`cnChengdu`,`cnHeyuan`,`apSoutheast1`,`apSoutheast3`,`apSoutheast5`,`apSouth1`,`apNortheast1`,`euCentral1`,`euWest1`,`usWest1`,`usEast1`]

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const password = new cdktf.TerraformVariable(this, "password", {
      default: "testpassword",
    });
    const username = new cdktf.TerraformVariable(this, "username", {
      default: "testusername",
    });
    const alicloudVpcDefault = new alicloud.vpc.Vpc(this, "default", {
      cidrBlock: "172.16.0.0/12",
    });
    const dataAlicloudZonesDefault =
      new alicloud.dataAlicloudZones.DataAlicloudZones(this, "default_3", {
        availableResourceCreation: "VSwitch",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudZonesDefault.overrideLogicalId("default");
    const alicloudVswitchDefault = new alicloud.vswitch.Vswitch(
      this,
      "default_4",
      {
        cidrBlock: "172.16.0.0/24",
        vpcId: cdktf.Token.asString(alicloudVpcDefault.id),
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchDefault.overrideLogicalId("default");
    const alicloudAlikafkaInstanceDefault =
      new alicloud.alikafkaInstance.AlikafkaInstance(this, "default_5", {
        deployType: cdktf.Token.asNumber("5"),
        diskSize: cdktf.Token.asNumber("500"),
        diskType: cdktf.Token.asNumber("1"),
        ioMax: cdktf.Token.asNumber("20"),
        name: "tf-testacc-alikafkainstance",
        partitionNum: cdktf.Token.asNumber("50"),
        vswitchId: cdktf.Token.asString(alicloudVswitchDefault.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudAlikafkaInstanceDefault.overrideLogicalId("default");
    const alicloudAlikafkaSaslUserDefault =
      new alicloud.alikafkaSaslUser.AlikafkaSaslUser(this, "default_6", {
        instanceId: cdktf.Token.asString(alicloudAlikafkaInstanceDefault.id),
        password: password.stringValue,
        username: username.stringValue,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudAlikafkaSaslUserDefault.overrideLogicalId("default");
    const alicloudAlikafkaTopicDefault =
      new alicloud.alikafkaTopic.AlikafkaTopic(this, "default_7", {
        instanceId: cdktf.Token.asString(alicloudAlikafkaInstanceDefault.id),
        remark: "topic-remark",
        topic: "test-topic",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudAlikafkaTopicDefault.overrideLogicalId("default");
    const alicloudAlikafkaSaslAclDefault =
      new alicloud.alikafkaSaslAcl.AlikafkaSaslAcl(this, "default_8", {
        aclOperationType: "Write",
        aclResourceName: cdktf.Token.asString(
          alicloudAlikafkaTopicDefault.topic
        ),
        aclResourcePatternType: "LITERAL",
        aclResourceType: "Topic",
        instanceId: cdktf.Token.asString(alicloudAlikafkaInstanceDefault.id),
        username: cdktf.Token.asString(
          alicloudAlikafkaSaslUserDefault.username
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudAlikafkaSaslAclDefault.overrideLogicalId("default");
  }
}

```

## Argument Reference

The following arguments are supported:

* `instanceId` - (Required, ForceNew) ID of the ALIKAFKA Instance that owns the groups.
* `username` - (Required, ForceNew) Username for the sasl user. The length should between 1 to 64 characters. The user should be an existed sasl user.
* `aclResourceType` - (Required, ForceNew) Resource type for this acl. The resource type can only be "Topic" and "Group".
* `aclResourceName` - (Required, ForceNew) Resource name for this acl. The resource name should be a topic or consumer group name.
* `aclResourcePatternType` - (Required, ForceNew) Resource pattern type for this acl. The resource pattern support two types "LITERAL" and "PREFIXED". "LITERAL": A literal name defines the full name of a resource. The special wildcard character "*" can be used to represent a resource with any name. "PREFIXED": A prefixed name defines a prefix for a resource.
* `aclOperationType` - (Required, ForceNew) Operation type for this acl. The operation type can only be "Write" and "Read".

## Attributes Reference

The following attributes are exported:

* `id` - The `key` of the resource supplied above. The value is formulated as `<instance_id>:<username>:<acl_resource_type>:<acl_resource_name>:<acl_resource_pattern_type>:<acl_operation_type>`.
* `host` - The host of the acl.

## Import

ALIKAFKA GROUP can be imported using the id, e.g.

```shell
$ terraform import alicloud_alikafka_sasl_acl.acl alikafka_post-cn-123455abc:username:Topic:test-topic:LITERAL:Write
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-2ee1b18e50e8ce903bc501c04013627a12e37e3db0b5f9f5e74b1e0c10aab6d8 -->