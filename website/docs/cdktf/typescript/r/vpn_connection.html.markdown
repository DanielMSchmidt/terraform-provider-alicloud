---
subcategory: "VPN Gateway"
layout: "alicloud"
page_title: "Alicloud: alicloud_vpn_connection"
sidebar_current: "docs-alicloud-resource-vpn-connection"
description: |-
  Provides a Alicloud VPN connection resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_vpn\_connection

Provides a VPN connection resource.

-> **NOTE:** Terraform will auto build vpn connection while it uses `alicloudVpnConnection` to build a vpn connection resource.
             The vpn connection depends on VPN and VPN customer gateway.

For information about VPN connection and how to use it, see [What is vpn connection](https://www.alibabacloud.com/help/en/doc-detail/120390.html).


## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const alicloudVpcFoo = new alicloud.vpc.Vpc(this, "foo", {
      cidrBlock: "172.16.0.0/12",
      vpcName: "terraform-example",
    });
    const alicloudVpnCustomerGatewayFoo =
      new alicloud.vpnCustomerGateway.VpnCustomerGateway(this, "foo_1", {
        description: "terraform-example",
        ipAddress: "42.104.22.210",
        name: "terraform-example",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVpnCustomerGatewayFoo.overrideLogicalId("foo");
    const dataAlicloudZonesFoo =
      new alicloud.dataAlicloudZones.DataAlicloudZones(this, "foo_2", {
        availableResourceCreation: "VSwitch",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudZonesFoo.overrideLogicalId("foo");
    const alicloudVswitchFoo = new alicloud.vswitch.Vswitch(this, "foo_3", {
      cidrBlock: "172.16.0.0/21",
      vpcId: cdktf.Token.asString(alicloudVpcFoo.id),
      vswitchName: "terraform-example",
      zoneId: cdktf.Token.asString(
        cdktf.propertyAccess(dataAlicloudZonesFoo.zones, ["0", "id"])
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchFoo.overrideLogicalId("foo");
    const alicloudVpnGatewayFoo = new alicloud.vpnGateway.VpnGateway(
      this,
      "foo_4",
      {
        bandwidth: cdktf.Token.asNumber("10"),
        description: "test_create_description",
        enableSsl: true,
        instanceChargeType: "PrePaid",
        name: "terraform-example",
        vpcId: cdktf.Token.asString(alicloudVpcFoo.id),
        vswitchId: cdktf.Token.asString(alicloudVswitchFoo.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVpnGatewayFoo.overrideLogicalId("foo");
    const alicloudVpnConnectionFoo = new alicloud.vpnConnection.VpnConnection(
      this,
      "foo_5",
      {
        customerGatewayId: cdktf.Token.asString(
          alicloudVpnCustomerGatewayFoo.id
        ),
        effectImmediately: true,
        ikeConfig: {
          ikeAuthAlg: "md5",
          ikeEncAlg: "des",
          ikeLifetime: 86400,
          ikeLocalId: "testalice2",
          ikeMode: "main",
          ikePfs: "group1",
          ikeRemoteId: "testbob2",
          ikeVersion: "ikev2",
          psk: "tf-testvpn2",
        },
        ipsecConfig: {
          ipsecAuthAlg: "md5",
          ipsecEncAlg: "des",
          ipsecLifetime: 8640,
          ipsecPfs: "group5",
        },
        localSubnet: ["172.16.0.0/24", "172.16.1.0/24"],
        name: "terraform-example",
        remoteSubnet: ["10.0.0.0/24", "10.0.1.0/24"],
        vpnGatewayId: cdktf.Token.asString(alicloudVpnGatewayFoo.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVpnConnectionFoo.overrideLogicalId("foo");
  }
}

```
## Argument Reference

The following arguments are supported:

* `name` - (Optional) The name of the IPsec connection.
* `vpnGatewayId` - (Required, ForceNew) The ID of the VPN gateway.
* `customerGatewayId` - (Required, ForceNew) The ID of the customer gateway.
* `localSubnet` - (Required, Type:Set) The CIDR block of the VPC to be connected with the local data center. This parameter is used for phase-two negotiation.
* `remoteSubnet` - (Required, Type:Set) The CIDR block of the local data center. This parameter is used for phase-two negotiation.
* `effectImmediately` - (Optional) Whether to delete a successfully negotiated IPsec tunnel and initiate a negotiation again. Valid value:true,false.
* `ikeConfig` - (Optional) The configurations of phase-one negotiation. See the following `Block ike_config`.
* `ipsecConfig` - (Optional) The configurations of phase-two negotiation. See the following `Block ipsec_config`.
* `healthCheckConfig` - (Optional, Computed, Available in 1.161.0+.) The health check configurations. See the following `Block health_check_config`.
* `enableDpd` - (Optional, Computed, Available in 1.161.0+.) Specifies whether to enable the dead peer detection (DPD) feature. Valid values: `true`(default), `false`.
* `enableNatTraversal` - (Optional, Computed, Available in 1.161.0+.) Specifies whether to enable NAT traversal. Valid values: `true`(default), `false`.
* `bgpConfig` - (Optional, Computed, Available in 1.161.0+.) The configurations of the BGP routing protocol. See the following `Block bgp_config`.

### Block ike_config

The ike_config mapping supports the following:

* `psk` - (Optional) Used for authentication between the IPsec VPN gateway and the customer gateway.
* `ikeVersion` - (Optional) The version of the IKE protocol. Valid value: ikev1 | ikev2. Default value: ikev1
* `ikeMode` - (Optional) The negotiation mode of IKE V1. Valid value: main (main mode) | aggressive (aggressive mode). Default value: main
* `ikeEncAlg` - (Optional) The encryption algorithm of phase-one negotiation. Valid value: aes | aes192 | aes256 | des | 3des. Default Valid value: aes
* `ikeAuthAlg` - (Optional) The authentication algorithm of phase-one negotiation. Valid value: md5 | sha1 . Default value: md5
* `ikePfs` - (Optional) The Diffie-Hellman key exchange algorithm used by phase-one negotiation. Valid value: group1 | group2 | group5 | group14 | group24. Default value: group2
* `ikeLifetime` - (Optional) The SA lifecycle as the result of phase-one negotiation. The valid value of n is [0, 86400], the unit is second and the default value is 86400.
* `ikeLocalId` - (Optional, Computed) The identification of the VPN gateway.
* `ikeRemoteId` - (Optional, Computed) The identification of the customer gateway.

### Block ipsec_config

The ipsec_config mapping supports the following:

* `ipsecEncAlg` - (Optional) The encryption algorithm of phase-two negotiation. Valid value: aes | aes192 | aes256 | des | 3des. Default value: aes
* `ipsecAuthAlg` - (Optional) The authentication algorithm of phase-two negotiation. Valid value: md5 | sha1 | sha256 | sha384 | sha512 |. Default value: sha1
* `ipsecPfs` - (Optional) The Diffie-Hellman key exchange algorithm used by phase-two negotiation. Valid value: group1 | group2 | group5 | group14 | group24| disabled. Default value: group2
* `ipsecLifetime` - (Optional)  The SA lifecycle as the result of phase-two negotiation. The valid value is [0, 86400], the unit is second and the default value is 86400.

### Block health_check_config

The health_check_config mapping supports the following:

* `enable` - (Optional, Computed) Whether to enable Health Check.
* `dip` - (Optional, Computed) The destination IP address.
* `sip` - (Optional, Computed) The source IP address.
* `interval` - (Optional, Computed) The interval between two consecutive health checks. Unit: seconds.
* `retry` - (Optional, Computed)  The maximum number of health check retries.

### Block bgp_config

The bgp_config mapping supports the following:

* `enable` - (Optional, Computed) Whether to enable BGP.
* `localAsn` - (Optional, Computed) The ASN on the Alibaba Cloud side.
* `tunnelCidr` - (Optional, Computed) The CIDR block of the IPsec tunnel. The CIDR block belongs to 169.254.0.0/16. The mask of the CIDR block is 30 bits in length.
* `localBgpIp` - (Optional, Computed)  The BGP IP address on the Alibaba Cloud side.

## Attributes Reference

The following attributes are exported:

* `id` - The ID of the VPN connection id.
* `status` - The status of VPN connection.
* `ikeConfig` - The configurations of phase-one negotiation.
* `ipsecConfig` - The configurations of phase-two negotiation.

#### Timeouts

-> **NOTE:** Available in 1.161.0+.

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 1 mins) Used when create the vpn connection.
* `update` - (Defaults to 1 mins) Used when update the vpn connection.
* `delete` - (Defaults to 1 mins) Used when delete the vpn connection.

## Import

VPN connection can be imported using the id, e.g.

```shell
$ terraform import alicloud_vpn_connection.example vco-abc123456
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-83dc6cf0d38ca0ecfa91ec2ba3f88198b23d8603e9a2703f7b8b984850b3d189 -->