---
subcategory: "Global Accelerator (GA)"
layout: "alicloud"
page_title: "Alicloud: alicloud_ga_listener"
sidebar_current: "docs-alicloud-resource-ga-listener"
description: |-
  Provides a Alicloud Global Accelerator (GA) Listener resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_ga\_listener

Provides a Global Accelerator (GA) Listener resource.

For information about Global Accelerator (GA) Listener and how to use it, see [What is Listener](https://help.aliyun.com/document_detail/153253.html).

-> **NOTE:** Available in v1.111.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const alicloudGaAcceleratorExample =
      new alicloud.gaAccelerator.GaAccelerator(this, "example", {
        autoUseCoupon: true,
        duration: 1,
        spec: "1",
      });
    const alicloudGaBandwidthPackageDe =
      new alicloud.gaBandwidthPackage.GaBandwidthPackage(this, "de", {
        bandwidth: cdktf.Token.asNumber("100"),
        bandwidthType: "Basic",
        billingType: "PayBy95",
        paymentType: "PayAsYouGo",
        ratio: 30,
        type: "Basic",
      });
    const alicloudGaBandwidthPackageAttachmentDe =
      new alicloud.gaBandwidthPackageAttachment.GaBandwidthPackageAttachment(
        this,
        "de_2",
        {
          acceleratorId: cdktf.Token.asString(alicloudGaAcceleratorExample.id),
          bandwidthPackageId: cdktf.Token.asString(
            alicloudGaBandwidthPackageDe.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudGaBandwidthPackageAttachmentDe.overrideLogicalId("de");
    const alicloudGaListenerExample = new alicloud.gaListener.GaListener(
      this,
      "example_3",
      {
        acceleratorId: cdktf.Token.asString(alicloudGaAcceleratorExample.id),
        dependsOn: [alicloudGaBandwidthPackageAttachmentDe],
        portRanges: [
          {
            fromPort: 60,
            toPort: 70,
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudGaListenerExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `acceleratorId` - (Required) The accelerator id.
* `certificates` - (Optional) The certificates of the listener.

-> **NOTE:** This parameter needs to be configured only for monitoring of the HTTPS protocol.
             
* `clientAffinity` - (Optional) The clientAffinity of the listener. Default value is `none`. Valid values:
    `none`: client affinity is not maintained, that is, connection requests from the same client cannot always be directed to the same terminal node.
    `sourceIp`: maintain client affinity. When a client accesses a stateful application, all requests from the same client can be directed to the same terminal node, regardless of the source port and protocol.
* `description` - (Optional) The description of the listener.
* `name` - (Optional) The name of the listener. The length of the name is 2-128 characters. It starts with uppercase and lowercase letters or Chinese characters. It can contain numbers and underscores and dashes.
* `portRanges` - (Required) The portRanges of the listener.

-> **NOTE:** For HTTP or HTTPS protocol monitoring, only one monitoring port can be configured, that is, the start monitoring port and end monitoring port should be the same. 

* `protocol` - (Optional) Type of network transport protocol monitored. Default value is `tcp`. Valid values: `tcp`, `udp`, `http`, `https`.

-> **NOTE:** At present, the white list of HTTP and HTTPS monitoring protocols is open. If you need to use it, please submit a work order.
             
* `proxyProtocol` - (Optional) The proxy protocol of the listener. Default value is `false`. Valid values:
    `true`: Turn on the keep client source IP function. After it is turned on, the back-end service is supported to view the original IP address of the client. 
    `false`: keep client source IP function is not turned on.
* `securityPolicyId` - (Optional, Computed, Available in v1.183.0+) The ID of the security policy. **NOTE:** Only HTTPS listeners support this parameter. Valid values:
    - `tlsCipherPolicy10`:
      - Supported TLS versions: TLS 1.0, TLS 1.1, and TLS 1.2.
      - Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA.
    - `tlsCipherPolicy11`:
      - Supported TLS versions: TLS 1.1 and TLS 1.2.
      - Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA.
    - `tlsCipherPolicy12`:
      - Supported TLS version: TLS 1.2.
      - Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, AES128-GCM-SHA256, AES256-GCM-SHA384, AES128-SHA256, AES256-SHA256, ECDHE-RSA-AES128-SHA, ECDHE-RSA-AES256-SHA, AES128-SHA, AES256-SHA, and DES-CBC3-SHA.
    - `tlsCipherPolicy12Strict`:
      - Supported TLS version: TLS 1.2.
      - Supported cipher suites: ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, ECDHE-RSA-AES128-SHA, and ECDHE-RSA-AES256-SHA.
    - `tlsCipherPolicy12StrictWith13`:
      - Supported TLS versions: TLS 1.2 and TLS 1.3.
      - Supported cipher suites: TLS_AES_128_GCM_SHA256, TLS_AES_256_GCM_SHA384, TLS_CHACHA20_POLY1305_SHA256, TLS_AES_128_CCM_SHA256, TLS_AES_128_CCM_8_SHA256, ECDHE-ECDSA-AES128-GCM-SHA256, ECDHE-ECDSA-AES256-GCM-SHA384, ECDHE-ECDSA-AES128-SHA256, ECDHE-ECDSA-AES256-SHA384, ECDHE-RSA-AES128-GCM-SHA256, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-RSA-AES128-SHA256, ECDHE-RSA-AES256-SHA384, ECDHE-ECDSA-AES128-SHA, ECDHE-ECDSA-AES256-SHA, ECDHE-RSA-AES128-SHA, and ECDHE-RSA-AES256-SHA.
* `listenerType` - (Optional, ForceNew, Computed, Available in v1.196.0+) The routing type of the listener. Default Value: `standard`. Valid values:
    - `standard`: intelligent routing.
    - `customRouting`: custom routing.

#### Block port_ranges

The port_ranges supports the following: 

* `fromPort` - (Required) The initial listening port used to receive requests and forward them to terminal nodes.
* `toPort` - (Required) The end listening port used to receive requests and forward them to terminal nodes.

#### Block certificates

The certificates supports the following: 

* `id` - (Optional) The id of the certificate.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of Listener.
* `status` - The status of the listener.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 10 mins) Used when create the Listener.
* `update` - (Defaults to 3 mins) Used when update the Listener.
* `delete` - (Defaults to 6 mins) Used when delete the Listener.

## Import

Ga Listener can be imported using the id, e.g.

```shell
$ terraform import alicloud_ga_listener.example <id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-d3b22a0d5711aefdc73d68f3bb01baba660384df9deea8ed126aed3c313b0944 -->