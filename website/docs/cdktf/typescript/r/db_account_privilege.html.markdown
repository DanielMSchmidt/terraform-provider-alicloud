---
subcategory: "RDS"
layout: "alicloud"
page_title: "Alicloud: alicloud_db_account_privilege"
sidebar_current: "docs-alicloud-resource-db-account-privilege"
description: |-
  Provides an RDS account privilege resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_db\_account\_privilege

Provides an RDS account privilege resource and used to grant several database some access privilege. A database can be granted by multiple account.

-> **NOTE:** At present, a database can only have one database owner.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const creation = new cdktf.TerraformVariable(this, "creation", {
      default: "Rds",
    });
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "dbaccountprivilegebasic",
    });
    const alicloudVpcDefault = new alicloud.vpc.Vpc(this, "default", {
      cidrBlock: "172.16.0.0/16",
      vpcName: name.stringValue,
    });
    const dataAlicloudZonesDefault =
      new alicloud.dataAlicloudZones.DataAlicloudZones(this, "default_3", {
        availableResourceCreation: creation.stringValue,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudZonesDefault.overrideLogicalId("default");
    const alicloudVswitchDefault = new alicloud.vswitch.Vswitch(
      this,
      "default_4",
      {
        cidrBlock: "172.16.0.0/24",
        vpcId: cdktf.Token.asString(alicloudVpcDefault.id),
        vswitchName: name.stringValue,
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchDefault.overrideLogicalId("default");
    const alicloudDbInstanceInstance = new alicloud.dbInstance.DbInstance(
      this,
      "instance",
      {
        engine: "MySQL",
        engineVersion: "5.6",
        instanceName: name.stringValue,
        instanceStorage: cdktf.Token.asNumber("10"),
        instanceType: "rds.mysql.s1.small",
        vswitchId: cdktf.Token.asString(alicloudVswitchDefault.id),
      }
    );
    const alicloudDbAccountAccount = new alicloud.dbAccount.DbAccount(
      this,
      "account",
      {
        description: "from terraform",
        instanceId: cdktf.Token.asString(alicloudDbInstanceInstance.id),
        name: "tftestprivilege",
        password: "Test12345",
      }
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudDbDatabaseDbCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber("2")
    );
    const alicloudDbDatabaseDb = new alicloud.dbDatabase.DbDatabase(
      this,
      "db",
      {
        description: "from terraform",
        instanceId: cdktf.Token.asString(alicloudDbInstanceInstance.id),
        name: "tfaccountpri_${" + alicloudDbDatabaseDbCount.index + "}",
        count: alicloudDbDatabaseDbCount,
      }
    );
    new alicloud.dbAccountPrivilege.DbAccountPrivilege(this, "privilege", {
      accountName: cdktf.Token.asString(alicloudDbAccountAccount.name),
      dbNames: cdktf.Token.asList(
        cdktf.propertyAccess(alicloudDbDatabaseDb, ["*", "name"])
      ),
      instanceId: cdktf.Token.asString(alicloudDbInstanceInstance.id),
      privilege: "ReadOnly",
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `instanceId` - (Required, ForceNew) The Id of instance in which account belongs.
* `accountName` - (Required, ForceNew) A specified account name.
* `privilege` - The privilege of one account access database. Valid values: 
    - ReadOnly: This value is only for MySQL, MariaDB and SQL Server
    - ReadWrite: This value is only for MySQL, MariaDB and SQL Server
    - DDLOnly: (Available in 1.64.0+) This value is only for MySQL and MariaDB
    - DMLOnly: (Available in 1.64.0+) This value is only for MySQL and MariaDB
    - DBOwner: (Available in 1.64.0+) This value is only for SQL Server and PostgreSQL.
     
   Default to "ReadOnly". 
* `dbNames` - (Required) List of specified database name.

## Attributes Reference

The following attributes are exported:

* `id` - The current account resource ID. Composed of instance ID, account name and privilege with format `<instance_id>:<name>:<privilege>`.

## Import

RDS account privilege can be imported using the id, e.g.

```shell
$ terraform import alicloud_db_account_privilege.example "rm-12345:tf_account:ReadOnly"
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-383a1d22f761a82f81bd8165fc8f8c8497af2e19b0a3ac48ede8326f1d1766e6 -->