---
subcategory: "Log Service (SLS)"
layout: "alicloud"
page_title: "Alicloud: alicloud_log_store"
sidebar_current: "docs-alicloud-resource-log-store"
description: |-
  Provides a Alicloud log store resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_log\_store

The log store is a unit in Log Service to collect, store, and query the log data. Each log store belongs to a project,
and each project can create multiple Logstores. [Refer to details](https://www.alibabacloud.com/help/doc-detail/48874.htm)

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const alicloudLogProjectExample = new alicloud.logProject.LogProject(
      this,
      "example",
      {
        description: "created by terraform",
        name: "tf-log",
      }
    );
    const alicloudLogStoreExample = new alicloud.logStore.LogStore(
      this,
      "example_1",
      {
        appendMeta: true,
        autoSplit: true,
        maxSplitShardCount: 60,
        name: "tf-log-store",
        project: cdktf.Token.asString(alicloudLogProjectExample.name),
        shardCount: 3,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudLogStoreExample.overrideLogicalId("example");
  }
}

```
Encrypt Usage
```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const alicloudLogProjectExample = new alicloud.logProject.LogProject(
      this,
      "example",
      {
        description: "created by terraform",
        name: "tf-log",
      }
    );
    const alicloudLogStoreExample = new alicloud.logStore.LogStore(
      this,
      "example_1",
      {
        appendMeta: true,
        autoSplit: true,
        encryptConf: {
          enable: true,
          encryptType: "default",
          userCmkInfo: {
            arn: "your_role_arn",
            cmkKeyId: "your_cmk_key_id",
            regionId: "you_cmk_region_id",
          },
        },
        maxSplitShardCount: 60,
        name: "tf-log-store",
        project: cdktf.Token.asString(alicloudLogProjectExample.name),
        shardCount: 3,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudLogStoreExample.overrideLogicalId("example");
  }
}

```

## Module Support

You can use the existing [sls module](https://registry.terraform.io/modules/terraform-alicloud-modules/sls/alicloud) 
to create SLS project, store and store index one-click, like ECS instances.

## Argument Reference

The following arguments are supported:

* `project` - (Required, ForceNew) The project name to the log store belongs.
* `name` - (Required, ForceNew) The log store, which is unique in the same project.
* `retentionPeriod` - (Optional) The data retention time (in days). Valid values: [1-3650]. Default to `30`. Log store data will be stored permanently when the value is `3650`.
* `shardCount` - (Optional) The number of shards in this log store. Default to 2. You can modify it by "Split" or "Merge" operations. [Refer to details](https://www.alibabacloud.com/help/doc-detail/28976.htm)
* `autoSplit` - (Optional) Determines whether to automatically split a shard. Default to `false`.
* `telemetryType` - (Optional, Available in 1.179.0+) Determines whether store type is metric. `metrics` means metric store, empty means log store.
* `hotTtl` - (Optional, Available in 1.202.0+) The ttl of hot storage. Default to `30`, at least `30`, hot storage ttl must be less than ttl.
* `mode` - (Optional, Available in 1.202.0+) The mode of storage. Default to `standard`, must be `standard` or `query`, `mode` is only valid when creating, can't be changed after created.
* `maxSplitShardCount` - (Optional) The maximum number of shards for automatic split, which is in the range of 1 to 256. You must specify this parameter when autoSplit is true.
* `appendMeta` - (Optional) Determines whether to append log meta automatically. The meta includes log receive time and client IP address. Default to `true`.
* `enableWebTracking` - (Optional) Determines whether to enable Web Tracking. Default `false`.
* `encryptConf` (Optional, Available in 1.124.0+) Encrypted storage of data, providing data static protection capability, `encryptConf` can be updated since 1.188.0+ (only `enable` change is supported when updating logstore)
  * `enable` (Optional) enable encryption. Default `false`
  * `encryptType` (Optional) Supported encryption type, only supports `default(aes)`,` m4`
  * `userCmkInfo` (Optional) User bring your own key (BYOK) encryption [Refer to details](https://www.alibabacloud.com/help/zh/doc-detail/187853.htm), the format is as follows:
    
    ```
    {
      "cmk_key_id": "your_cmk_key_id",
      "arn":        "your_role_arn",
      "region_id":  "you_cmk_region_id"
    }
    ```
#### Block user_cmk_info
The user_cmk_info mapping supports the following:

* `cmkKeyId` (Required) User master key id.
* `arn` (Required) role arn.
* `regionId` (Required) Region id where the  user master key id is located.

## Attributes Reference

The following attributes are exported:

* `id` - The ID of the log project. It formats of `<project>:<name>`.
* `project` - The project name.
* `name` - Log store name.
* `telemetryType` - Store type.
* `retentionPeriod` - The data retention time.
* `shardCount` - The number of shards.
* `hotTtl` - The ttl of hot storage.
* `mode` - The mode of storage, `mode` can not be changed after created.
* `shards` - The shard attribute.
  * `id` - The ID of the shard.
  * `status` - Shard status, only two status of `readwrite` and `readonly`.
  * `beginKey` - The begin value of the shard range(MD5), included in the shard range.
  * `endKey` - The end value of the shard range(MD5), not included in shard range.
* `autoSplit` - Determines whether to automatically split a shard.
* `maxSplitShardCount` - The maximum number of shards for automatic split.
* `appendMeta` - Determines whether to append log meta automatically.
* `enableWebTracking` - Determines whether to enable Web Tracking.
* `encryptConf` - Encryption configuration of logstore.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create`  - (Defaults to 3 mins) Used when Creating LogStore. 
* `delete`  - (Defaults to 3 mins) Used when Deleting LogStore.
* `read`    - (Defaults to 2 mins) Used when Reading LogStore.

## Import

Log store can be imported using the id, e.g.

```shell
$ terraform import alicloud_log_store.example tf-log:tf-log-store
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-037ec5fbb973f861178b6976904439a2da7a8361c2a6c14b2db20bbc2f6a56ac -->