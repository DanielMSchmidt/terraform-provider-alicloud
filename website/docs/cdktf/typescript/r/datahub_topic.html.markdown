---
subcategory: "Datahub Service (DataHub)"
layout: "alicloud"
page_title: "Alicloud: alicloud_datahub_topic"
sidebar_current: "docs-alicloud-resource-datahub-topic"
description: |-
  Provides a Alicloud datahub topic resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_datahub\_topic

The topic is the basic unit of Datahub data source and is used to define one kind of data or stream. It contains a set of subscriptions. You can manage the datahub source of an application by using topics. [Refer to details](https://help.aliyun.com/document_detail/47440.html).

## Example Usage

Basic Usage

- BLob Topic

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new alicloud.datahubTopic.DatahubTopic(this, "example", {
      comment: "created by terraform",
      lifeCycle: 7,
      name: "tf_datahub_topic",
      projectName: "tf_datahub_project",
      recordType: "BLOB",
      shardCount: 3,
    });
  }
}

```
- Tuple Topic

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    new alicloud.datahubTopic.DatahubTopic(this, "example", {
      comment: "created by terraform",
      lifeCycle: 7,
      name: "tf_datahub_topic",
      projectName: "tf_datahub_project",
      recordSchema: {
        bigint_field: "BIGINT",
        boolean_field: "BOOLEAN",
        double_field: "DOUBLE",
        string_field: "STRING",
        timestamp_field: "TIMESTAMP",
      },
      recordType: "TUPLE",
      shardCount: 3,
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `name` - (Required, ForceNew) The name of the datahub topic. Its length is limited to 1-128 and only characters such as letters, digits and '_' are allowed. It is case-insensitive.
* `projectName` - (Required, ForceNew) The name of the datahub project that this topic belongs to. It is case-insensitive.
* `shardCount` - (Optional, ForceNew) The number of shards this topic contains. The permitted range of values is [1, 10]. The default value is 1.
* `lifeCycle` - (Optional) How many days this topic lives. The permitted range of values is [1, 7]. The default value is 3.
* `recordType` - (Optional, ForceNew) The type of this topic. Its value must be one of {BLOB, TUPLE}. For BLOB topic, data will be organized as binary and encoded by BASE64. For TUPLE topic, data has fixed schema. The default value is "TUPLE" with a schema {STRING}.
* `recordSchema` - (Optional, ForceNew) Schema of this topic, required only for TUPLE topic. Supported data types (case-insensitive) are:
  - BIGINT
  - STRING
  - BOOLEAN
  - DOUBLE
  - TIMESTAMP
* `comment` - (Optional) Comment of the datahub topic. It cannot be longer than 255 characters.

**Notes:** Currently `lifeCycle` can not be modified and it will be supported in the next future.

## Attributes Reference

The following attributes are exported:

* `id` - The ID of the datahub topic. It was composed of project name and its name, and formats to `<project_name>:<name>`.
* `createTime` - Create time of the datahub topic. It is a human-readable string rather than 64-bits UTC.
* `lastModifyTime` - Last modify time of the datahub topic. It is the same as *create_time* at the beginning. It is also a human-readable string rather than 64-bits UTC.

## Import

Datahub topic can be imported using the ID, e.g.

```shell
$ terraform import alicloud_datahub_topic.example tf_datahub_project:tf_datahub_topic
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-2b8c779806affabefef0374ad6b952ac913858b36900d494b0bda414a5b258b4 -->