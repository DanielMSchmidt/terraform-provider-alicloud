---
subcategory: "Express Connect"
layout: "alicloud"
page_title: "Alicloud: alicloud_router_interface_connection"
sidebar_current: "docs-alicloud-resource-router-interface-connection"
description: |-
  Provides a VPC router interface connection resource to connect two VPCs.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_router\_interface\_connection

Provides a VPC router interface connection resource to connect two router interfaces which are in two different VPCs.
After that, all of the two router interfaces will be active.

-> **DEPRECATED:**  This resource  has been deprecated from version `11990`. Please use new resource [alicloud_express_connect_router_interface](https://www.terraform.io/docs/providers/alicloud/r/alicloud_express_connect_router_interface).

-> **NOTE:** At present, Router interface does not support changing opposite router interface, the connection delete action is only deactivating it to inactive, not modifying the connection to empty.

-> **NOTE:** If you want to changing opposite router interface, you can delete router interface and re-build them.

-> **NOTE:** A integrated router interface connection tunnel requires both InitiatingSide and AcceptingSide configuring opposite router interface.

-> **NOTE:** Please remember to add a `dependsOn` clause in the router interface connection from the InitiatingSide to the AcceptingSide, because the connection from the AcceptingSide to the InitiatingSide must be done first.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "alicloudRouterInterfaceConnectionBasic",
    });
    const region = new cdktf.TerraformVariable(this, "region", {
      default: "cn-hangzhou",
    });
    const alicloudVpcBar = new alicloud.vpc.Vpc(this, "bar", {
      cidrBlock: "192.168.0.0/16",
      provider: alicloud,
      vpcName: name.stringValue,
    });
    const alicloudVpcFoo = new alicloud.vpc.Vpc(this, "foo", {
      cidrBlock: "172.16.0.0/12",
      vpcName: name.stringValue,
    });
    new alicloud.provider.AlicloudProvider(this, "alicloud", {
      region: region.stringValue,
    });
    const alicloudRouterInterfaceInitiate =
      new alicloud.routerInterface.RouterInterface(this, "initiate", {
        description: name.stringValue,
        instanceChargeType: "PostPaid",
        name: name.stringValue,
        oppositeRegion: region.stringValue,
        role: "InitiatingSide",
        routerId: cdktf.Token.asString(alicloudVpcFoo.routerId),
        routerType: "VRouter",
        specification: "Large.2",
      });
    const alicloudRouterInterfaceOpposite =
      new alicloud.routerInterface.RouterInterface(this, "opposite", {
        description: "${" + name.value + "}-opposite",
        name: "${" + name.value + "}-opposite",
        oppositeRegion: region.stringValue,
        provider: alicloud,
        role: "AcceptingSide",
        routerId: cdktf.Token.asString(alicloudVpcBar.routerId),
        routerType: "VRouter",
        specification: "Large.1",
      });
    const alicloudRouterInterfaceConnectionBar =
      new alicloud.routerInterfaceConnection.RouterInterfaceConnection(
        this,
        "bar_7",
        {
          interfaceId: cdktf.Token.asString(alicloudRouterInterfaceOpposite.id),
          oppositeInterfaceId: cdktf.Token.asString(
            alicloudRouterInterfaceInitiate.id
          ),
          provider: alicloud,
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudRouterInterfaceConnectionBar.overrideLogicalId("bar");
    const alicloudRouterInterfaceConnectionFoo =
      new alicloud.routerInterfaceConnection.RouterInterfaceConnection(
        this,
        "foo_8",
        {
          dependsOn: [alicloudRouterInterfaceConnectionBar],
          interfaceId: cdktf.Token.asString(alicloudRouterInterfaceInitiate.id),
          oppositeInterfaceId: cdktf.Token.asString(
            alicloudRouterInterfaceOpposite.id
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudRouterInterfaceConnectionFoo.overrideLogicalId("foo");
  }
}

```
## Argument Reference

The following arguments are supported:

* `interfaceId` - (Required, ForceNew) One side router interface ID.
* `oppositeInterfaceId` - (Required, ForceNew) Another side router interface ID. It must belong the specified "opposite_interface_owner_id" account.
* `oppositeInterfaceOwnerId` - (Optional, ForceNew) Another side router interface account ID. Log on to the Alibaba Cloud console, select User Info > Account Management to check the account ID. Default to [Provider account_id](https://www.terraform.io/docs/providers/alicloud/index.html#account_id).
* `oppositeRouterId` - (Optional, ForceNew) Another side router ID. It must belong the specified "opposite_interface_owner_id" account. It is valid when field "opposite_interface_owner_id" is specified.
* `oppositeRouterType` - (Optional, ForceNew) Another side router Type. Optional value: VRouter, VBR. It is valid when field "opposite_interface_owner_id" is specified.

-> **NOTE:** The value of "opposite_interface_owner_id" or "account_id" must be main account and not be sub account.

## Attributes Reference

The following attributes are exported:

* `id` - Router interface ID. The value is equal to "interface_id".

## Import

The router interface connection can be imported using the id, e.g.

```shell
$ terraform import alicloud_router_interface_connection.foo ri-abc123456
```


<!-- cache-key: cdktf-0.17.0-pre.15 input-5e85edcfa6e46221ab6418c2bb7d153694a1e64258ebe789675b096c615c4c45 -->