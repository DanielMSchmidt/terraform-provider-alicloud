---
subcategory: "Network Attached Storage (NAS)"
layout: "alicloud"
page_title: "Alicloud: alicloud_nas_mount_target"
sidebar_current: "docs-alicloud-resource-nas-mount-target"
description: |-
  Provides a Alicloud NAS MountTarget resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_nas_mount_target

Provides a NAS Mount Target resource.
For information about NAS Mount Target and how to use it, see [Manage NAS Mount Targets](https://www.alibabacloud.com/help/en/doc-detail/27531.htm).

-> **NOTE**: Available in v1.34.0+.

-> **NOTE**: Currently this resource support create a mount point in a classic network only when current region is China mainland regions.

-> **NOTE**: You must grant NAS with specific RAM permissions when creating a classic mount targets,
and it only can be achieved by creating a classic mount target mannually.
See [Add a mount point](https://www.alibabacloud.com/help/doc-detail/60431.htm) and [Why do I need RAM permissions to create a mount point in a classic network](https://www.alibabacloud.com/help/faq-detail/42176.htm).

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const alicloudNasAccessGroupExample =
      new alicloud.nasAccessGroup.NasAccessGroup(this, "example", {
        accessGroupName: "terraform-example",
        accessGroupType: "Vpc",
        description: "terraform-example",
        fileSystemType: "standard",
      });
    const alicloudVpcExample = new alicloud.vpc.Vpc(this, "example_1", {
      cidrBlock: "172.17.3.0/24",
      vpcName: "terraform-example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVpcExample.overrideLogicalId("example");
    const dataAlicloudNasZonesExample =
      new alicloud.dataAlicloudNasZones.DataAlicloudNasZones(
        this,
        "example_2",
        {
          fileSystemType: "standard",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudNasZonesExample.overrideLogicalId("example");
    const alicloudNasFileSystemExample =
      new alicloud.nasFileSystem.NasFileSystem(this, "example_3", {
        description: "terraform-example",
        encryptType: cdktf.Token.asNumber("1"),
        protocolType: "NFS",
        storageType: "Performance",
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudNasZonesExample.zones, [
            "0",
            "zone_id",
          ])
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudNasFileSystemExample.overrideLogicalId("example");
    const alicloudVswitchExample = new alicloud.vswitch.Vswitch(
      this,
      "example_4",
      {
        cidrBlock: "172.17.3.0/24",
        vpcId: cdktf.Token.asString(alicloudVpcExample.id),
        vswitchName: "terraform-example",
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudNasZonesExample.zones, [
            "0",
            "zone_id",
          ])
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchExample.overrideLogicalId("example");
    const alicloudNasMountTargetExample =
      new alicloud.nasMountTarget.NasMountTarget(this, "example_5", {
        accessGroupName: cdktf.Token.asString(
          alicloudNasAccessGroupExample.accessGroupName
        ),
        fileSystemId: cdktf.Token.asString(alicloudNasFileSystemExample.id),
        vswitchId: cdktf.Token.asString(alicloudVswitchExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudNasMountTargetExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are supported:

* `fileSystemId` - (Required, ForceNew) The ID of the file system.
* `accessGroupName` - (Required) The name of the permission group that applies to the mount target.
* `vswitchId` - (Optional, ForceNew) The ID of the VSwitch in the VPC where the mount target resides.
* `status` - (Optional) Whether the MountTarget is active. The status of the mount target. Valid values: `active` and `inactive`, Default value is `active`. Before you mount a file system, make sure that the mount target is in the Active state.
* `securityGroupId` - (Optional, ForceNew, Available in v1.95.0+.) The ID of security group.

## Attributes Reference

The following attributes are exported:

*`id` - This ID of this resource. It is formatted to `<file_system_id>:<mount_target_domain>`. Before version 1.95.0, the value is `<mount_target_domain>`.
* `mountTargetDomain` - The IPv4 domain name of the mount target. **NOTE:** Available in v1.161.0+.
### Timeouts

-> **NOTE:** Available in v1.153.0+.

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 40 mins) Used when create the mount target (until it reaches the initial `active` status).
* `delete` - (Defaults to 40 mins) Used when delete the mount target.


## Import

NAS MountTarget  can be imported using the id, e.g.

```shell
$ terraform import alicloud_nas_mount_target.foo 192094b415:192094b415-luw38.cn-beijing.nas.aliyuncs.com
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-2ad99cc659c8f4b50495440fecf96fd8237c78f40cec648d335a484273c062c6 -->