---
subcategory: "Auto Scaling"
layout: "alicloud"
page_title: "Alicloud: alicloud_ess_scalinggroup_vserver_groups"
sidebar_current: "docs-alicloud-resource-ess_scalinggroup_vserver_groups"
description: |-
  Provides a ESS Attachment resource to attach or remove vserver groups.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_ess\_scalinggroup\_vserver\_groups

Attaches/Detaches vserver groups to a specified scaling group.

-> **NOTE:** The load balancer of which vserver groups belongs to must be in `active` status.

-> **NOTE:** If scaling group's network type is `vpc`, the vserver groups must be in the same `vpc`.
 
-> **NOTE:** A scaling group can have at most 5 vserver groups attached by default.

-> **NOTE:** Vserver groups and the default group of loadbalancer share the same backend server quota.

-> **NOTE:** When attach vserver groups to scaling group, existing ECS instances will be added to vserver groups; Instead, ECS instances will be removed from vserver group when detach.

-> **NOTE:** Detach action will be executed before attach action.

-> **NOTE:** Vserver group is defined uniquely by `loadbalancerId`, `vserverGroupId`, `port`.

-> **NOTE:** Modifing `weight` attribute means detach vserver group first and then, attach with new weight parameter.

-> **NOTE:** Resource `alicloudEssScalinggroupVserverGroups` is available in 1.53.0+.

## Example Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "testAccEssVserverGroupsAttachment",
    });
    const alicloudVpcDefault = new alicloud.vpc.Vpc(this, "default", {
      cidrBlock: "172.16.0.0/16",
      name: name.stringValue,
    });
    const dataAlicloudZonesDefault =
      new alicloud.dataAlicloudZones.DataAlicloudZones(this, "default_2", {
        availableDiskCategory: "cloud_efficiency",
        availableResourceCreation: "VSwitch",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudZonesDefault.overrideLogicalId("default");
    const alicloudVswitchDefault = new alicloud.vswitch.Vswitch(
      this,
      "default_3",
      {
        cidrBlock: "172.16.0.0/24",
        name: name.stringValue,
        vpcId: cdktf.Token.asString(alicloudVpcDefault.id),
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchDefault.overrideLogicalId("default");
    const alicloudEssScalingGroupDefault =
      new alicloud.essScalingGroup.EssScalingGroup(this, "default_4", {
        maxSize: cdktf.Token.asNumber("2"),
        minSize: cdktf.Token.asNumber("2"),
        scalingGroupName: name.stringValue,
        vswitchIds: [cdktf.Token.asString(alicloudVswitchDefault.id)],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEssScalingGroupDefault.overrideLogicalId("default");
    const alicloudSlbLoadBalancerDefault =
      new alicloud.slbLoadBalancer.SlbLoadBalancer(this, "default_5", {
        loadBalancerName: name.stringValue,
        vswitchId: cdktf.Token.asString(alicloudVswitchDefault.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSlbLoadBalancerDefault.overrideLogicalId("default");
    const alicloudSlbServerGroupDefault =
      new alicloud.slbServerGroup.SlbServerGroup(this, "default_6", {
        loadBalancerId: cdktf.Token.asString(alicloudSlbLoadBalancerDefault.id),
        name: "test",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSlbServerGroupDefault.overrideLogicalId("default");
    const alicloudEssScalinggroupVserverGroupsDefault =
      new alicloud.essScalinggroupVserverGroups.EssScalinggroupVserverGroups(
        this,
        "default_7",
        {
          scalingGroupId: cdktf.Token.asString(
            alicloudEssScalingGroupDefault.id
          ),
          vserverGroups: [
            {
              loadbalancerId: cdktf.Token.asString(
                alicloudSlbLoadBalancerDefault.id
              ),
              vserverAttributes: [
                {
                  port: cdktf.Token.asNumber("100"),
                  vserverGroupId: cdktf.Token.asString(
                    alicloudSlbServerGroupDefault.id
                  ),
                  weight: cdktf.Token.asNumber("60"),
                },
              ],
            },
          ],
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEssScalinggroupVserverGroupsDefault.overrideLogicalId("default");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudSlbListenerDefaultCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber("2")
    );
    const alicloudSlbListenerDefault = new alicloud.slbListener.SlbListener(
      this,
      "default_8",
      {
        backendPort: cdktf.Token.asNumber("22"),
        bandwidth: cdktf.Token.asNumber("10"),
        frontendPort: cdktf.Token.asNumber("22"),
        healthCheckType: "tcp",
        loadBalancerId: cdktf.Token.asString(
          cdktf.Fn.element(
            cdktf.propertyAccess(alicloudSlbLoadBalancerDefault, ["*", "id"]),
            cdktf.Token.asNumber(alicloudSlbListenerDefaultCount.index)
          )
        ),
        protocol: "tcp",
        count: alicloudSlbListenerDefaultCount,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudSlbListenerDefault.overrideLogicalId("default");
  }
}

```

## Argument Reference

The following arguments are supported:

* `scalingGroupId` - (Required) ID of the scaling group.
* `vserverGroups` - (Required) A list of vserver groups attached on scaling group. See [Block vserver_group](#block-vserver_group) below for details.
* `force` - (Optional, Available in 1.64.0+) If instances of scaling group are attached/removed from slb backend server when attach/detach vserver group from scaling group. Default to true.

## Block vserver_group

the vserver_group supports the following:

* `loadbalancerId` - (Required) Loadbalancer server ID of VServer Group.
* `vserverAttributes` - (Required) A list of VServer Group attributes. See [Block vserver_attribute](#block-vserver_attribute) below for details.

## Block vserver_attribute

* `vserverGroupId` - (Required) ID of VServer Group.
* `port` - (Required) - The port will be used for VServer Group backend server.
* `weight` - (Required) The weight of an ECS instance attached to the VServer Group.

## Attributes Reference

The following attributes are exported:

* `id` - (Required, ForceNew) The ESS vserver groups attachment resource ID.

## Import

ESS vserver groups can be imported using the id, e.g.

```shell
$ terraform import alicloud_ess_vserver_groups.example abc123456
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-6e96384417700efaf088c24f8fea50e5552f7f8d8214db281214271a19571569 -->