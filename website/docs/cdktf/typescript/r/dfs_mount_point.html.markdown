---
subcategory: "Apsara File Storage for HDFS (DFS)"
layout: "alicloud"
page_title: "Alicloud: alicloud_dfs_mount_point"
sidebar_current: "docs-alicloud-resource-dfs-mount-point"
description: |-
  Provides a Alicloud DFS Mount Point resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_dfs\_mount\_point

Provides a DFS Mount Point resource.

For information about DFS Mount Point and how to use it, see [What is Mount Point](https://www.alibabacloud.com/help/doc-detail/207144.htm).

-> **NOTE:** Available in v1.140.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "example_name",
    });
    const alicloudDfsAccessGroupDefault =
      new alicloud.dfsAccessGroup.DfsAccessGroup(this, "default", {
        accessGroupName: name.stringValue,
        description: name.stringValue,
        networkType: "VPC",
      });
    const dataAlicloudDfsZonesDefault =
      new alicloud.dataAlicloudDfsZones.DataAlicloudDfsZones(
        this,
        "default_2",
        {}
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudDfsZonesDefault.overrideLogicalId("default");
    const dataAlicloudVpcsDefault =
      new alicloud.dataAlicloudVpcs.DataAlicloudVpcs(this, "default_3", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVpcsDefault.overrideLogicalId("default");
    const dataAlicloudVswitchesDefault =
      new alicloud.dataAlicloudVswitches.DataAlicloudVswitches(
        this,
        "default_4",
        {
          vpcId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
          ),
          zoneId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudDfsZonesDefault.zones, [
              "0",
              "zone_id",
            ])
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVswitchesDefault.overrideLogicalId("default");
    const alicloudDfsFileSystemDefault =
      new alicloud.dfsFileSystem.DfsFileSystem(this, "default_5", {
        description: name.stringValue,
        fileSystemName: name.stringValue,
        protocolType: "HDFS",
        spaceCapacity: cdktf.Token.asNumber("1024"),
        storageType: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudDfsZonesDefault.zones, [
            "0",
            "options",
            "0",
            "storage_type",
          ])
        ),
        throughputMode: "Standard",
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudDfsZonesDefault.zones, [
            "0",
            "zone_id",
          ])
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudDfsFileSystemDefault.overrideLogicalId("default");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudVswitchDefaultCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber(
        cdktf.conditional(
          cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault.ids), 0),
          0,
          1
        )
      )
    );
    const alicloudVswitchDefault = new alicloud.vswitch.Vswitch(
      this,
      "default_6",
      {
        cidrBlock: cdktf.Fn.cidrsubnet(
          cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.vpcs, [
              "0",
              "cidr_block",
            ])
          ),
          8,
          2
        ),
        vpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
        ),
        vswitchName: name.stringValue,
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudDfsZonesDefault.zones, [
            "0",
            "zone_id",
          ])
        ),
        count: alicloudVswitchDefaultCount,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchDefault.overrideLogicalId("default");
    const alicloudDfsMountPointDefault =
      new alicloud.dfsMountPoint.DfsMountPoint(this, "default_7", {
        accessGroupId: cdktf.Token.asString(alicloudDfsAccessGroupDefault.id),
        description: name.stringValue,
        fileSystemId: cdktf.Token.asString(alicloudDfsFileSystemDefault.id),
        networkType: "VPC",
        vpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
        ),
        vswitchId: cdktf.Token.asString(
          cdktf.conditional(
            cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault.ids), 0),
            cdktf.propertyAccess(dataAlicloudVswitchesDefault.ids, ["0"]),
            cdktf.propertyAccess(
              cdktf.Fn.concat([
                cdktf.propertyAccess(alicloudVswitchDefault, ["*", "id"]),
                [""],
              ]),
              ["0"]
            )
          )
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudDfsMountPointDefault.overrideLogicalId("default");
  }
}

```

## Argument Reference

The following arguments are supported:

* `accessGroupId` - (Required) The ID of the Access Group.
* `description` - (Optional) The description of the Mount Point.
* `fileSystemId` - (Required, ForceNew) The ID of the File System.
* `networkType` - (Required, ForceNew) The network type of the Mount Point. Valid values: `vpc`.
* `status` - (Optional) The status of the Mount Point. Valid values: `active`, `inactive`.
* `vpcId` - (Required, ForceNew) The vpc id.
* `vswitchId` - (Required, ForceNew) The vswitch id.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID of the Mount Point. The value formats as `<file_system_id>:<mount_point_id>`.
* `mountPointId` - The ID of the Mount Point.

## Import

DFS Mount Point can be imported using the id, e.g.

```shell
$ terraform import alicloud_dfs_mount_point.example <file_system_id>:<mount_point_id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-f7ca48fa2ef8b26c9e6f6cf41edec35a9d75efc097eead133ec516f86eccae52 -->