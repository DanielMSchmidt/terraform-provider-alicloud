---
subcategory: "MongoDB"
layout: "alicloud"
page_title: "Alicloud: alicloud_mongodb_sharding_instance"
sidebar_current: "docs-alicloud-resource-mongodb-instance"
description: |-
  Provides a MongoDB sharding instance resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_mongodb\_sharding_instance

Provides a MongoDB sharding instance resource supports replica set instances only. the MongoDB provides stable, reliable, and automatic scalable database services. 
It offers a full range of database solutions, such as disaster recovery, backup, recovery, monitoring, and alarms.
You can see detail product introduction [here](https://www.alibabacloud.com/help/doc-detail/26558.htm)

-> **NOTE:**  Available in 1.40.0+

-> **NOTE:**  The following regions don't support create Classic network MongoDB sharding instance.
[`cnZhangjiakou`,`cnHuhehaote`,`apSoutheast2`,`apSoutheast3`,`apSoutheast5`,`apSouth1`,`meEast1`,`apNortheast1`,`euWest1`] 

-> **NOTE:**  Create MongoDB Sharding instance or change instance type and storage would cost 10~20 minutes. Please make full preparation

## Example Usage

### Create a Mongodb Sharding instance

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const mongo = new cdktf.TerraformVariable(this, "mongo", {
      default: [
        {
          node_class: "dds.mongos.mid",
        },
      ],
    });
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "tf-example",
    });
    const shard = new cdktf.TerraformVariable(this, "shard", {
      default: [
        {
          node_class: "dds.shard.mid",
          node_storage: 10,
        },
      ],
    });
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudMongodbShardingInstanceFooDynamicIterator0 =
      cdktf.TerraformIterator.fromList(cdktf.Token.asAny(mongo.value));
    new alicloud.mongodbShardingInstance.MongodbShardingInstance(this, "foo", {
      engineVersion: "4.2",
      name: name.stringValue,
      vswitchId: alicloudVswitchDefault.id,
      zoneId: cdktf.Token.asString(
        cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
      ),
      mongoList: alicloudMongodbShardingInstanceFooDynamicIterator0.dynamic({
        node_class: cdktf.propertyAccess(
          alicloudMongodbShardingInstanceFooDynamicIterator0.value,
          ["node_class"]
        ),
      }),
    });
    const alicloudVpcDefault = new alicloud.vpc.Vpc(this, "default", {
      cidrBlock: "172.16.0.0/16",
      name: name.stringValue,
    });
    const dataAlicloudZonesDefault =
      new alicloud.dataAlicloudZones.DataAlicloudZones(this, "default_5", {
        availableResourceCreation: "MongoDB",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudZonesDefault.overrideLogicalId("default");
    const alicloudVswitchDefault = new alicloud.vswitch.Vswitch(
      this,
      "default_6",
      {
        cidrBlock: "172.16.0.0/24",
        name: name.stringValue,
        vpcId: cdktf.Token.asString(alicloudVpcDefault.id),
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchDefault.overrideLogicalId("default");
  }
}

```

## Module Support

You can use to the existing [mongodb-sharding module](https://registry.terraform.io/modules/terraform-alicloud-modules/mongodb-sharding/alicloud) 
to create a MongoDB sharding instance resource one-click.

## Argument Reference

The following arguments are supported:

* `engineVersion` - (Required, ForceNew) Database version. Value options can refer to the latest docs [CreateDBInstance](https://www.alibabacloud.com/help/en/doc-detail/61884.htm) `engineVersion`. 
* `storageEngine` (Optional, ForceNew) Storage engine: WiredTiger or RocksDB. System Default value: WiredTiger.
* `name` - (Optional) The name of DB instance. It a string of 2 to 256 characters.
* `instanceChargeType` - (Optional) Valid values are `prePaid`, `postPaid`,System default to `postPaid`. **NOTE:** It can be modified from `postPaid` to `prePaid` after version v1.141.0.
* `period` - (Optional) The duration that you will buy DB instance (in month). It is valid when instance_charge_type is `prePaid`. Valid values: [1~9], 12, 24, 36. System default to 1.
* `zoneId` - (Optional, ForceNew) The Zone to launch the DB instance. MongoDB sharding instance does not support multiple-zone.
If it is a multi-zone and `vswitchId` is specified, the vswitch must in one of them.
* `vswitchId` - (Optional, ForceNew) The virtual switch ID to launch DB instances in one VPC.
* `accountPassword` - (Optional, Sensitive) Password of the root account. It is a string of 6 to 32 characters and is composed of letters, numbers, and underlines.
* `kmsEncryptedPassword` - (Optional, Available in 1.57.1+) An KMS encrypts password used to a instance. If the `accountPassword` is filled in, this field will be ignored.
* `kmsEncryptionContext` - (Optional, MapString, Available in 1.57.1+) An KMS encryption context used to decrypt `kmsEncryptedPassword` before creating or updating instance with `kmsEncryptedPassword`. See [Encryption Context](https://www.alibabacloud.com/help/doc-detail/42975.htm). It is valid when `kmsEncryptedPassword` is set.
* `securityIpList` - (Optional) List of IP addresses allowed to access all databases of an instance. The list contains up to 1,000 IP addresses, separated by commas. Supported formats include 0.0.0.0/0, 10.23.12.24 (IP), and 10.23.12.24/24 (Classless Inter-Domain Routing (CIDR) mode. /24 represents the length of the prefix in an IP address. The range of the prefix length is [1,32]). System default to `["127001"]`.
* `securityGroupId` - (Optional, Available in 1.76.0+) The Security Group ID of ECS.
* `tdeStatus` - (Optional, Available in 1.76.0+) The TDE(Transparent Data Encryption) status. It can be updated from version 1.160.0+.
* `mongoList` - (Required) The mongo-node count can be purchased is in range of [2, 32].
    * `nodeClass` -(Required) Node specification. see [Instance specifications](https://www.alibabacloud.com/help/doc-detail/57141.htm).
* `shardList` - (Required) the shard-node count can be purchased is in range of [2, 32].
    * `nodeClass` -(Required) Node specification. see [Instance specifications](https://www.alibabacloud.com/help/doc-detail/57141.htm).
    * `nodeStorage` - (Required)
        - Custom storage space; value range: [10, 1,000]
        - 10-GB increments. Unit: GB.
    * `readonlyReplicas` - (Optional, Available in 1.126.0+) The number of read-only nodes in shard node. Valid values: 0 to 5. Default value: 0.
* `backupPeriod` - (Optional, Available in 1.42.0+) MongoDB Instance backup period. It is required when `backupTime` was existed. Valid values: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]. Default to [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
* `backupTime` - (Optional, Available in 1.42.0+) MongoDB instance backup time. It is required when `backupPeriod` was existed. In the format of HH:mmZ- HH:mmZ. Time setting interval is one hour. If not set, the system will return a default, like "23:00Z-24:00Z".
* `orderType` - (Optional, Available in v1.134.0+) The type of configuration changes performed. Default value: DOWNGRADE. Valid values:
  * UPGRADE: The specifications are upgraded.
  * DOWNGRADE: The specifications are downgraded. 
    Note: This parameter is only applicable to instances when `instanceChargeType` is PrePaid.
* `autoRenew` - (Optional, Available in v1.141.0+) Auto renew for prepaid, true of false. Default is false.
* `tags` - (Optional) A mapping of tags to assign to the resource.
* `networkType` - (Optional, ForceNew, Computed, Available in v1.161.0+) The network type of the instance. Valid values:`classic` or `vpc`. Default value: `classic`.
* `vpcId` - (Optional, ForceNew, Computed, Available in v1.161.0+) The ID of the VPC. -> **NOTE:** This parameter is valid only when NetworkType is set to VPC.
* `protocolType` - (Optional, ForceNew, Computed, Available in v1.161.0+) The type of the access protocol. Valid values: `mongodb` or `dynamodb`.
* `resourceGroupId` - (Optional, Computed, Available in v1.161.0+) The ID of the Resource Group.

## Attributes Reference

The following attributes are exported:

* `id` - The ID of the MongoDB.
* `mongoList`
    * `nodeId` - The ID of the mongo-node.
    * `connectString` - Mongo node connection string
    * `port` - Mongo node port
* `shardList`
    * `nodeId` - The ID of the shard-node.
* `retentionPeriod` - Instance log backup retention days. **NOTE:** Available in 1.42.0+.
* `configServerList` - The node information list of config server. The details see Block `configServerList`. **NOTE:** Available in v1.140+.

#### config_server_list
The config_server_list supports the following:
* `maxIops` - The maximum IOPS of the Config Server node.
* `connectString` - The connection address of the Config Server node.
* `nodeClass` - The node class of the Config Server node.
* `maxConnections` - The max connections of the Config Server node.
* `port` - The connection port of the Config Server node.
* `nodeDescription` - The description of the Config Server node.
* `nodeId` - The ID of the Config Server node.
* `nodeStorage` - The node storage of the Config Server node.

### Timeouts

-> **NOTE:** Available in 1.126.0+.

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 30 mins) Used when creating the MongoDB instance (until it reaches the initial `running` status).
* `update` - (Defaults to 30 mins) Used when updating the MongoDB instance (until it reaches the initial `running` status).
* `delete` - (Defaults to 30 mins) Used when terminating the MongoDB instance.

## Import

MongoDB can be imported using the id, e.g.

```shell
$ terraform import alicloud_mongodb_sharding_instance.example dds-bp1291daeda44195
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-87984d29294a520b69ed8af03f6450157990c04954cde4cc04cd9b1ee2b2ed2f -->