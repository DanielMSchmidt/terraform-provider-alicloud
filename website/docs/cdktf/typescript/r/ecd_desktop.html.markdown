---
subcategory: "Elastic Desktop Service (ECD)"
layout: "alicloud"
page_title: "Alicloud: alicloud_ecd_desktop"
sidebar_current: "docs-alicloud-resource-ecd-desktop"
description: |-
  Provides a Alicloud ECD Desktop resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_ecd\_desktop

Provides a ECD Desktop resource.

For information about ECD Desktop and how to use it, see [What is Desktop](https://help.aliyun.com/document_detail/188382.html).

-> **NOTE:** Available in v1.144.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const alicloudEcdPolicyGroupDefault =
      new alicloud.ecdPolicyGroup.EcdPolicyGroup(this, "default", {
        authorizeAccessPolicyRules: [
          {
            cidrIp: "1.2.3.4/24",
            description: "example_value",
          },
        ],
        authorizeSecurityPolicyRules: [
          {
            cidrIp: "0.0.0.0/0",
            description: "example_value",
            ipProtocol: "TCP",
            policy: "accept",
            portRange: "80/80",
            priority: "1",
            type: "inflow",
          },
        ],
        clipboard: "readwrite",
        localDrive: "read",
        policyGroupName: "your_policy_group_name",
      });
    const alicloudEcdSimpleOfficeSiteDefault =
      new alicloud.ecdSimpleOfficeSite.EcdSimpleOfficeSite(this, "default_1", {
        cidrBlock: "172.16.0.0/12",
        desktopAccessType: "Internet",
        enableInternetAccess: false,
        officeSiteName: "your_office_site_name",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEcdSimpleOfficeSiteDefault.overrideLogicalId("default");
    const alicloudEcdUserDefault = new alicloud.ecdUser.EcdUser(
      this,
      "default_2",
      {
        email: "your_email",
        endUserId: "your_end_user_id",
        password: "your_password",
        phone: "your_phone",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEcdUserDefault.overrideLogicalId("default");
    const dataAlicloudEcdBundlesDefault =
      new alicloud.dataAlicloudEcdBundles.DataAlicloudEcdBundles(
        this,
        "default_3",
        {
          bundleType: "SYSTEM",
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudEcdBundlesDefault.overrideLogicalId("default");
    const alicloudEcdDesktopDefault = new alicloud.ecdDesktop.EcdDesktop(
      this,
      "default_4",
      {
        bundleId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudEcdBundlesDefault.bundles, [
            "0",
            "id",
          ])
        ),
        desktopName: "your_desktop_name",
        endUserIds: [cdktf.Token.asString(alicloudEcdUserDefault.id)],
        officeSiteId: cdktf.Token.asString(
          alicloudEcdSimpleOfficeSiteDefault.id
        ),
        policyGroupId: cdktf.Token.asString(alicloudEcdPolicyGroupDefault.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudEcdDesktopDefault.overrideLogicalId("default");
  }
}

```

## Argument Reference

The following arguments are supported:

* `amount` - (Optional) The amount of the Desktop.
* `autoPay` - (Optional) The auto-pay of the Desktop whether to pay automatically. values: `true`, `false`.
* `autoRenew` - (Optional) The auto-renewal of the Desktop whether to renew automatically. It takes effect only when the parameter ChargeType is set to PrePaid. values: `true`, `false`.
* `bundleId` - (Required) The bundle id of the Desktop.
* `desktopName` - (Optional) The desktop name of the Desktop.
* `desktopType` - (Optional) The desktop type of the Desktop.
* `officeSiteId` - (Required, ForceNew) The ID of the Simple Office Site.
* `endUserIds` - (Optional, ForceNew) The desktop end user id of the Desktop.
* `hostName` - (Optional) The hostname of the Desktop.
* `paymentType` - (Optional, Computed) The payment type of the Desktop. Valid values: `payAsYouGo`, `subscription`. Default to `payAsYouGo`.
* `period` - (Optional) The period of the Desktop.
* `periodUnit` - (Optional) The period unit of the Desktop.
* `policyGroupId` - (Required) The policy group id of the Desktop.
* `rootDiskSizeGib` - (Optional) The root disk size gib of the Desktop.
* `status` - (Optional, Computed) The status of the Desktop. Valid values: `deleted`, `expired`, `pending`, `running`, `starting`, `stopped`, `stopping`.
* `stoppedMode` - (Optional) The stopped mode of the Desktop.
* `userAssignMode` - (Optional) The user assign mode of the Desktop. Valid values: `all`, `perUser`. Default to `all`.
* `userDiskSizeGib` - (Optional) The user disk size gib of the Desktop.
* `tags` - (Optional) A mapping of tags to assign to the resource.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of Desktop.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 10 mines) Used when create the Desktop.
* `delete` - (Defaults to 10 mines) Used when delete the Desktop.
* `update` - (Defaults to 20 mines) Used when update the Desktop.

## Import

ECD Desktop can be imported using the id, e.g.

```shell
$ terraform import alicloud_ecd_desktop.example <id>
```
<!-- cache-key: cdktf-0.17.0-pre.15 input-0fe88c2f58a7fecb99df1f2cdeaab991f3ca5ef464e753e4df246001392267e4 -->