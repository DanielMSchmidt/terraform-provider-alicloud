---
subcategory: "Application Load Balancer (ALB)"
layout: "alicloud"
page_title: "Alicloud: alicloud_alb_rule"
sidebar_current: "docs-alicloud-resource-alb-rule"
description: |-
  Provides a Alicloud Application Load Balancer (ALB) Rule resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_alb\_rule

Provides a Application Load Balancer (ALB) Rule resource.

For information about Application Load Balancer (ALB) Rule and how to use it, see [What is Rule](https://www.alibabacloud.com/help/doc-detail/214375.htm).

-> **NOTE:** Available in v1.133.0+.

-> **NOTE:** This version only supports forwarding rules in the request direction.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "example_name",
    });
    const dataAlicloudAlbZonesDefault =
      new alicloud.dataAlicloudAlbZones.DataAlicloudAlbZones(
        this,
        "default",
        {}
      );
    const dataAlicloudVpcsDefault =
      new alicloud.dataAlicloudVpcs.DataAlicloudVpcs(this, "default_2", {
        nameRegex: "default-NODELETING",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVpcsDefault.overrideLogicalId("default");
    const dataAlicloudVswitchesDefault1 =
      new alicloud.dataAlicloudVswitches.DataAlicloudVswitches(
        this,
        "default_1",
        {
          vpcId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
          ),
          zoneId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudAlbZonesDefault.zones, ["0", "id"])
          ),
        }
      );
    const dataAlicloudVswitchesDefault2 =
      new alicloud.dataAlicloudVswitches.DataAlicloudVswitches(
        this,
        "default_2_4",
        {
          vpcId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
          ),
          zoneId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudAlbZonesDefault.zones, ["1", "id"])
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVswitchesDefault2.overrideLogicalId("default_2");
    const alicloudAlbServerGroupDefault =
      new alicloud.albServerGroup.AlbServerGroup(this, "default_5", {
        healthCheckConfig: {
          healthCheckEnabled: cdktf.Token.asBoolean("false"),
        },
        protocol: "HTTP",
        serverGroupName: name.stringValue,
        stickySessionConfig: {
          stickySessionEnabled: cdktf.Token.asBoolean("false"),
        },
        vpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.vpcs, ["0", "id"])
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudAlbServerGroupDefault.overrideLogicalId("default");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudVswitchVswitch1Count = cdktf.TerraformCount.of(
      cdktf.Token.asNumber(
        cdktf.conditional(
          cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault1.ids), 0),
          0,
          1
        )
      )
    );
    const alicloudVswitchVswitch1 = new alicloud.vswitch.Vswitch(
      this,
      "vswitch_1",
      {
        cidrBlock: cdktf.Fn.cidrsubnet(
          cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.vpcs, [
              "0",
              "cidr_block",
            ])
          ),
          8,
          2
        ),
        vpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
        ),
        vswitchName: name.stringValue,
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudAlbZonesDefault.zones, ["0", "id"])
        ),
        count: alicloudVswitchVswitch1Count,
      }
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudVswitchVswitch2Count = cdktf.TerraformCount.of(
      cdktf.Token.asNumber(
        cdktf.conditional(
          cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault2.ids), 0),
          0,
          1
        )
      )
    );
    const alicloudVswitchVswitch2 = new alicloud.vswitch.Vswitch(
      this,
      "vswitch_2",
      {
        cidrBlock: cdktf.Fn.cidrsubnet(
          cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.vpcs, [
              "0",
              "cidr_block",
            ])
          ),
          8,
          4
        ),
        vpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
        ),
        vswitchName: name.stringValue,
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudAlbZonesDefault.zones, ["1", "id"])
        ),
        count: alicloudVswitchVswitch2Count,
      }
    );
    const alicloudAlbLoadBalancerDefault =
      new alicloud.albLoadBalancer.AlbLoadBalancer(this, "default_8", {
        addressAllocatedMode: "Fixed",
        addressType: "Internet",
        loadBalancerBillingConfig: {
          payType: "PayAsYouGo",
        },
        loadBalancerEdition: "Standard",
        loadBalancerName: name.stringValue,
        vpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
        ),
        zoneMappings: [
          {
            vswitchId: cdktf.Token.asString(
              cdktf.conditional(
                cdktf.Op.gt(
                  cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault1.ids),
                  0
                ),
                cdktf.propertyAccess(dataAlicloudVswitchesDefault1.ids, ["0"]),
                cdktf.propertyAccess(
                  cdktf.Fn.concat([
                    cdktf.propertyAccess(alicloudVswitchVswitch1, ["*", "id"]),
                    [""],
                  ]),
                  ["0"]
                )
              )
            ),
            zoneId: cdktf.Token.asString(
              cdktf.propertyAccess(dataAlicloudAlbZonesDefault.zones, [
                "0",
                "id",
              ])
            ),
          },
          {
            vswitchId: cdktf.Token.asString(
              cdktf.conditional(
                cdktf.Op.gt(
                  cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault2.ids),
                  0
                ),
                cdktf.propertyAccess(dataAlicloudVswitchesDefault2.ids, ["0"]),
                cdktf.propertyAccess(
                  cdktf.Fn.concat([
                    cdktf.propertyAccess(alicloudVswitchVswitch2, ["*", "id"]),
                    [""],
                  ]),
                  ["0"]
                )
              )
            ),
            zoneId: cdktf.Token.asString(
              cdktf.propertyAccess(dataAlicloudAlbZonesDefault.zones, [
                "1",
                "id",
              ])
            ),
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudAlbLoadBalancerDefault.overrideLogicalId("default");
    const alicloudAlbListenerDefault = new alicloud.albListener.AlbListener(
      this,
      "default_9",
      {
        defaultActions: [
          {
            forwardGroupConfig: {
              serverGroupTuples: [
                {
                  serverGroupId: cdktf.Token.asString(
                    alicloudAlbServerGroupDefault.id
                  ),
                },
              ],
            },
            type: "ForwardGroup",
          },
        ],
        listenerDescription: name.stringValue,
        listenerPort: 8080,
        listenerProtocol: "HTTP",
        loadBalancerId: cdktf.Token.asString(alicloudAlbLoadBalancerDefault.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudAlbListenerDefault.overrideLogicalId("default");
    const alicloudAlbRuleDefault = new alicloud.albRule.AlbRule(
      this,
      "default_10",
      {
        listenerId: cdktf.Token.asString(alicloudAlbListenerDefault.id),
        priority: cdktf.Token.asNumber("555"),
        ruleActions: [
          {
            forwardGroupConfig: {
              serverGroupTuples: [
                {
                  serverGroupId: cdktf.Token.asString(
                    alicloudAlbServerGroupDefault.id
                  ),
                },
              ],
            },
            order: cdktf.Token.asNumber("9"),
            type: "ForwardGroup",
          },
        ],
        ruleConditions: [
          {
            cookieConfig: {
              values: [
                {
                  key: "created",
                  value: "tf",
                },
              ],
            },
            type: "Cookie",
          },
        ],
        ruleName: name.stringValue,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudAlbRuleDefault.overrideLogicalId("default");
  }
}

```

## Argument Reference

The following arguments are supported:

* `dryRun` - (Optional) Specifies whether to precheck this request.
* `listenerId` - (Required, ForceNew) The ID of the listener to which the forwarding rule belongs.
* `priority` - (Required) The priority of the rule. Valid values: 1 to 10000. A smaller value indicates a higher priority. **Note*:* The priority of each rule within the same listener must be unique.
* `ruleActions` - (Required) The actions of the forwarding rules. See the following `Block rule_actions`.
* `ruleConditions` - (Required) The conditions of the forwarding rule. See the following `Block rule_conditions`.
* `ruleName` - (Required) The name of the forwarding rule. The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (_), and hyphens (-). The name must start with a letter.
* `direction` - (Optional, ForceNew, Computed, Available in 1.205.0+) The direction to which the forwarding rule is applied. Default value: `request`. Valid values:
  - `request`: The forwarding rule is applied to the client requests received by ALB.
  - `response`: The forwarding rule is applied to the responses returned by backend servers.

### Block rule_conditions

The rule_conditions supports the following: 

* `type` - (Required) The type of the forwarding rule. Valid values: `header`, `host`, `path`,  `cookie`, `queryString`, `method` and `sourceIp`.
  * `host`: Requests are forwarded based on the domain name. 
  * `path`: Requests are forwarded based on the path. 
  * `header`: Requests are forwarded based on the HTTP header field. 
  * `queryString`: Requests are forwarded based on the query string. 
  * `method`: Request are forwarded based on the request method. 
  * `cookie`: Requests are forwarded based on the cookie.
  * `sourceIp`: Requests are forwarded based on the source ip. **NOTE:** The `sourceIp` option is available in 1.162.0+.
* `headerConfig` - (Optional) The configuration of the header field. See the following `Block header_config`.
* `cookieConfig` - (Optional) The configuration of the cookie. See the following `Block cookie_config`.
* `hostConfig` - (Optional) The configuration of the host field. See the following `Block host_config`.
* `methodConfig` - (Optional) The configuration of the request method. See the following `Block method_config`.
* `pathConfig` - (Optional) The configuration of the path for the request to be forwarded. See the following `Block path_config`.
* `queryStringConfig` - (Optional) The configuration of the query string. See the following `Block query_string_config`.
* `sourceIpConfig` - (Optional, Available in 1.162.0+) The Based on source IP traffic matching. Required and valid when Type is SourceIP. See the following `Block source_ip_config`.

#### Block header_config

The header_config supports the following:

* `key` - (Optional) The key of the header field. The key must be 1 to 40 characters in length, and can contain letters, digits, hyphens (-) and underscores (_). The key does not support Cookie or Host.
* `values` - (Optional, Array) The value of the header field. The value must be 1 to 128 characters in length, and can contain lowercase letters, printable ASCII characters whose values are ch >= 32 && ch < 127, asterisks (*), and question marks (?). The value cannot start or end with a space.

#### Block cookie_config

The cookie_config supports the following: 

* `values` - (Optional, Array) The configuration of the cookie.

#### Block host_config

The host_config supports the following:

* `values` - (Optional, Array) The name of the host. **Note: ** The host name must meet the following rules: The hostname must be 3 to 128 characters in length, and can contain lowercase letters, digits, hyphens (-), periods (.), asterisks (*), and question marks (?). The host name must contain at least one period (.), and cannot start or end with a period (.). The rightmost field can contain only letters and wildcards, and cannot contain digits or hyphens (-). Other fields cannot start or end with a hyphen (-). You can enter asterisks (*) and question marks (?) anywhere in a field.

#### Block method_config

The method_config supports the following:

* `values` - (Optional, Array) The request method. Valid values: `head`, `get`, `post`, `options`, `put`, `patch`, and `delete`.

#### Block path_config

The path_config supports the following:

* `values` - (Optional, Array) The path of the request to be forwarded. The path must be 1 to 128 characters in length and must start with a forward slash (/). The path can contain letters, digits, and the following special characters: $ - _ . + / & ~ @ :. It cannot contain the following special characters: " % # ; ! ( ) [ ] ^ , ". The value is case-sensitive, and can contain asterisks (*) and question marks (?).

#### Block source_ip_config

The source_ip_config supports the following:

* `values` - (Optional, Array) Add one or more IP addresses or IP address segments. You can add up to 5 forwarding rules in a SourceIp.

#### Block query_string_config

The query_string_config supports the following:

* `values` - (Optional, Array) The query string.
  * `key` - (Optional) The key must be 1 to 100 characters in length, and can contain lowercase letters, printable characters, asterisks (*), and question marks (?). The key cannot contain spaces or the following special characters: # [ ] { } \ | < > &.
  * `value` - (Optional) The value must be 1 to 128 characters in length, and can contain lowercase letters, printable characters, asterisks (*), and question marks (?). The value cannot contain spaces or the following special characters: # [ ] { } \ | < > &.

### Block rule_actions

The rule_actions supports the following: 

* `order` - (Required) The order of the forwarding rule actions. Valid values: 1 to 50000. The actions are performed in ascending order. You cannot leave this parameter empty. Each value must be unique.
* `type` - (Required) The action. Valid values: `forwardGroup`, `redirect`, `fixedResponse`, `rewrite`, `insertHeader`, `trafficLimit`, `trafficMirror` and `cors`.
**Note:**  The preceding actions can be classified into two types:  `finalType`: A forwarding rule can contain only one `finalType` action, which is executed last. This type of action can contain only one `forwardGroup`, `redirect` or `fixedResponse` action. `extType`: A forwarding rule can contain one or more `extType` actions, which are executed before `finalType` actions and need to coexist with the `finalType` actions. This type of action can contain multiple `insertHeader` actions or one `rewrite` action.
**NOTE:** The `trafficLimit` and `trafficMirror` option is available in 1.162.0+.
**NOTE:** From version 1.205.0+, `type` can be set to `cors`.
* `fixedResponseConfig` - (Optional) The configuration of the fixed response. See the following `Block fixed_response_config`.
* `insertHeaderConfig` - (Optional) The configuration of the inserted header field. See the following `Block insert_header_config`.
* `redirectConfig` - (Optional) The configuration of the external redirect action. See the following `Block redirect_config`.
* `rewriteConfig` - (Optional) The redirect action within ALB. See the following `Block rewrite_config`.
* `forwardGroupConfig` - (Optional) The forward response action within ALB. See the following `Block forward_group_config`.
* `trafficLimitConfig` - (Optional, Available in 1.162.0+) The Flow speed limit. See the following `Block traffic_limit_config`.
* `trafficMirrorConfig` - (Optional, Available in 1.162.0+) The Traffic mirroring. See the following `Block traffic_mirror_config`.
* `corsConfig` - (Optional, Available in 1.205.0+) Request forwarding based on CORS. See the following `Block cors_config`.

#### Block rewrite_config

The rewrite_config supports the following: 

* `host` - (Optional) The host name of the destination to which requests are redirected within ALB.  Valid values:  The host name must be 3 to 128 characters in length, and can contain letters, digits, hyphens (-), periods (.), asterisks (*), and question marks (?). The host name must contain at least one period (.), and cannot start or end with a period (.). The rightmost domain label can contain only letters, asterisks (*) and question marks (?) and cannot contain digits or hyphens (-). Other domain labels cannot start or end with a hyphen (-). You can include asterisks (*) and question marks (?) anywhere in a domain label. Default value: ${host}. You cannot use this value with other characters at the same time.
* `path` - (Optional) The path to which requests are to be redirected within ALB.  Valid values: The path must be 1 to 128 characters in length, and start with a forward slash (/). The path can contain letters, digits, asterisks (*), question marks (?)and the following special characters: $ - _ . + / & ~ @ :. It cannot contain the following special characters: " % # ; ! ( ) [ ] ^ , ”. The path is case-sensitive.  Default value: ${path}. This value can be used only once. You can use it with a valid string.
* `query` - (Optional) The query string of the request to be redirected within ALB.  The query string must be 1 to 128 characters in length, can contain letters and printable characters. It cannot contain the following special characters: # [ ] { } \ | < > &.  Default value: ${query}. This value can be used only once. You can use it with a valid string.

#### Block redirect_config

The redirect_config supports the following: 

* `host` - (Optional) The host name of the destination to which requests are directed.  The host name must meet the following rules:  The host name must be 3 to 128 characters in length, and can contain letters, digits, hyphens (-), periods (.), asterisks (*), and question marks (?). The host name must contain at least one period (.), and cannot start or end with a period (.). The rightmost domain label can contain only letters, asterisks (*) and question marks (?) and cannot contain digits or hyphens (-). Other domain labels cannot start or end with a hyphen (-). You can include asterisks (*) and question marks (?) anywhere in a domain label. Default value: ${host}. You cannot use this value with other characters at the same time.
* `httpCode` - (Optional) The redirect method. Valid values:301, 302, 303, 307, and 308.
* `path` - (Optional) The path of the destination to which requests are directed.  Valid values: The path must be 1 to 128 characters in length, and start with a forward slash (/). The path can contain letters, digits, asterisks (*), question marks (?) and the following special characters: $ - _ . + / & ~ @ :. It cannot contain the following special characters: " % # ; ! ( ) [ ] ^ , ”. The path is case-sensitive.  Default value: ${path}. You can also reference ${host}, ${protocol}, and ${port}. Each variable can appear at most once. You can use the preceding variables at the same time, or use them with a valid string.
* `port` - (Optional) The port of the destination to which requests are redirected.  Valid values: 1 to 63335.  Default value: ${port}. You cannot use this value together with other characters at the same time.
* `protocol` - (Optional) The protocol of the requests to be redirected.  Valid values: HTTP and HTTPS.  Default value: ${protocol}. You cannot use this value together with other characters at the same time.  Note HTTPS listeners can redirect only HTTPS requests.
* `query` - (Optional) The query string of the request to be redirected.  The query string must be 1 to 128 characters in length, can contain letters and printable characters. It cannot contain the following special characters: # [ ] { } \ | < > &.  Default value: ${query}. You can also reference ${host}, ${protocol}, and ${port}. Each variable can appear at most once. You can use the preceding variables at the same time, or use them together with a valid string.

#### Block insert_header_config

The insert_header_config supports the following: 

* `key` - (Optional) The name of the inserted header field. The name must be 1 to 40 characters in length, and can contain letters, digits, underscores (_), and hyphens (-). You cannot use the same name in InsertHeader.  Note You cannot use Cookie or Host in the name.
* `value` - (Optional) The content of the inserted header field:  If the ValueType parameter is set to SystemDefined, the following values are used:  ClientSrcPort: the port of the client ClientSrcIp: the IP address of the client Protocol: the protocol used by client requests (HTTP or HTTPS) SLBId: the ID of the ALB instance SLBPort: the listener port of the ALB instance If the ValueType parameter is set to UserDefined: The header value must be 1 to 128 characters in length, and can contain lowercase letters, printable characters whose ASCII value is ch >= 32 && ch < 127, and wildcards such as asterisks (*) and question marks (?). The header value cannot start or end with a space.  If the ValueType parameter is set to ReferenceHeader: The header value must be 1 to 128 characters in length, and can contain lowercase letters, digits, underscores (_), and hyphens (-). Valid values: `clientSrcPort`, `clientSrcIp`, `protocol`, `slbId`, `slbPort`, `userDefined`.
* `valueType` - (Optional) Valid values:  UserDefined: a custom value ReferenceHeader: uses a field of the user request header. SystemDefined: a system value.

#### Block fixed_response_config

The fixed_response_config supports the following: 

* `content` - (Optional) The fixed response. The response cannot exceed 1 KB in size and can contain only ASCII characters.
* `contentType` - (Optional) The format of the fixed response.  Valid values: `text/plain`, `text/css`, `text/html`, `application/javascript`, and `application/json`.
* `httpCode` - (Optional) The HTTP status code of the response. The code must be an `http2Xx`, `http4Xx` or `http5XxX` is a digit.

#### Block forward_group_config

The forward_group_config supports the following:

* `serverGroupTuples` - (Optional, Array) The destination server group to which requests are forwarded.
  * `serverGroupId` - (Optional) The ID of the destination server group to which requests are forwarded.
  * `weight` - (Optional, Computed, Available in 1.162.0+) The Weight of server group. Default value: `100`. **NOTE:** This attribute is required when the number of `serverGroupTuples` is greater than 2.
* `serverGroupStickySession` - (Optional, Computed, Available in 1.179.0+) The configuration of session persistence for server groups.
  * `enabled` - (Optional, Computed, Available in 1.179.0+) Whether to enable session persistence.
  * `timeout` - (Optional, Computed, Available in 1.179.0+) The timeout period. Unit: seconds. Valid values: `1` to `86400`. Default value: `1000`.

#### Block traffic_limit_config

The traffic_limit_config supports the following:

* `qps` - (Optional) The Number of requests per second. Value range: 1~100000.

#### Block traffic_mirror_config

The traffic_mirror_config supports the following:

* `targetType` - (Optional) The Mirror target type.
* `mirrorGroupConfig` - (Optional) The Traffic is mirrored to the server group. See the following `Block mirror_group_config`.

#### Block mirror_group_config

The mirror_group_config supports the following:

* `serverGroupTuples` - (Optional, Array) The destination server group to which requests are forwarded.
* `serverGroupId` - (Optional) The ID of the destination server group to which requests are forwarded.

#### Block cors_config

The cors_config supports the following:

* `allowOrigin` - (Optional, Array) The allowed origins of CORS requests.
* `allowMethods` - (Optional, Array) The allowed HTTP methods for CORS requests. Valid values: `get`, `post`, `put`, `delete`, `head`, `options`, `patch`.
* `allowHeaders` - (Optional, Array) The allowed headers for CORS requests.
* `exposeHeaders` - (Optional, Array) The headers that can be exposed.
* `allowCredentials` - (Optional) Specifies whether credentials can be passed during CORS operations. Valid values: `on`, `off`.
* `maxAge` - (Optional) The maximum cache time of preflight requests in the browser. Unit: seconds. Valid values: `1` to `172800`.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of Rule.
* `status` - The status of the resource.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 2 mins) Used when create the Rule.
* `update` - (Defaults to 2 mins) Used when update the Rule.
* `delete` - (Defaults to 2 mins) Used when delete the Rule.

## Import

Application Load Balancer (ALB) Rule can be imported using the id, e.g.

```shell
$ terraform import alicloud_alb_rule.example <id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-a72e6bf54798d3395d8359a24da4eb345d16366c7bab118699c4d4044b82a004 -->