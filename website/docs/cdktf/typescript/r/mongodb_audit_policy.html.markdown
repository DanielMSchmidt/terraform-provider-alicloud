---
subcategory: "MongoDB"
layout: "alicloud"
page_title: "Alicloud: alicloud_mongodb_audit_policy"
sidebar_current: "docs-alicloud-resource-mongodb-audit-policy"
description: |-
  Provides a Alicloud MongoDB Audit Policy resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_mongodb\_audit\_policy

Provides a MongoDB Audit Policy resource.

For information about MongoDB Audit Policy and how to use it, see [What is Audit Policy](https://www.alibabacloud.com/help/doc-detail/131941.html).

-> **NOTE:** Available in v1.148.0+.

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    const dataAlicloudMongodbZonesDefault =
      new alicloud.dataAlicloudMongodbZones.DataAlicloudMongodbZones(
        this,
        "default",
        {}
      );
    const dataAlicloudVpcsDefault =
      new alicloud.dataAlicloudVpcs.DataAlicloudVpcs(this, "default_1", {
        nameRegex: "default-NODELETING",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVpcsDefault.overrideLogicalId("default");
    const dataAlicloudVswitchesDefault =
      new alicloud.dataAlicloudVswitches.DataAlicloudVswitches(
        this,
        "default_2",
        {
          vpcId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
          ),
          zoneId: cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudMongodbZonesDefault.zones, [
              "0",
              "id",
            ])
          ),
        }
      );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAlicloudVswitchesDefault.overrideLogicalId("default");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const alicloudVswitchVswitchCount = cdktf.TerraformCount.of(
      cdktf.Token.asNumber(
        cdktf.conditional(
          cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault.ids), 0),
          0,
          1
        )
      )
    );
    const alicloudVswitchVswitch = new alicloud.vswitch.Vswitch(
      this,
      "vswitch",
      {
        cidrBlock: cdktf.Fn.cidrsubnet(
          cdktf.Token.asString(
            cdktf.propertyAccess(dataAlicloudVpcsDefault.vpcs, [
              "0",
              "cidr_block",
            ])
          ),
          8,
          8
        ),
        vpcId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudVpcsDefault.ids, ["0"])
        ),
        vswitchName: "subnet-for-local-test",
        zoneId: cdktf.Token.asString(
          cdktf.propertyAccess(dataAlicloudMongodbZonesDefault.zones, [
            "0",
            "id",
          ])
        ),
        count: alicloudVswitchVswitchCount,
      }
    );
    const alicloudMongodbInstanceDefault =
      new alicloud.mongodbInstance.MongodbInstance(this, "default_4", {
        dbInstanceClass: "dds.mongo.mid",
        dbInstanceStorage: 10,
        engineVersion: "3.4",
        name: "example_value",
        tags: {
          Created: "TF",
          For: "acceptance test",
        },
        vswitchId: cdktf.Token.asString(
          cdktf.conditional(
            cdktf.Op.gt(cdktf.Fn.lengthOf(dataAlicloudVswitchesDefault.ids), 0),
            cdktf.propertyAccess(dataAlicloudVswitchesDefault.ids, ["0"]),
            cdktf.propertyAccess(
              cdktf.Fn.concat([
                cdktf.propertyAccess(alicloudVswitchVswitch, ["*", "id"]),
                [""],
              ]),
              ["0"]
            )
          )
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudMongodbInstanceDefault.overrideLogicalId("default");
    new alicloud.mongodbAuditPolicy.MongodbAuditPolicy(this, "example", {
      auditStatus: "disabled",
      dbInstanceId: cdktf.Token.asString(alicloudMongodbInstanceDefault.id),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `dbInstanceId` - (Required, ForceNew) The ID of the instance.
* `auditStatus` - (Required) The status of the audit log. Valid values: `disabled`, `enable`.
* `storagePeriod` - (Optional) The retention period of audit logs. Valid values: `1` to `30`. Default value: `30`.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of Audit Policy. Its value is same as `dbInstanceId`.

### Timeouts

-> **NOTE:** Available in 1.161.0+.

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 5 mins) Used when create the Audit Policy.
* `update` - (Defaults to 5 mins) Used when update the Audit Policy.

## Import

MongoDB Audit Policy can be imported using the id, e.g.

```shell
$ terraform import alicloud_mongodb_audit_policy.example <db_instance_id>
```
<!-- cache-key: cdktf-0.17.0-pre.15 input-26470573ed12368dad9a7278789f21e756085744b369694ffa096edf1b11112b -->