---
subcategory: "VPC"
layout: "alicloud"
page_title: "Alicloud: alicloud_route_table_attachment"
sidebar_current: "docs-alicloud-resource-route-table-attachment"
description: |-
  Provides an Alicloud Route Table Attachment resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_route\_table\_attachment

Provides an Alicloud Route Table Attachment resource for associating Route Table to VSwitch Instance.

-> **NOTE:** Terraform will auto build route table attachment while it uses `alicloudRouteTableAttachment` to build a route table attachment resource.

For information about route table and how to use it, see [What is Route Table](https://www.alibabacloud.com/help/doc-detail/87057.htm).

## Example Usage

Basic Usage

```typescript
import * as constructs from "constructs";
import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as alicloud from "./.gen/providers/alicloud";
class MyConvertedCode extends cdktf.TerraformStack {
  constructor(scope: constructs.Construct, name: string) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const name = new cdktf.TerraformVariable(this, "name", {
      default: "route-table-attachment-example-name",
    });
    const alicloudVpcFoo = new alicloud.vpc.Vpc(this, "foo", {
      cidrBlock: "172.16.0.0/12",
      name: name.stringValue,
    });
    const dataAlicloudZonesDefault =
      new alicloud.dataAlicloudZones.DataAlicloudZones(this, "default", {
        availableResourceCreation: "VSwitch",
      });
    const alicloudRouteTableFoo = new alicloud.routeTable.RouteTable(
      this,
      "foo_3",
      {
        description: "route_table_attachment",
        routeTableName: name.stringValue,
        vpcId: cdktf.Token.asString(alicloudVpcFoo.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudRouteTableFoo.overrideLogicalId("foo");
    const alicloudVswitchFoo = new alicloud.vswitch.Vswitch(this, "foo_4", {
      cidrBlock: "172.16.0.0/21",
      name: name.stringValue,
      vpcId: cdktf.Token.asString(alicloudVpcFoo.id),
      zoneId: cdktf.Token.asString(
        cdktf.propertyAccess(dataAlicloudZonesDefault.zones, ["0", "id"])
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudVswitchFoo.overrideLogicalId("foo");
    const alicloudRouteTableAttachmentFoo =
      new alicloud.routeTableAttachment.RouteTableAttachment(this, "foo_5", {
        routeTableId: cdktf.Token.asString(alicloudRouteTableFoo.id),
        vswitchId: cdktf.Token.asString(alicloudVswitchFoo.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    alicloudRouteTableAttachmentFoo.overrideLogicalId("foo");
  }
}

```
## Argument Reference

The following arguments are supported:

* `vswitchId` - (Required, ForceNew) The vswitch_id of the route table attachment, the field can't be changed.
* `routeTableId` - (Required, ForceNew) The route_table_id of the route table attachment, the field can't be changed.

## Attributes Reference

The following attributes are exported:

* `id` - The ID of the route table attachment id and formates as `<route_table_id>:<vswitch_id>`.

## Import

The route table attachment can be imported using the id, e.g.

```shell
$ terraform import alicloud_route_table_attachment.foo vtb-abc123456:vsw-abc123456
```


<!-- cache-key: cdktf-0.17.0-pre.15 input-03d0779ca30657a0aca992942c6b9c738191abb4da71c7f4319f5742133a8eac -->