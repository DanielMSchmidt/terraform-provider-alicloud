---
subcategory: "E-MapReduce (EMR)"
layout: "alicloud"
page_title: "Alicloud: alicloud_emr_clusters"
sidebar_current: "docs-alicloud-datasource-emr-clusters"
description: |-
  Provides a list of Emr Clusters to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_emr\_clusters

This data source provides the Emr Clusters of the current Alibaba Cloud user.

-> **DEPRECATED:**  This datasource has been deprecated from version `1.204.0`. Please use new datasource [emrv2_clusters](https://registry.terraform.io/providers/aliyun/alicloud/latest/docs/data-sources/emrv2_clusters).

-> **NOTE:** Available in v1.146.0+.

## Example Usage

Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        name = cdktf.TerraformVariable(self, "name",
            default="tf-testAccClusters"
        )
        alicloud_ram_role_default = alicloud.ram_role.RamRole(self, "default",
            description="this is a role test.",
            document="    {\n        \"Statement\": [\n        {\n            \"Action\": \"sts:AssumeRole\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n            \"Service\": [\n                \"emr.aliyuncs.com\",\n                \"ecs.aliyuncs.com\"\n            ]\n            }\n        }\n        ],\n        \"Version\": \"1\"\n    }\n",
            force=True,
            name=name.string_value
        )
        data_alicloud_emr_clusters_ids =
        alicloud.data_alicloud_emr_clusters.DataAlicloudEmrClusters(self, "ids")
        data_alicloud_emr_main_versions_default =
        alicloud.data_alicloud_emr_main_versions.DataAlicloudEmrMainVersions(self, "default_3")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_emr_main_versions_default.override_logical_id("default")
        data_alicloud_resource_manager_resource_groups_default =
        alicloud.data_alicloud_resource_manager_resource_groups.DataAlicloudResourceManagerResourceGroups(self, "default_4",
            status="OK"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_resource_manager_resource_groups_default.override_logical_id("default")
        data_alicloud_vpcs_default =
        alicloud.data_alicloud_vpcs.DataAlicloudVpcs(self, "default_5",
            name_regex="default-NODELETING"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vpcs_default.override_logical_id("default")
        cdktf.TerraformOutput(self, "emr_cluster_id_1",
            value=cdktf.property_access(data_alicloud_emr_clusters_ids.clusters, ["0", "id"
            ])
        )
        alicloud_security_group_default =
        alicloud.security_group.SecurityGroup(self, "default_7",
            name=name.string_value,
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_security_group_default.override_logical_id("default")
        data_alicloud_emr_instance_types_default =
        alicloud.data_alicloud_emr_instance_types.DataAlicloudEmrInstanceTypes(self, "default_8",
            cluster_type=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_emr_main_versions_default.main_versions, ["0", "cluster_types", "0"])),
            destination_resource="InstanceType",
            instance_charge_type="PostPaid",
            support_local_storage=False,
            support_node_type=["MASTER", "CORE", "TASK"]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_emr_instance_types_default.override_logical_id("default")
        data_alicloud_vswitches_default =
        alicloud.data_alicloud_vswitches.DataAlicloudVswitches(self, "default_9",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_emr_instance_types_default.types, ["0", "zone_id"
                ]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vswitches_default.override_logical_id("default")
        data_alicloud_emr_disk_types_data_disk =
        alicloud.data_alicloud_emr_disk_types.DataAlicloudEmrDiskTypes(self, "data_disk",
            cluster_type=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_emr_main_versions_default.main_versions, ["0", "cluster_types", "0"])),
            destination_resource="DataDisk",
            instance_charge_type="PostPaid",
            instance_type=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_emr_instance_types_default.types, ["0", "id"
                ])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_emr_instance_types_default.types, ["0", "zone_id"
                ]))
        )
        data_alicloud_emr_disk_types_system_disk =
        alicloud.data_alicloud_emr_disk_types.DataAlicloudEmrDiskTypes(self, "system_disk",
            cluster_type=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_emr_main_versions_default.main_versions, ["0", "cluster_types", "0"])),
            destination_resource="SystemDisk",
            instance_charge_type="PostPaid",
            instance_type=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_emr_instance_types_default.types, ["0", "id"
                ])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_emr_instance_types_default.types, ["0", "zone_id"
                ]))
        )
        alicloud_emr_cluster_default = alicloud.emr_cluster.EmrCluster(self, "default_12",
            charge_type="PostPaid",
            cluster_type=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_emr_main_versions_default.main_versions, ["0", "cluster_types", "0"])),
            emr_ver=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_emr_main_versions_default.main_versions, ["0", "emr_version"])),
            high_availability_enable=True,
            host_group=[EmrClusterHostGroup(
                disk_capacity=cdktf.Token.as_string(
                    cdktf.conditional(
                        cdktf.Op.gt(
                            cdktf.property_access(data_alicloud_emr_disk_types_data_disk.types, ["0", "min"
                            ]), 160),
                        cdktf.property_access(data_alicloud_emr_disk_types_data_disk.types, ["0", "min"
                        ]), 160)),
                disk_count="1",
                disk_type=cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_emr_disk_types_data_disk.types, ["0", "value"
                    ])),
                host_group_name="master_group",
                host_group_type="MASTER",
                instance_type=cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_emr_instance_types_default.types, ["0", "id"
                    ])),
                node_count="2",
                sys_disk_capacity=cdktf.Token.as_string(
                    cdktf.conditional(
                        cdktf.Op.gt(
                            cdktf.property_access(data_alicloud_emr_disk_types_system_disk.types, ["0", "min"]), 160),
                        cdktf.property_access(data_alicloud_emr_disk_types_system_disk.types, ["0", "min"
                        ]), 160)),
                sys_disk_type=cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_emr_disk_types_system_disk.types, ["0", "value"
                    ]))
            ), EmrClusterHostGroup(
                disk_capacity=cdktf.Token.as_string(
                    cdktf.conditional(
                        cdktf.Op.gt(
                            cdktf.property_access(data_alicloud_emr_disk_types_data_disk.types, ["0", "min"
                            ]), 160),
                        cdktf.property_access(data_alicloud_emr_disk_types_data_disk.types, ["0", "min"
                        ]), 160)),
                disk_count="4",
                disk_type=cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_emr_disk_types_data_disk.types, ["0", "value"
                    ])),
                host_group_name="core_group",
                host_group_type="CORE",
                instance_type=cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_emr_instance_types_default.types, ["0", "id"
                    ])),
                node_count="3",
                sys_disk_capacity=cdktf.Token.as_string(
                    cdktf.conditional(
                        cdktf.Op.gt(
                            cdktf.property_access(data_alicloud_emr_disk_types_system_disk.types, ["0", "min"]), 160),
                        cdktf.property_access(data_alicloud_emr_disk_types_system_disk.types, ["0", "min"
                        ]), 160)),
                sys_disk_type=cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_emr_disk_types_system_disk.types, ["0", "value"
                    ]))
            ), EmrClusterHostGroup(
                disk_capacity=cdktf.Token.as_string(
                    cdktf.conditional(
                        cdktf.Op.gt(
                            cdktf.property_access(data_alicloud_emr_disk_types_data_disk.types, ["0", "min"
                            ]), 160),
                        cdktf.property_access(data_alicloud_emr_disk_types_data_disk.types, ["0", "min"
                        ]), 160)),
                disk_count="4",
                disk_type=cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_emr_disk_types_data_disk.types, ["0", "value"
                    ])),
                host_group_name="task_group",
                host_group_type="TASK",
                instance_type=cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_emr_instance_types_default.types, ["0", "id"
                    ])),
                node_count="2",
                sys_disk_capacity=cdktf.Token.as_string(
                    cdktf.conditional(
                        cdktf.Op.gt(
                            cdktf.property_access(data_alicloud_emr_disk_types_system_disk.types, ["0", "min"]), 160),
                        cdktf.property_access(data_alicloud_emr_disk_types_system_disk.types, ["0", "min"
                        ]), 160)),
                sys_disk_type=cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_emr_disk_types_system_disk.types, ["0", "value"
                    ]))
            )
            ],
            is_open_public_ip=True,
            master_pwd="ABCtest1234!",
            name=name.string_value,
            security_group_id=cdktf.Token.as_string(alicloud_security_group_default.id),
            ssh_enable=True,
            tags={
                "Created": "TF",
                "For": "acceptance test"
            },
            user_defined_emr_ecs_role=cdktf.Token.as_string(alicloud_ram_role_default.name),
            vswitch_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vswitches_default.ids, ["0"])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_emr_instance_types_default.types, ["0", "zone_id"
                ]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_emr_cluster_default.override_logical_id("default")
        data_alicloud_emr_clusters_name_regex =
        alicloud.data_alicloud_emr_clusters.DataAlicloudEmrClusters(self, "nameRegex",
            name_regex=cdktf.Token.as_string(alicloud_emr_cluster_default.name)
        )
        cdktf.TerraformOutput(self, "emr_cluster_id_2",
            value=cdktf.property_access(data_alicloud_emr_clusters_name_regex.clusters, ["0", "id"
            ])
        )
```

## Argument Reference

The following arguments are supported:

* `cluster_name` - (Optional, ForceNew) The cluster name.
* `cluster_type_list` - (Optional, ForceNew) The cluster type list.
* `create_type` - (Optional, ForceNew) How to create a cluster. Valid values: `ON-DEMAND`, `MANUAL`.
* `default_status` - (Optional, ForceNew) The default status.
* `deposit_type` - (Optional, ForceNew) The hosting type of the cluster. Valid values: `HALF_MANAGED`, `MANAGED`.
* `enable_details` - (Optional) Default to `false`. Set it to `true` can output more details about resource attributes.
* `ids` - (Optional, ForceNew, Computed)  A list of Cluster IDs.
* `is_desc` - (Optional, ForceNew) The is desc.
* `machine_type` - (Optional, ForceNew) The host type of the cluster. The default is ECS. Valid values: `DOCKER`, `ECS`, `PYHSICAL_MACHINE`, `ECS_FROM_ECM_HOSTPOOL`.
* `name_regex` - (Optional, ForceNew) A regex string to filter results by Cluster name.
* `output_file` - (Optional) File name where to save data source results (after running `terraform plan`).
* `resource_group_id` - (Optional, ForceNew) The Resource Group ID.
* `status_list` - (Optional, ForceNew) The status list. Valid values: `ABNORMAL`, `CREATE_FAILED`, `CREATING`, `IDLE`, `RELEASED`, `RELEASE_FAILED`, `RELEASING`, `RUNNING`, `WAIT_FOR_PAY`.
* `vpc_id` - (Optional, ForceNew) The VPC ID.

## Argument Reference

The following attributes are exported in addition to the arguments listed above:

* `names` - A list of Cluster names.
* `clusters` - A list of Emr Clusters. Each element contains the following attributes:
	* `access_info` - Cluster connection information.
	  * `zk_links` - Link address information list of ZooKeeper.
			* `link` - The access link address of ZooKeeper.
			* `port` - The port of ZooKeeper.
	* `auto_scaling_allowed` - Whether flexible expansion is allowed.
	* `auto_scaling_by_load_allowed` - Whether to allow expansion by load.
	* `auto_scaling_enable` - Whether to enable elastic expansion.
	* `auto_scaling_spot_with_limit_allowed` - Whether to allow the use of elastic scaling bidding instances.
	* `bootstrap_action_list` - List of boot actions.
		* `name` - The name of the boot operation.
		* `path` - Boot operation script path.
		* `arg` - Parameters of the boot operation.
	* `bootstrap_failed` - The result of the boot operation.
	* `cluster_id` - The first ID of the resource.
	* `cluster_name` - The ClusterName.
	* `create_resource` - Cluster tag, no need to pay attention.
	* `create_time` - The creation time of the resource.
	* `create_type` - How to create a cluster.
	* `deposit_type` - The hosting type of the cluster.
	* `eas_enable` - High security cluster.
	* `expired_time` - The expiration time of the cluster.
	* `extra_info` - Additional information for Stack.
	* `high_availability_enable` - High availability cluster.
	* `host_group_list` - List of cluster machine groups.
		* `host_group_name` - The name of the machine group.
		* `instance_type` - Machine Group instance.
		* `nodes` - Machine node.
			* `create_time` - Creation time.
			* `disk_infos` - Disk information.
				* `device` - The disk name.
				* `disk_id` - The ID of the disk.
				* `disk_name` - The disk name.
				* `size` - Disk capacity.
				* `type` - Disk type.
			* `expired_time` - Timeout time.
			* `inner_ip` - The Intranet IP of the EMR.
			* `emr_expired_time` - The timeout of the EMR.
			* `instance_id` - The ID of the ECS instance.
			* `pub_ip` - Public IP address.
			* `status` - Status.
			* `support_ipv6` - Whether IPV6 is supported.
			* `zone_id` - The zone ID.
		* `band_width` - Bandwidth.
		* `disk_capacity` - Data disk capacity.
		* `disk_count` - The number of data disks.
		* `disk_type` - System disk type:
		* `memory_capacity` - Memory size.
		* `node_count` - The number of machine group nodes.
		* `period` - Package year and month time (days).
		* `charge_type` - Payment Type.
		* `cpu_core` - The number of CPU cores.
		* `host_group_change_type` - The current operation type of the machine Group:
		* `host_group_id` - The ID of the machine group.
		* `host_group_type` - Role of host in cluster:
	* `host_pool_info` - Machine pool information.
		* `hp_biz_id` - Machine pool ID.
		* `hp_name` - The name of the machine pool.
	* `image_id` - The ID of the image used to create the cluster.
	* `local_meta_db` - Whether to use Hive local Metabase.
	* `machine_type` - The host type of the cluster. The default is ECS.
	* `meta_store_type` - Metadata type:
	* `net_type` - Cluster network type.
	* `payment_type` - The payment type of the resource.
	* `period` - The package year and month time of the machine group. The Valid Values : `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`, `12`, `24`, `36`.
	* `relate_cluster_info` - The information of the primary cluster associated with the Gateway.
		* `cluster_id` - The ID of the associated cluster.
		* `cluster_name` - The name of the associated cluster.
		* `cluster_type` - The cluster type of the associated cluster.
		* `status` - The status  of the associated cluster.
	* `resize_disk_enable` - Whether to allow disk expansion:
	* `running_time` - The time (in seconds) that has been running.
	* `security_group_id` - The ID of the security group.
	* `security_group_name` - The name of the security group.
	* `software_info` - Service list.
		* `cluster_type` - Cluster type:
		* `emr_ver` - E-MapReduce version number.
		* `softwares` - Service list.
			* `display_name` - The name of the service.
			* `name` - The internal name of the service.
			* `only_display` - Whether it shows.
			* `start_tpe` - Startup type.
			* `version` - Service version.
	* `start_time` - Cluster startup time.
	* `status` - The cluster status.
	* `stop_time` - Cluster stop time.
	* `tags` - A mapping of tags to assign to the resource.
	* `user_defined_emr_ecs_role` - The EMR permission name used.
	* `user_id` - The user ID.
	* `vpc_id` - The VPC ID.
	* `vswitch_id` - The vswitch id.
	* `zone_id` - The zone ID.
<!-- cache-key: cdktf-0.17.0-pre.15 input-45d9e1838ec05e010c39963c9b853d74334beccc3d25375af9f67b1eed2c06bc -->