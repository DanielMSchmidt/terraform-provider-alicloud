---
subcategory: "RAM"
layout: "alicloud"
page_title: "Alicloud: alicloud_ram_policy_document"
sidebar_current: "docs-alicloud-datasource-ram-policy-document"
description: |-
    Generates a RAM policy document to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_ram\_policy\_document

This data source Generates a RAM policy document of the current Alibaba Cloud user.

-> **NOTE:** Available in v1.184.0+.

## Example Usage

### Basic Example

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_alicloud_ram_policy_document_basic_example =
        alicloud.data_alicloud_ram_policy_document.DataAlicloudRamPolicyDocument(self, "basic_example",
            statement=[DataAlicloudRamPolicyDocumentStatement(
                action=["oss:*"],
                effect="Allow",
                resource=["acs:oss:*:*:myphotos", "acs:oss:*:*:myphotos/*"]
            )
            ],
            version="1"
        )
        alicloud.ram_policy.RamPolicy(self, "default",
            force=True,
            policy_document=cdktf.Token.as_string(data_alicloud_ram_policy_document_basic_example.document),
            policy_name="tf-test"
        )
```

`data.alicloud_ram_policy_document.basic_example.document` will evaluate to:

```json
{
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "oss:*",
      "Resource": [
        "acs:oss:*:*:myphotos",
        "acs:oss:*:*:myphotos/*"
      ]
    }
  ],
  "Version": "1"
}
```

### Example Multiple Condition Keys and Values

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_alicloud_ram_policy_document_multiple_condition =
        alicloud.data_alicloud_ram_policy_document.DataAlicloudRamPolicyDocument(self, "multiple_condition",
            statement=[DataAlicloudRamPolicyDocumentStatement(
                action=["oss:ListBuckets", "oss:GetBucketStat", "oss:GetBucketInfo", "oss:GetBucketTagging", "oss:GetBucketAcl"
                ],
                effect="Allow",
                resource=["acs:oss:*:*:*"]
            ), DataAlicloudRamPolicyDocumentStatement(
                action=["oss:GetObject", "oss:GetObjectAcl"],
                effect="Allow",
                resource=["acs:oss:*:*:myphotos/hangzhou/2015/*"]
            ), DataAlicloudRamPolicyDocumentStatement(
                action=["oss:ListObjects"],
                condition=[DataAlicloudRamPolicyDocumentStatementCondition(
                    operator="StringLike",
                    values=["/"],
                    variable="oss:Delimiter"
                ), DataAlicloudRamPolicyDocumentStatementCondition(
                    operator="StringLike",
                    values=["", "hangzhou/", "hangzhou/2015/*"],
                    variable="oss:Prefix"
                )
                ],
                effect="Allow",
                resource=["acs:oss:*:*:myphotos"]
            )
            ],
            version="1"
        )
        alicloud.ram_policy.RamPolicy(self, "policy",
            force=True,
            policy_document=cdktf.Token.as_string(data_alicloud_ram_policy_document_multiple_condition.document),
            policy_name="tf-test-condition"
        )
```

`data.alicloud_ram_policy_document.multiple_condition.document` will evaluate to:

```json
{
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "oss:ListBuckets",
        "oss:GetBucketStat",
        "oss:GetBucketInfo",
        "oss:GetBucketTagging",
        "oss:GetBucketAcl"
      ],
      "Resource": "acs:oss:*:*:*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "oss:GetObject",
        "oss:GetObjectAcl"
      ],
      "Resource": "acs:oss:*:*:myphotos/hangzhou/2015/*"
    },
    {
      "Effect": "Allow",
      "Action": "oss:ListObjects",
      "Resource": "acs:oss:*:*:myphotos",
      "Condition": {
        "StringLike": {
          "oss:Delimiter": "/",
          "oss:Prefix": [
            "",
            "hangzhou/",
            "hangzhou/2015/*"
          ]
        }
      }
    }
  ],
  "Version": "1"
}
```

### Example Assume-Role Policy with RAM Principal

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_alicloud_ram_policy_document_ram_example =
        alicloud.data_alicloud_ram_policy_document.DataAlicloudRamPolicyDocument(self, "ram_example",
            statement=[DataAlicloudRamPolicyDocumentStatement(
                action=["sts:AssumeRole"],
                effect="Allow",
                principal=[DataAlicloudRamPolicyDocumentStatementPrincipal(
                    entity="RAM",
                    identifiers=["acs:ram::123456789012****:root"]
                )
                ]
            )
            ]
        )
        alicloud.ram_role.RamRole(self, "role",
            document=cdktf.Token.as_string(data_alicloud_ram_policy_document_ram_example.document),
            force=True,
            name="test-role-ram"
        )
```

`data.alicloud_ram_policy_document.ram_example.document` will evaluate to:

```json
{
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "sts:AssumeRole",
      "Principal": {
        "RAM": [
          "acs:ram::123456789012****:root"
        ]
      }
    }
  ],
  "Version": "1"
}
```

### Example Assume-Role Policy with Service Principal

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_alicloud_ram_policy_document_service_example =
        alicloud.data_alicloud_ram_policy_document.DataAlicloudRamPolicyDocument(self, "service_example",
            statement=[DataAlicloudRamPolicyDocumentStatement(
                action=["sts:AssumeRole"],
                effect="Allow",
                principal=[DataAlicloudRamPolicyDocumentStatementPrincipal(
                    entity="Service",
                    identifiers=["ecs.aliyuncs.com"]
                )
                ]
            )
            ]
        )
        alicloud.ram_role.RamRole(self, "role",
            document=cdktf.Token.as_string(data_alicloud_ram_policy_document_service_example.document),
            force=True,
            name="test-role-service"
        )
```

`data.alicloud_ram_policy_document.service_example.document` will evaluate to:

```json
{
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": [
          "ecs.aliyuncs.com"
        ]
      }
    }
  ],
  "Version": "1"
}
```

### Example Assume-Role Policy with Federated Principal

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_alicloud_ram_policy_document_federated_example =
        alicloud.data_alicloud_ram_policy_document.DataAlicloudRamPolicyDocument(self, "federated_example",
            statement=[DataAlicloudRamPolicyDocumentStatement(
                action=["sts:AssumeRole"],
                condition=[DataAlicloudRamPolicyDocumentStatementCondition(
                    operator="StringEquals",
                    values=["https://signin.aliyun.com/saml-role/sso"],
                    variable="saml:recipient"
                )
                ],
                effect="Allow",
                principal=[DataAlicloudRamPolicyDocumentStatementPrincipal(
                    entity="Federated",
                    identifiers=["acs:ram::123456789012****:saml-provider/testprovider"
                    ]
                )
                ]
            )
            ]
        )
        alicloud.ram_role.RamRole(self, "role",
            document=cdktf.Token.as_string(data_alicloud_ram_policy_document_federated_example.document),
            force=True,
            name="test-role-federated"
        )
```

`data.alicloud_ram_policy_document.federated_example.document` will evaluate to:

```json
{
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "sts:AssumeRole",
      "Principal": {
        "Federated": [
          "acs:ram::123456789012****:saml-provider/testprovider"
        ]
      },
      "Condition": {
        "StringEquals": {
          "saml:recipient": "https://signin.aliyun.com/saml-role/sso"
        }
      }
    }
  ],
  "Version": "1"
}
```

## Argument Reference

The following arguments are supported:

* `version` - (Optional) Version of the RAM policy document. Valid value is `1`. Default value is `1`.
* `statement` - (Optional) Statement of the RAM policy document. See the following `Block statement`.
* `output_file` - (Optional) File name where to save data source results (after running `terraform plan`).

#### Block statement

The statement supports the following:

* `effect` - (Optional) This parameter indicates whether or not the `action` is allowed. Valid values are `Allow` and `Deny`. Default value is `Allow`. If you want to create a RAM role policy document, it must be `Allow`.
* `action` - (Required) Action of the RAM policy document. If you want to create a RAM role policy document, it must be `["sts:AssumeRole"]`.
* `resource` - (Optional) List of specific objects which will be authorized. If you want to create a RAM policy document, it must be set.
* `principal` - (Optional) Principal of the RAM policy document. If you want to create a RAM role policy document, it must be set. See the following `Block principal`.
* `condition` - (Optional) Specifies the condition that are required for a policy to take effect. See the following `Block condition`.

#### Block principal

The principal supports the following:

* `entity` - (Required) The trusted entity. Valid values: `RAM`, `Service` and `Federated`.
* `identifiers` - (Required) The identifiers of the principal.

#### Block condition

The condition supports the following:

* `operator` - (Required) The operator of the condition.
* `variable` - (Required) The variable of the condition.
* `values` - (Required) The values of the condition.

## Attributes Reference

The following attributes are exported in addition to the arguments listed above:

* `document` - Standard policy document rendered based on the arguments above.
<!-- cache-key: cdktf-0.17.0-pre.15 input-b69c6bafc1c3daeab56db219541a51b4e22d3aeb2254f7f7f01812e7f2fc8dbb -->