---
subcategory: "Classic Load Balancer (SLB)"
layout: "alicloud"
page_title: "Alicloud: alicloud_slb_master_slave_server_groups"
sidebar_current: "docs-alicloud-datasource-slb-master-slave-server-groups"
description: |-
    Provides a list of master slave server groups related to a server load balancer to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_slb\_master\_slave\_server\_groups

This data source provides the master slave server groups related to a server load balancer.

-> **NOTE:** Available in 1.54.0+

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        name = cdktf.TerraformVariable(self, "name",
            default="tf-testAccSlbMasterSlaveServerGroupVpc"
        )
        alicloud_vpc_main = alicloud.vpc.Vpc(self, "main",
            cidr_block="172.16.0.0/16",
            name=name.string_value
        )
        data_alicloud_images_image =
        alicloud.data_alicloud_images.DataAlicloudImages(self, "image",
            most_recent=True,
            name_regex="^ubuntu_18.*64",
            owners="system"
        )
        data_alicloud_zones_default =
        alicloud.data_alicloud_zones.DataAlicloudZones(self, "default",
            available_disk_category="cloud_efficiency",
            available_resource_creation="VSwitch"
        )
        alicloud_security_group_group = alicloud.security_group.SecurityGroup(self, "group",
            name=name.string_value,
            vpc_id=cdktf.Token.as_string(alicloud_vpc_main.id)
        )
        alicloud_vswitch_main = alicloud.vswitch.Vswitch(self, "main_5",
            cidr_block="172.16.0.0/16",
            vpc_id=cdktf.Token.as_string(alicloud_vpc_main.id),
            vswitch_name=name.string_value,
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_zones_default.zones, ["0", "id"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_vswitch_main.override_logical_id("main")
        data_alicloud_instance_types_default =
        alicloud.data_alicloud_instance_types.DataAlicloudInstanceTypes(self, "default_6",
            availability_zone=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_zones_default.zones, ["0", "id"])),
            eni_amount=2
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_instance_types_default.override_logical_id("default")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        alicloud_instance_instance_count = cdktf.TerraformCount.of(
            cdktf.Token.as_number("2"))
        alicloud_instance_instance = alicloud.instance.Instance(self, "instance",
            availability_zone=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_zones_default.zones, ["0", "id"])),
            image_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_images_image.images, ["0", "id"])),
            instance_charge_type="PostPaid",
            instance_name=name.string_value,
            instance_type=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_instance_types_default.instance_types, ["0", "id"
                ])),
            internet_charge_type="PayByTraffic",
            internet_max_bandwidth_out=cdktf.Token.as_number("10"),
            security_groups=[cdktf.Token.as_string(alicloud_security_group_group.id)],
            system_disk_category="cloud_efficiency",
            vswitch_id=cdktf.Token.as_string(alicloud_vswitch_main.id),
            count=alicloud_instance_instance_count
        )
        alicloud_slb_load_balancer_instance =
        alicloud.slb_load_balancer.SlbLoadBalancer(self, "instance_8",
            load_balancer_name=name.string_value,
            load_balancer_spec="slb.s2.small",
            vswitch_id=cdktf.Token.as_string(alicloud_vswitch_main.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_slb_load_balancer_instance.override_logical_id("instance")
        alicloud_slb_master_slave_server_group_group =
        alicloud.slb_master_slave_server_group.SlbMasterSlaveServerGroup(self, "group_9",
            load_balancer_id=cdktf.Token.as_string(alicloud_slb_load_balancer_instance.id),
            name=name.string_value,
            servers=[SlbMasterSlaveServerGroupServers(
                port=100,
                server_id=cdktf.Token.as_string(
                    cdktf.property_access(alicloud_instance_instance, ["0", "id"])),
                server_type="Master",
                weight=100
            ), SlbMasterSlaveServerGroupServers(
                port=100,
                server_id=cdktf.Token.as_string(
                    cdktf.property_access(alicloud_instance_instance, ["1", "id"])),
                server_type="Slave",
                weight=100
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_slb_master_slave_server_group_group.override_logical_id("group")
        data_alicloud_slb_master_slave_server_groups_sample_ds =
        alicloud.data_alicloud_slb_master_slave_server_groups.DataAlicloudSlbMasterSlaveServerGroups(self, "sample_ds",
            load_balancer_id=cdktf.Token.as_string(alicloud_slb_load_balancer_instance.id)
        )
        cdktf.TerraformOutput(self, "first_slb_server_group_id",
            value=cdktf.property_access(data_alicloud_slb_master_slave_server_groups_sample_ds.groups, ["0", "id"])
        )
```

## Argument Reference

The following arguments are supported:

* `load_balancer_id` - ID of the SLB.
* `ids` - (Optional) A list of master slave server group IDs to filter results.
* `name_regex` - (Optional) A regex string to filter results by master slave server group name.
* `output_file` - (Optional) File name where to save data source results (after running `terraform plan`).

## Attributes Reference

The following attributes are exported in addition to the arguments listed above:

* `ids` - A list of SLB master slave server groups IDs.
* `names` - A list of SLB master slave server groups names.
* `groups` - A list of SLB master slave server groups. Each element contains the following attributes:
  * `id` - master slave server group ID.
  * `name` - master slave server group name.
  * `servers` - ECS instances associated to the group. Each element contains the following attributes:
    * `instance_id` - ID of the attached ECS instance.
    * `weight` - Weight associated to the ECS instance.
    * `port` - The port used by the master slave server group.
    * `server_type` - The server type of the attached ECS instance.
    * `is_backup` - (Removed from v1.63.0) Determine if the server is executing.


<!-- cache-key: cdktf-0.17.0-pre.15 input-35f4efa07fa3adb8f09dc54fad8153c40db91091cbd179d5d2a7a41d458cb9ce -->