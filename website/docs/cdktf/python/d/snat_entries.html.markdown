---
subcategory: "NAT Gateway"
layout: "alicloud"
page_title: "Alicloud: alicloud_snat_entries"
sidebar_current: "docs-alicloud-datasource-snat-entries"
description: |-
    Provides a list of Snat Entries owned by an Alibaba Cloud account.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_snat\_entries

This data source provides a list of Snat Entries owned by an Alibaba Cloud account.

-> **NOTE:** Available in 1.37.0+.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        name = cdktf.TerraformVariable(self, "name",
            default="snat-entry-example-name"
        )
        alicloud_eip_address_foo = alicloud.eip_address.EipAddress(self, "foo",
            address_name=name.string_value
        )
        alicloud_vpc_foo = alicloud.vpc.Vpc(self, "foo_2",
            cidr_block="172.16.0.0/12",
            name=name.string_value
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_vpc_foo.override_logical_id("foo")
        data_alicloud_zones_default =
        alicloud.data_alicloud_zones.DataAlicloudZones(self, "default",
            available_resource_creation="VSwitch"
        )
        alicloud_nat_gateway_foo = alicloud.nat_gateway.NatGateway(self, "foo_4",
            name=name.string_value,
            specification="Small",
            vpc_id=cdktf.Token.as_string(alicloud_vpc_foo.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_nat_gateway_foo.override_logical_id("foo")
        alicloud_vswitch_foo = alicloud.vswitch.Vswitch(self, "foo_5",
            availability_zone=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_zones_default.zones, ["0", "id"])),
            cidr_block="172.16.0.0/21",
            vpc_id=cdktf.Token.as_string(alicloud_vpc_foo.id),
            vswitch_name=name.string_value
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_vswitch_foo.override_logical_id("foo")
        alicloud_eip_association_foo =
        alicloud.eip_association.EipAssociation(self, "foo_6",
            allocation_id=cdktf.Token.as_string(alicloud_eip_address_foo.id),
            instance_id=cdktf.Token.as_string(alicloud_nat_gateway_foo.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_eip_association_foo.override_logical_id("foo")
        alicloud_snat_entry_foo = alicloud.snat_entry.SnatEntry(self, "foo_7",
            snat_ip=cdktf.Token.as_string(alicloud_eip_address_foo.ip_address),
            snat_table_id=cdktf.Token.as_string(alicloud_nat_gateway_foo.snat_table_ids),
            source_vswitch_id=cdktf.Token.as_string(alicloud_vswitch_foo.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_snat_entry_foo.override_logical_id("foo")
        data_alicloud_snat_entries_foo =
        alicloud.data_alicloud_snat_entries.DataAlicloudSnatEntries(self, "foo_8",
            snat_table_id=cdktf.Token.as_string(alicloud_snat_entry_foo.snat_table_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_snat_entries_foo.override_logical_id("foo")
```

## Argument Reference

The following arguments are supported:

* `ids` - (Optional) A list of Snat Entries IDs.
* `snat_ip` - (Optional) The public IP of the Snat Entry.
* `source_cidr` - (Optional) The source CIDR block of the Snat Entry.
* `snat_table_id` - (Required) The ID of the Snat table.
* `name_regex` - (Optional, ForceNew, Available in 1.119.1+) A regex string to filter results by the resource name. 
* `snat_entry_name` - (Optional, ForceNew, Available in 1.119.1+) The name of snat entry.
* `source_vswitch_id` - (Optional, ForceNew, Available in 1.119.1+) The source vswitch ID.
* `status` - (Optional, ForceNew, Available in 1.119.1+) The status of the Snat Entry. Valid values: `Available`, `Deleting` and `Pending`.
* `output_file` - (Optional) File name where to save data source results (after running `terraform plan`).

## Attributes Reference

The following attributes are exported in addition to the arguments listed above:

* `ids` - (Optional) A list of Snat Entries IDs.
* `entries` - A list of Snat Entries. Each element contains the following attributes:
  * `id` - The ID of the Snat Entry.
  * `snat_ip` - The public IP of the Snat Entry.
  * `source_cidr` - The source CIDR block of the Snat Entry.
  * `status` - The status of the Snat Entry.
  * `snat_entry_id` - The ID of snat entry.
  * `snat_entry_name` - The name of snat entry.
  * `source_vswitch_id` - The source vswitch ID.


<!-- cache-key: cdktf-0.17.0-pre.15 input-72e7068ed385f549d6744859ad8fd9fb3b604a183c7a0b5cae1aeed0ee537da7 -->