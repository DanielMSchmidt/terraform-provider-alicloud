---
subcategory: "Serverless App Engine (SAE)"
layout: "alicloud"
page_title: "Alicloud: alicloud_sae_config_maps"
sidebar_current: "docs-alicloud-datasource-sae-config-maps"
description: |-
  Provides a list of Sae Config Maps to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_sae\_config\_maps

This data source provides the Sae Config Maps of the current Alibaba Cloud user.

-> **NOTE:** Available in v1.130.0+.

## Example Usage

Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        config_map_name = cdktf.TerraformVariable(self, "ConfigMapName",
            default="examplename"
        )
        alicloud_sae_namespace_example = alicloud.sae_namespace.SaeNamespace(self, "example",
            namespace_description="your_description",
            namespace_id="cn-hangzhou:yourname",
            namespace_name="example_value"
        )
        data_alicloud_sae_config_maps_name_regex =
        alicloud.data_alicloud_sae_config_maps.DataAlicloudSaeConfigMaps(self, "nameRegex",
            name_regex="^example",
            namespace_id=cdktf.Token.as_string(alicloud_sae_namespace_example.namespace_id)
        )
        cdktf.TerraformOutput(self, "sae_config_map_id",
            value=cdktf.property_access(data_alicloud_sae_config_maps_name_regex.maps, ["0", "id"
            ])
        )
        alicloud_sae_config_map_example = alicloud.sae_config_map.SaeConfigMap(self, "example_4",
            data=cdktf.Fn.jsonencode({
                "env.home": "/root",
                "env.shell": "/bin/sh"
            }),
            name=config_map_name.string_value,
            namespace_id=cdktf.Token.as_string(alicloud_sae_namespace_example.namespace_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_sae_config_map_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `ids` - (Optional, ForceNew, Computed)  A list of Config Map IDs.
* `name_regex` - (Optional, ForceNew) A regex string to filter results by Config Map name.
* `namespace_id` - (Required, ForceNew) The NamespaceId of Config Maps. The Id of Namespace.It can contain 2 to 32 characters.The value is in format {RegionId}:{namespace}.
* `output_file` - (Optional) File name where to save data source results (after running `terraform plan`).

## Argument Reference

The following attributes are exported in addition to the arguments listed above:

* `names` - A list of Config Map names.
* `maps` - A list of Sae Config Maps. Each element contains the following attributes:
	* `config_map_id` - The first ID of the resource.
	* `create_time` - The Creation Time of the ConfigMap.
	* `data` - ConfigMap instance data. The value's format is a `json` string
	* `description` - The Description of Config Map.
	* `id` - The ID of the Config Map.
	* `name` - ConfigMap instance name.
	* `namespace_id` - The NamespaceId of Config Maps.

<!-- cache-key: cdktf-0.17.0-pre.15 input-3995471f77b0b3a8fc04dc64f79e0722612d2095ed244103395cbaae7a18d135 -->