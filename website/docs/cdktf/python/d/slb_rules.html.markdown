---
subcategory: "Classic Load Balancer (SLB)"
layout: "alicloud"
page_title: "Alicloud: alicloud_slb_rules"
sidebar_current: "docs-alicloud-datasource-slb-rules"
description: |-
    Provides a list of server load balancer rules to the user.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_slb_rules

This data source provides the rules associated with a server load balancer listener.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        name = cdktf.TerraformVariable(self, "name",
            default="slbrulebasicconfig"
        )
        alicloud_vpc_default = alicloud.vpc.Vpc(self, "default",
            cidr_block="172.16.0.0/16",
            name=name.string_value
        )
        data_alicloud_zones_default =
        alicloud.data_alicloud_zones.DataAlicloudZones(self, "default_2",
            available_disk_category="cloud_efficiency",
            available_resource_creation="VSwitch"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_zones_default.override_logical_id("default")
        alicloud_vswitch_default = alicloud.vswitch.Vswitch(self, "default_3",
            cidr_block="172.16.0.0/16",
            vpc_id=cdktf.Token.as_string(alicloud_vpc_default.id),
            vswitch_name=name.string_value,
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_zones_default.zones, ["0", "id"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_vswitch_default.override_logical_id("default")
        alicloud_slb_load_balancer_default =
        alicloud.slb_load_balancer.SlbLoadBalancer(self, "default_4",
            load_balancer_name=name.string_value,
            vswitch_id=cdktf.Token.as_string(alicloud_vswitch_default.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_slb_load_balancer_default.override_logical_id("default")
        alicloud_slb_server_group_default =
        alicloud.slb_server_group.SlbServerGroup(self, "default_5",
            load_balancer_id=cdktf.Token.as_string(alicloud_slb_load_balancer_default.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_slb_server_group_default.override_logical_id("default")
        data_alicloud_slb_rules_sample_ds =
        alicloud.data_alicloud_slb_rules.DataAlicloudSlbRules(self, "sample_ds",
            frontend_port=22,
            load_balancer_id=cdktf.Token.as_string(alicloud_slb_load_balancer_default.id)
        )
        cdktf.TerraformOutput(self, "first_slb_rule_id",
            value=cdktf.property_access(data_alicloud_slb_rules_sample_ds.slb_rules, ["0", "id"
            ])
        )
        alicloud_slb_listener_default = alicloud.slb_listener.SlbListener(self, "default_8",
            backend_port=22,
            bandwidth=5,
            frontend_port=22,
            health_check_connect_port=cdktf.Token.as_number("20"),
            load_balancer_id=cdktf.Token.as_string(alicloud_slb_load_balancer_default.id),
            protocol="http"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_slb_listener_default.override_logical_id("default")
        alicloud_slb_rule_default = alicloud.slb_rule.SlbRule(self, "default_9",
            domain="*.aliyun.com",
            frontend_port=cdktf.Token.as_number(alicloud_slb_listener_default.frontend_port),
            load_balancer_id=cdktf.Token.as_string(alicloud_slb_load_balancer_default.id),
            name=name.string_value,
            server_group_id=cdktf.Token.as_string(alicloud_slb_server_group_default.id),
            url="/image"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_slb_rule_default.override_logical_id("default")
```

## Argument Reference

The following arguments are supported:

* `load_balancer_id` - ID of the SLB with listener rules.
* `frontend_port` - SLB listener port.
* `ids` - (Optional) A list of rules IDs to filter results.
* `name_regex` - (Optional) A regex string to filter results by rule name.
* `output_file` - (Optional) File name where to save data source results (after running `terraform plan`).

## Attributes Reference

The following attributes are exported in addition to the arguments listed above:

* `ids` - A list of SLB listener rules IDs.
* `names` - A list of SLB listener rules names.
* `slb_rules` - A list of SLB listener rules. Each element contains the following attributes:
  * `id` - Rule ID.
  * `name` - Rule name.
  * `domain` - Domain name in the HTTP request where the rule applies (e.g. "*.aliyun.com").
  * `url` - Path in the HTTP request where the rule applies (e.g. "/image").
  * `server_group_id` - ID of the linked VServer group.

<!-- cache-key: cdktf-0.17.0-pre.15 input-437554e32b802a7e8761604f0bc177023ce48e9aa68454e894fd9e58139e81ef -->