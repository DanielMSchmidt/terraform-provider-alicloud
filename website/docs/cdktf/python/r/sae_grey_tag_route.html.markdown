---
subcategory: "Serverless App Engine (SAE)"
layout: "alicloud"
page_title: "Alicloud: alicloud_sae_grey_tag_route"
sidebar_current: "docs-alicloud-resource-sae-grey_tag_route"
description: |-
  Provides a Alicloud Serverless App Engine (SAE) GreyTagRoute resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_sae\_grey\_tag\_route

Provides a Serverless App Engine (SAE) GreyTagRoute resource.

For information about Serverless App Engine (SAE) GreyTagRoute and how to use it, see [What is GreyTagRoute](https://help.aliyun.com/document_detail/97792.html).

-> **NOTE:** Available in v1.160.0+.

## Example Usage

Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        name = cdktf.TerraformVariable(self, "name",
            default="tf-testacc"
        )
        region = cdktf.TerraformVariable(self, "region",
            default="cn-hangzhou"
        )
        alicloud_sae_namespace_default = alicloud.sae_namespace.SaeNamespace(self, "default",
            namespace_description=name.string_value,
            namespace_id=cdktf.Fn.join(":",
                cdktf.Token.as_list([region.value, name.value])),
            namespace_name=name.string_value
        )
        data_alicloud_vpcs_default =
        alicloud.data_alicloud_vpcs.DataAlicloudVpcs(self, "default_3",
            name_regex="default-NODELETING"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vpcs_default.override_logical_id("default")
        data_alicloud_vswitches_default =
        alicloud.data_alicloud_vswitches.DataAlicloudVswitches(self, "default_4",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vswitches_default.override_logical_id("default")
        alicloud_sae_application_default =
        alicloud.sae_application.SaeApplication(self, "default_5",
            app_description=name.string_value,
            app_name=name.string_value,
            cpu=cdktf.Token.as_number("500"),
            image_url="registry-vpc.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5",
            jdk="Open JDK 8",
            memory=cdktf.Token.as_number("2048"),
            namespace_id=cdktf.Token.as_string(alicloud_sae_namespace_default.namespace_id),
            package_type="Image",
            replicas=cdktf.Token.as_number("5"),
            timezone="Asia/Shanghai",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            vswitch_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vswitches_default.ids, ["0"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_sae_application_default.override_logical_id("default")
        alicloud_sae_grey_tag_route_default =
        alicloud.sae_grey_tag_route.SaeGreyTagRoute(self, "default_6",
            app_id=cdktf.Token.as_string(alicloud_sae_application_default.id),
            description=name.string_value,
            dubbo_rules=[SaeGreyTagRouteDubboRules(
                condition="OR",
                group="DUBBO",
                items=[SaeGreyTagRouteDubboRulesItems(
                    cond="==",
                    expr=".key1",
                    index=cdktf.Token.as_number("1"),
                    operator="rawvalue",
                    value="value1"
                )
                ],
                method_name="test",
                service_name="com.test.service",
                version="1.0.0"
            )
            ],
            grey_tag_route_name=name.string_value,
            sc_rules=[SaeGreyTagRouteScRules(
                condition="AND",
                items=[SaeGreyTagRouteScRulesItems(
                    cond="==",
                    name="tftest",
                    operator="rawvalue",
                    type="param",
                    value="test"
                )
                ],
                path="/tf/test"
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_sae_grey_tag_route_default.override_logical_id("default")
```

## Argument Reference

The following arguments are supported:

* `app_id` - (Required, ForceNew) The ID  of the SAE Application.
* `description` - (Optional) The description of GreyTagRoute.
* `grey_tag_route_name` - (Required, ForceNew) The name of GreyTagRoute.
* `dubbo_rules` - (Optional) The grayscale rule created for Dubbo Application. The details see Block `dubbo_rules`.
* `sc_rules` - (Optional) The grayscale rule created for SpringCloud Application. The details see Block `sc_rules`.

### dubbo_rules

The `dubbo_rules` supports the following:
* `method_name` - (Optional) The method name
* `service_name` - (Optional) The service name.
* `version` - (Optional) The service version.
* `condition` - (Optional) The Conditional Patterns for Grayscale Rules. Valid values: `AND`, `OR`.
* `group` - (Optional) The service group.
* `items` - (Optional) A list of conditions items. The details see Block `dubbo_rules_items`.

#### dubbo_rules_items

The `dubbo_rules_items` supports the following:
* `index` - (Optional) The parameter number.
* `expr` - (Optional) The parameter value gets the expression.
* `cond` - (Optional) The comparison operator. Valid values: `>`, `<`, `>=`, `<=`, `==`, `!=`.
* `value` - (Optional) The value of the parameter.
* `operator` - (Optional) The operator. Valid values: `rawvalue`, `list`, `mod`, `deterministic_proportional_steaming_division`

### sc_rules

The `sc_rules` supports the following:
* `path` - (Optional) The path corresponding to the grayscale rule.
* `condition` - (Optional) The conditional Patterns for Grayscale Rules. Valid values: `AND`, `OR`.
* `items` - (Optional) A list of conditions items. The details see Block `sc_rules_items`.

#### sc_rules_items

The `sc_rules_items` supports the following:
* `name` - (Optional) The name of the parameter.
* `type` - (Optional) The compare types. Valid values: `param`, `cookie`, `header`.
* `cond` - (Optional) The comparison operator. Valid values: `>`, `<`, `>=`, `<=`, `==`, `!=`.
* `value` - (Optional) The value of the parameter.
* `operator` - (Optional) The operator. Valid values: `rawvalue`, `list`, `mod`, `deterministic_proportional_steaming_division`.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of GreyTagRoute.


#### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 1 mins) Used when create the resource.
* `update` - (Defaults to 1 mins) Used when update the resource.
* `delete` - (Defaults to 1 mins) Used when delete the resource.

## Import

Serverless App Engine (SAE) GreyTagRoute can be imported using the id, e.g.

```shell
$ terraform import alicloud_sae_grey_tag_route.example <id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-36770cb26eba26291faff06362342e5345e3ef552e0f97fe5b212bb7d71364f1 -->