---
subcategory: "Classic Load Balancer (SLB)"
layout: "alicloud"
page_title: "Alicloud: alicloud_slb_master_slave_server_group"
sidebar_current: "docs-alicloud-resource-slb-master-slave-server-group"
description: |-
  Provides a Load Banlancer Master Slave Server Group resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_slb\_master\_slave\_server\_group

A master slave server group contains two ECS instances. The master slave server group can help you to define multiple listening dimension.

-> **NOTE:** One ECS instance can be added into multiple master slave server groups.

-> **NOTE:** One master slave server group can only add two ECS instances, which are master server and slave server.

-> **NOTE:** One master slave server group can be attached with tcp/udp listeners in one load balancer.

-> **NOTE:** One Classic and Internet load balancer, its master slave server group can add Classic and VPC ECS instances.

-> **NOTE:** One Classic and Intranet load balancer, its master slave server group can only add Classic ECS instances.

-> **NOTE:** One VPC load balancer, its master slave server group can only add the same VPC ECS instances.

-> **NOTE:** Available in 1.54.0+

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        slb_master_slave_server_group = cdktf.TerraformVariable(self, "slb_master_slave_server_group",
            default="forSlbMasterSlaveServerGroup"
        )
        alicloud_vpc_main = alicloud.vpc.Vpc(self, "main",
            cidr_block="172.16.0.0/16",
            vpc_name=slb_master_slave_server_group.string_value
        )
        data_alicloud_images_image =
        alicloud.data_alicloud_images.DataAlicloudImages(self, "image",
            most_recent=True,
            name_regex="^ubuntu_18.*64",
            owners="system"
        )
        data_alicloud_zones_ms_server_group =
        alicloud.data_alicloud_zones.DataAlicloudZones(self, "ms_server_group",
            available_disk_category="cloud_efficiency",
            available_resource_creation="VSwitch"
        )
        alicloud_security_group_group = alicloud.security_group.SecurityGroup(self, "group",
            name=slb_master_slave_server_group.string_value,
            vpc_id=cdktf.Token.as_string(alicloud_vpc_main.id)
        )
        alicloud_vswitch_main = alicloud.vswitch.Vswitch(self, "main_5",
            cidr_block="172.16.0.0/16",
            vpc_id=cdktf.Token.as_string(alicloud_vpc_main.id),
            vswitch_name=slb_master_slave_server_group.string_value,
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_zones_ms_server_group.zones, ["0", "id"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_vswitch_main.override_logical_id("main")
        data_alicloud_instance_types_ms_server_group =
        alicloud.data_alicloud_instance_types.DataAlicloudInstanceTypes(self, "ms_server_group_6",
            availability_zone=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_zones_ms_server_group.zones, ["0", "id"
                ])),
            eni_amount=2
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_instance_types_ms_server_group.override_logical_id("ms_server_group")
        alicloud_ecs_network_interface_ms_server_group =
        alicloud.ecs_network_interface.EcsNetworkInterface(self, "ms_server_group_7",
            network_interface_name=slb_master_slave_server_group.string_value,
            security_group_ids=[
                cdktf.Token.as_string(alicloud_security_group_group.id)
            ],
            vswitch_id=cdktf.Token.as_string(alicloud_vswitch_main.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_ecs_network_interface_ms_server_group.override_logical_id("ms_server_group")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        alicloud_instance_ms_server_group_count = cdktf.TerraformCount.of(
            cdktf.Token.as_number("2"))
        alicloud_instance_ms_server_group = alicloud.instance.Instance(self, "ms_server_group_8",
            availability_zone=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_zones_ms_server_group.zones, ["0", "id"
                ])),
            image_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_images_image.images, ["0", "id"])),
            instance_charge_type="PostPaid",
            instance_name=slb_master_slave_server_group.string_value,
            instance_type=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_instance_types_ms_server_group.instance_types, ["0", "id"])),
            internet_charge_type="PayByTraffic",
            internet_max_bandwidth_out=cdktf.Token.as_number("10"),
            security_groups=[cdktf.Token.as_string(alicloud_security_group_group.id)],
            system_disk_category="cloud_efficiency",
            vswitch_id=cdktf.Token.as_string(alicloud_vswitch_main.id),
            count=alicloud_instance_ms_server_group_count
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_instance_ms_server_group.override_logical_id("ms_server_group")
        alicloud_slb_load_balancer_ms_server_group =
        alicloud.slb_load_balancer.SlbLoadBalancer(self, "ms_server_group_9",
            load_balancer_name=slb_master_slave_server_group.string_value,
            load_balancer_spec="slb.s2.small",
            vswitch_id=cdktf.Token.as_string(alicloud_vswitch_main.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_slb_load_balancer_ms_server_group.override_logical_id("ms_server_group")
        alicloud_slb_master_slave_server_group_group =
        alicloud.slb_master_slave_server_group.SlbMasterSlaveServerGroup(self, "group_10",
            load_balancer_id=cdktf.Token.as_string(alicloud_slb_load_balancer_ms_server_group.id),
            name=slb_master_slave_server_group.string_value,
            servers=[SlbMasterSlaveServerGroupServers(
                port=100,
                server_id=cdktf.Token.as_string(
                    cdktf.property_access(alicloud_instance_ms_server_group, ["0", "id"])),
                server_type="Master",
                weight=100
            ), SlbMasterSlaveServerGroupServers(
                port=100,
                server_id=cdktf.Token.as_string(
                    cdktf.property_access(alicloud_instance_ms_server_group, ["1", "id"])),
                server_type="Slave",
                weight=100
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_slb_master_slave_server_group_group.override_logical_id("group")
        alicloud_ecs_network_interface_attachment_ms_server_group =
        alicloud.ecs_network_interface_attachment.EcsNetworkInterfaceAttachment(self, "ms_server_group_11",
            instance_id=cdktf.Token.as_string(
                cdktf.property_access(alicloud_instance_ms_server_group, ["0", "id"])),
            network_interface_id=cdktf.Token.as_string(alicloud_ecs_network_interface_ms_server_group.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_ecs_network_interface_attachment_ms_server_group.override_logical_id("ms_server_group")
        alicloud.slb_listener.SlbListener(self, "tcp",
            bandwidth=cdktf.Token.as_number("10"),
            established_timeout=600,
            frontend_port=cdktf.Token.as_number("22"),
            health_check_connect_port=20,
            health_check_http_code="http_2xx",
            health_check_interval=5,
            health_check_timeout=8,
            health_check_type="tcp",
            health_check_uri="/console",
            healthy_threshold=8,
            load_balancer_id=cdktf.Token.as_string(alicloud_slb_load_balancer_ms_server_group.id),
            master_slave_server_group_id=cdktf.Token.as_string(alicloud_slb_master_slave_server_group_group.id),
            persistence_timeout=3600,
            protocol="tcp",
            unhealthy_threshold=8
        )
```

## Argument Reference

The following arguments are supported:

* `load_balancer_id` - (Required, ForceNew) The Load Balancer ID which is used to launch a new master slave server group.
* `name` - (Required, ForceNew) Name of the master slave server group. 
* `servers` - (Optional, ForceNew) A list of ECS instances to be added. Only two ECS instances can be supported in one resource. It contains six sub-fields as `Block server` follows.
* `delete_protection_validation` - (Optional, Available in 1.63.0+) Checking DeleteProtection of SLB instance before deleting. If true, this resource will not be deleted when its SLB instance enabled DeleteProtection. Default to false.

## Block servers

The servers mapping supports the following:

* `server_ids` - (Required) A list backend server ID (ECS instance ID).
* `port` - (Required) The port used by the backend server. Valid value range: [1-65535].
* `weight` - (Optional) Weight of the backend server. Valid value range: [0-100]. Default to 100.
* `type` - (Optional, Available in 1.51.0+) Type of the backend server. Valid value ecs, eni. Default to eni.
* `server_type` - (Optional) The server type of the backend server. Valid value Master, Slave.
* `is_backup` - (Removed from v1.63.0) Determine if the server is executing. Valid value 0, 1. 

## Attributes Reference

The following attributes are exported:

* `id` - The ID of the master slave server group.

## Import

Load balancer master slave server group can be imported using the id, e.g.

```shell
$ terraform import alicloud_slb_master_slave_server_group.example abc123456
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-660deb5004dfa8f094408af17a6f7ede8c440d9528b8660e9ed2c7ea26adc2f2 -->