---
subcategory: "RDS"
layout: "alicloud"
page_title: "Alicloud: alicloud_rds_db_node"
sidebar_current: "docs-alicloud-resource-rds-db-node"
description: |-
  Provide RDS cluster instance to increase node resources.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_rds\_db\_node

Provide RDS cluster instance to increase node resources.
-> **NOTE:** Available in 1.202.0+.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        name = cdktf.TerraformVariable(self, "name",
            default="tf-testaccrdsdbnodes"
        )
        data_alicloud_db_zones_default =
        alicloud.data_alicloud_db_zones.DataAlicloudDbZones(self, "default",
            category="cluster",
            db_instance_storage_type="cloud_essd",
            engine="MySQL",
            engine_version="8.0",
            instance_charge_type="PostPaid"
        )
        data_alicloud_vpcs_default =
        alicloud.data_alicloud_vpcs.DataAlicloudVpcs(self, "default_2",
            name_regex="^default-NODELETING$"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vpcs_default.override_logical_id("default")
        data_alicloud_vswitches_default =
        alicloud.data_alicloud_vswitches.DataAlicloudVswitches(self, "default_3",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_db_zones_default.ids, ["0"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vswitches_default.override_logical_id("default")
        data_alicloud_db_instance_classes_default =
        alicloud.data_alicloud_db_instance_classes.DataAlicloudDbInstanceClasses(self, "default_4",
            category="cluster",
            db_instance_storage_type="cloud_essd",
            engine="MySQL",
            engine_version="8.0",
            instance_charge_type="PostPaid",
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_db_zones_default.zones, ["0", "id"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_db_instance_classes_default.override_logical_id("default")
        alicloud_db_instance_default = alicloud.db_instance.DbInstance(self, "default_5",
            db_instance_storage_type="cloud_essd",
            engine="MySQL",
            engine_version="8.0",
            instance_name=name.string_value,
            instance_storage=cdktf.Token.as_number(
                cdktf.property_access(data_alicloud_db_instance_classes_default.instance_classes, ["0", "storage_range", "min"])),
            instance_type=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_db_instance_classes_default.instance_classes, ["0", "instance_class"])),
            vswitch_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vswitches_default.ids, ["0"])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_db_zones_default.ids, ["0"])),
            zone_id_slave_a=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_db_zones_default.ids, ["0"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_db_instance_default.override_logical_id("default")
        alicloud.rds_db_node.RdsDbNode(self, "node",
            class_code=cdktf.Token.as_string(alicloud_db_instance_default.instance_type),
            db_instance_id=cdktf.Token.as_string(alicloud_db_instance_default.id),
            zone_id=cdktf.Token.as_string(alicloud_db_instance_default.zone_id)
        )
```

## Argument Reference

The following arguments are supported:

* `db_instance_id` - (Required, ForceNew) The Id of instance that can run database.
* `class_code` - (Required, ForceNew) The specification information of the node.
* `zone_id` - (Required, ForceNew) The zone ID of the node.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of node.The value formats as `<db_instance_id>:<node_id>`.
* `node_id` - The ID of the node.
* `node_role` - The role of node.
* `node_region_id` - The region ID of the node.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 30 mins) Use when opening exclusive agent (until it reaches the initial `Running` status).
* `delete` - (Defaults to 20 mins) Use when closing exclusive agent.

## Import

RDS MySQL database cluster node agent function can be imported using id, e.g.

```shell
$ terraform import alicloud_rds_db_node.example <db_instance_id>:<node_id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-8a34964b91f0510c468df860bac4fc05242774bd22aecc045db278eae313ae3f -->