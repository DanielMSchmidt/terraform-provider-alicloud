---
subcategory: "Data Transmission Service (DTS)"
layout: "alicloud"
page_title: "Alicloud: alicloud_dts_consumer_channel"
sidebar_current: "docs-alicloud-resource-dts-consumer-channel"
description: |-
  Provides a Alicloud DTS Consumer Channel resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_dts\_consumer\_channel

Provides a DTS Consumer Channel resource.

For information about DTS Consumer Channel and how to use it, see [What is Consumer Channel](https://www.alibabacloud.com/help/en/doc-detail/264593.htm).

-> **NOTE:** Available in v1.146.0+.

## Example Usage

Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        creation = cdktf.TerraformVariable(self, "creation",
            default="Rds"
        )
        name = cdktf.TerraformVariable(self, "name",
            default="tftestdts"
        )
        data_alicloud_vpcs_default =
        alicloud.data_alicloud_vpcs.DataAlicloudVpcs(self, "default",
            name_regex="default-NODELETING"
        )
        data_alicloud_zones_default =
        alicloud.data_alicloud_zones.DataAlicloudZones(self, "default_3",
            available_resource_creation=creation.string_value
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_zones_default.override_logical_id("default")
        data_alicloud_vswitches_default =
        alicloud.data_alicloud_vswitches.DataAlicloudVswitches(self, "default_4",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_zones_default.zones, ["0", "id"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vswitches_default.override_logical_id("default")
        alicloud_db_instance_instance = alicloud.db_instance.DbInstance(self, "instance",
            engine="MySQL",
            engine_version="5.6",
            instance_name=name.string_value,
            instance_storage=cdktf.Token.as_number("10"),
            instance_type="rds.mysql.s1.small",
            vswitch_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vswitches_default.ids, ["0"]))
        )
        alicloud_dts_subscription_job_default =
        alicloud.dts_subscription_job.DtsSubscriptionJob(self, "default_6",
            db_list="        {\"dtstestdata\": {\"name\": \"tfaccountpri_0\", \"all\": true}}\n",
            dts_job_name=name.string_value,
            payment_type="PayAsYouGo",
            source_endpoint_database_name="tfaccountpri_0",
            source_endpoint_engine_name="MySQL",
            source_endpoint_instance_id=cdktf.Token.as_string(alicloud_db_instance_instance.id),
            source_endpoint_instance_type="RDS",
            source_endpoint_password="Test12345",
            source_endpoint_region="cn-hangzhou",
            source_endpoint_user_name="tftestprivilege",
            status="Normal",
            subscription_instance_network_type="vpc",
            subscription_instance_vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            subscription_instance_vswitch_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vswitches_default.ids, ["0"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_dts_subscription_job_default.override_logical_id("default")
        alicloud_db_account_account = alicloud.db_account.DbAccount(self, "account",
            account_description="from terraform",
            account_name="tftestprivilege",
            account_password="Test12345",
            db_instance_id=cdktf.Token.as_string(alicloud_db_instance_instance.id)
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        alicloud_db_database_db_count = cdktf.TerraformCount.of(
            cdktf.Token.as_number("2"))
        alicloud_db_database_db = alicloud.db_database.DbDatabase(self, "db",
            description="from terraform",
            instance_id=cdktf.Token.as_string(alicloud_db_instance_instance.id),
            name="tfaccountpri_${" + alicloud_db_database_db_count.index + "}",
            count=alicloud_db_database_db_count
        )
        alicloud_dts_consumer_channel_default =
        alicloud.dts_consumer_channel.DtsConsumerChannel(self, "default_9",
            consumer_group_name=name.string_value,
            consumer_group_password="tftestAcc123",
            consumer_group_user_name=name.string_value,
            dts_instance_id=cdktf.Token.as_string(alicloud_dts_subscription_job_default.dts_instance_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_dts_consumer_channel_default.override_logical_id("default")
        alicloud.db_account_privilege.DbAccountPrivilege(self, "privilege",
            account_name=cdktf.Token.as_string(alicloud_db_account_account.name),
            db_names=cdktf.Token.as_list(
                cdktf.property_access(alicloud_db_database_db, ["*", "name"])),
            instance_id=cdktf.Token.as_string(alicloud_db_instance_instance.id),
            privilege="ReadWrite"
        )
```

## Argument Reference

The following arguments are supported:

* `consumer_group_name` - (Required, ForceNew) The name of the consumer group.
* `consumer_group_password` - (Required) The password of the consumer group account. The length of the `consumer_group_password` is limited to `8` to `32` characters. It can contain two or more of the following characters: uppercase letters, lowercase letters, digits, and special characters.
* `consumer_group_user_name` - (Required, ForceNew) The username of the consumer group. The length of the `consumer_group_user_name` is limited to `1` to `16` characters. It can contain one or more of the following characters: uppercase letters, lowercase letters, digits, and underscores (_).
* `dts_instance_id` - (Required) The ID of the subscription instance.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID of Consumer Channel. The value formats as `<dts_instance_id>:<consumer_group_id>`.
* `consumer_group_id` - The ID of the consumer group.

## Import

DTS Consumer Channel can be imported using the id, e.g.

```shell
$ terraform import alicloud_dts_consumer_channel.example <dts_instance_id>:<consumer_group_id>
```
<!-- cache-key: cdktf-0.17.0-pre.15 input-e5b99459153e757497f9d9c489d066db29dbcc87af9776dc9ea635dfcbca542c -->