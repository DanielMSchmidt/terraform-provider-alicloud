---
subcategory: "Express Connect"
layout: "alicloud"
page_title: "Alicloud: alicloud_router_interface_connection"
sidebar_current: "docs-alicloud-resource-router-interface-connection"
description: |-
  Provides a VPC router interface connection resource to connect two VPCs.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_router\_interface\_connection

Provides a VPC router interface connection resource to connect two router interfaces which are in two different VPCs.
After that, all of the two router interfaces will be active.

-> **DEPRECATED:**  This resource  has been deprecated from version `1.199.0`. Please use new resource [alicloud_express_connect_router_interface](https://www.terraform.io/docs/providers/alicloud/r/alicloud_express_connect_router_interface).

-> **NOTE:** At present, Router interface does not support changing opposite router interface, the connection delete action is only deactivating it to inactive, not modifying the connection to empty.

-> **NOTE:** If you want to changing opposite router interface, you can delete router interface and re-build them.

-> **NOTE:** A integrated router interface connection tunnel requires both InitiatingSide and AcceptingSide configuring opposite router interface.

-> **NOTE:** Please remember to add a `depends_on` clause in the router interface connection from the InitiatingSide to the AcceptingSide, because the connection from the AcceptingSide to the InitiatingSide must be done first.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        name = cdktf.TerraformVariable(self, "name",
            default="alicloudRouterInterfaceConnectionBasic"
        )
        region = cdktf.TerraformVariable(self, "region",
            default="cn-hangzhou"
        )
        alicloud_vpc_bar = alicloud.vpc.Vpc(self, "bar",
            cidr_block="192.168.0.0/16",
            provider=alicloud,
            vpc_name=name.string_value
        )
        alicloud_vpc_foo = alicloud.vpc.Vpc(self, "foo",
            cidr_block="172.16.0.0/12",
            vpc_name=name.string_value
        )
        alicloud.provider.AlicloudProvider(self, "alicloud",
            region=region.string_value
        )
        alicloud_router_interface_initiate =
        alicloud.router_interface.RouterInterface(self, "initiate",
            description=name.string_value,
            instance_charge_type="PostPaid",
            name=name.string_value,
            opposite_region=region.string_value,
            role="InitiatingSide",
            router_id=cdktf.Token.as_string(alicloud_vpc_foo.router_id),
            router_type="VRouter",
            specification="Large.2"
        )
        alicloud_router_interface_opposite =
        alicloud.router_interface.RouterInterface(self, "opposite",
            description="${" + name.value + "}-opposite",
            name="${" + name.value + "}-opposite",
            opposite_region=region.string_value,
            provider=alicloud,
            role="AcceptingSide",
            router_id=cdktf.Token.as_string(alicloud_vpc_bar.router_id),
            router_type="VRouter",
            specification="Large.1"
        )
        alicloud_router_interface_connection_bar =
        alicloud.router_interface_connection.RouterInterfaceConnection(self, "bar_7",
            interface_id=cdktf.Token.as_string(alicloud_router_interface_opposite.id),
            opposite_interface_id=cdktf.Token.as_string(alicloud_router_interface_initiate.id),
            provider=alicloud
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_router_interface_connection_bar.override_logical_id("bar")
        alicloud_router_interface_connection_foo =
        alicloud.router_interface_connection.RouterInterfaceConnection(self, "foo_8",
            depends_on=[alicloud_router_interface_connection_bar],
            interface_id=cdktf.Token.as_string(alicloud_router_interface_initiate.id),
            opposite_interface_id=cdktf.Token.as_string(alicloud_router_interface_opposite.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_router_interface_connection_foo.override_logical_id("foo")
```
## Argument Reference

The following arguments are supported:

* `interface_id` - (Required, ForceNew) One side router interface ID.
* `opposite_interface_id` - (Required, ForceNew) Another side router interface ID. It must belong the specified "opposite_interface_owner_id" account.
* `opposite_interface_owner_id` - (Optional, ForceNew) Another side router interface account ID. Log on to the Alibaba Cloud console, select User Info > Account Management to check the account ID. Default to [Provider account_id](https://www.terraform.io/docs/providers/alicloud/index.html#account_id).
* `opposite_router_id` - (Optional, ForceNew) Another side router ID. It must belong the specified "opposite_interface_owner_id" account. It is valid when field "opposite_interface_owner_id" is specified.
* `opposite_router_type` - (Optional, ForceNew) Another side router Type. Optional value: VRouter, VBR. It is valid when field "opposite_interface_owner_id" is specified.

-> **NOTE:** The value of "opposite_interface_owner_id" or "account_id" must be main account and not be sub account.

## Attributes Reference

The following attributes are exported:

* `id` - Router interface ID. The value is equal to "interface_id".

## Import

The router interface connection can be imported using the id, e.g.

```shell
$ terraform import alicloud_router_interface_connection.foo ri-abc123456
```


<!-- cache-key: cdktf-0.17.0-pre.15 input-5e85edcfa6e46221ab6418c2bb7d153694a1e64258ebe789675b096c615c4c45 -->