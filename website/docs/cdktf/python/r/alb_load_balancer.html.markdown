---
subcategory: "Application Load Balancer (ALB)"
layout: "alicloud"
page_title: "Alicloud: alicloud_alb_load_balancer"
sidebar_current: "docs-alicloud-resource-alb-load-balancer"
description: |-
  Provides a Alicloud ALB Load Balancer resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_alb\_load\_balancer

Provides a ALB Load Balancer resource.

For information about ALB Load Balancer and how to use it, see [What is Load Balancer](https://www.alibabacloud.com/help/doc-detail/197341.htm).

-> **NOTE:** Available in v1.132.0+.

## Example Usage

Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        name = cdktf.TerraformVariable(self, "name",
            default="example-name"
        )
        data_alicloud_alb_zones_default =
        alicloud.data_alicloud_alb_zones.DataAlicloudAlbZones(self, "default")
        data_alicloud_resource_manager_resource_groups_default =
        alicloud.data_alicloud_resource_manager_resource_groups.DataAlicloudResourceManagerResourceGroups(self, "default_2")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_resource_manager_resource_groups_default.override_logical_id("default")
        data_alicloud_vpcs_default =
        alicloud.data_alicloud_vpcs.DataAlicloudVpcs(self, "default_3",
            name_regex="default-NODELETING"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vpcs_default.override_logical_id("default")
        data_alicloud_vswitches_default1 =
        alicloud.data_alicloud_vswitches.DataAlicloudVswitches(self, "default_1",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_alb_zones_default.zones, ["0", "id"]))
        )
        data_alicloud_vswitches_default2 =
        alicloud.data_alicloud_vswitches.DataAlicloudVswitches(self, "default_2_5",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_alb_zones_default.zones, ["1", "id"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vswitches_default2.override_logical_id("default_2")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        alicloud_vswitch_vswitch1_count = cdktf.TerraformCount.of(
            cdktf.Token.as_number(
                cdktf.conditional(
                    cdktf.Op.gt(cdktf.Fn.length_of(data_alicloud_vswitches_default1.ids), 0), 0, 1)))
        alicloud_vswitch_vswitch1 = alicloud.vswitch.Vswitch(self, "vswitch_1",
            cidr_block=cdktf.Fn.cidrsubnet(
                cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_vpcs_default.vpcs, ["0", "cidr_block"
                    ])), 8, 2),
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            vswitch_name=name.string_value,
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_alb_zones_default.zones, ["0", "id"])),
            count=alicloud_vswitch_vswitch1_count
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        alicloud_vswitch_vswitch2_count = cdktf.TerraformCount.of(
            cdktf.Token.as_number(
                cdktf.conditional(
                    cdktf.Op.gt(cdktf.Fn.length_of(data_alicloud_vswitches_default2.ids), 0), 0, 1)))
        alicloud_vswitch_vswitch2 = alicloud.vswitch.Vswitch(self, "vswitch_2",
            cidr_block=cdktf.Fn.cidrsubnet(
                cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_vpcs_default.vpcs, ["0", "cidr_block"
                    ])), 8, 4),
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            vswitch_name=name.string_value,
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_alb_zones_default.zones, ["1", "id"])),
            count=alicloud_vswitch_vswitch2_count
        )
        alicloud_alb_load_balancer_default =
        alicloud.alb_load_balancer.AlbLoadBalancer(self, "default_8",
            address_allocated_mode="Fixed",
            address_type="Internet",
            load_balancer_billing_config=AlbLoadBalancerLoadBalancerBillingConfig(
                pay_type="PayAsYouGo"
            ),
            load_balancer_edition="Basic",
            load_balancer_name=name.string_value,
            modification_protection_config=AlbLoadBalancerModificationProtectionConfig(
                status="NonProtection"
            ),
            resource_group_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_resource_manager_resource_groups_default.groups, ["0", "id"])),
            tags={
                "Created": "TF"
            },
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            zone_mappings=[AlbLoadBalancerZoneMappings(
                vswitch_id=cdktf.Token.as_string(
                    cdktf.conditional(
                        cdktf.Op.gt(
                            cdktf.Fn.length_of(data_alicloud_vswitches_default1.ids), 0),
                        cdktf.property_access(data_alicloud_vswitches_default1.ids, ["0"]),
                        cdktf.property_access(
                            cdktf.Fn.concat([
                                cdktf.property_access(alicloud_vswitch_vswitch1, ["*", "id"]), [""]
                            ]), ["0"]))),
                zone_id=cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_alb_zones_default.zones, ["0", "id"
                    ]))
            ), AlbLoadBalancerZoneMappings(
                vswitch_id=cdktf.Token.as_string(
                    cdktf.conditional(
                        cdktf.Op.gt(
                            cdktf.Fn.length_of(data_alicloud_vswitches_default2.ids), 0),
                        cdktf.property_access(data_alicloud_vswitches_default2.ids, ["0"]),
                        cdktf.property_access(
                            cdktf.Fn.concat([
                                cdktf.property_access(alicloud_vswitch_vswitch2, ["*", "id"]), [""]
                            ]), ["0"]))),
                zone_id=cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_alb_zones_default.zones, ["1", "id"
                    ]))
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_alb_load_balancer_default.override_logical_id("default")
```

## Argument Reference

The following arguments are supported:

* `access_log_config` - (Optional) The Access Logging Configuration Structure. See the following `Block access_log_config`.
* `address_allocated_mode` - (Optional, ForceNew) The method in which IP addresses are assigned. Valid values: `Fixed` and `Dynamic`. Default value: `Dynamic`.
  *`Fixed`: The ALB instance uses a fixed IP address. 
  *`Dynamic`: An IP address is dynamically assigned to each zone of the ALB instance.
* `address_type` - (Required) The type of IP address that the ALB instance uses to provide services. Valid values: `Intranet`, `Internet`. **NOTE:** From version 1.193.1, `address_type` can be modified.
* `deletion_protection_enabled` - (Optional) The deletion protection enabled. Valid values: `true` and `false`. Default value: `false`.
* `dry_run` - (Optional) Specifies whether to precheck the API request. Valid values: `true` and `false`.
* `load_balancer_billing_config` - (Required, ForceNew) The configuration of the billing method. See the following `Block load_balancer_billing_config`.
* `load_balancer_edition` - (Required) The edition of the ALB instance. Different editions have different limits and billing methods. Valid values: `Basic`, `Standard` and `StandardWithWaf`(Available in v1.193.1+).
* `load_balancer_name` - (Required) The name of the resource.
* `modification_protection_config` - (Optional, Computed) Modify the Protection Configuration. See the following `Block modification_protection_config`.
* `resource_group_id` - (Optional, Computed) The ID of the resource group.
* `vpc_id` - (Required, ForceNew) The ID of the virtual private cloud (VPC) where the ALB instance is deployed.
* `zone_mappings` - (Required, ForceNew) The zones and vSwitches. You must specify at least two zones. See the following `Block zone_mappings`.
* `address_ip_version` - (Optional, ForceNew, Computed, Available in v1.193.1+) The IP version. Valid values: `Ipv4`, `DualStack`.
* `tags` - (Optional) A mapping of tags to assign to the resource. **NOTE:** The Key of `tags` cannot begin with "aliyun", "acs:", "http://", "https://", "ack" or "ingress".

#### Block load_balancer_billing_config

The load_balancer_billing_config supports the following:

* `pay_type` - (Required) The billing method of the ALB instance. Valid value: `PayAsYouGo`.

#### Block zone_mappings

The zone_mappings supports the following: 

* `vswitch_id` - (Required) The ID of the vSwitch that corresponds to the zone. Each zone can use only one vSwitch and subnet.
* `zone_id` - (Required) The ID of the zone to which the ALB instance belongs.

#### Block modification_protection_config

The modification_protection_config supports the following: 

* `status` - (Optional, Computed, Available in v1.132.0+) Specifies whether to enable the configuration read-only mode for the ALB instance. Valid values: `NonProtection` and `ConsoleProtection`.
  * `NonProtection` - disables the configuration read-only mode. After you disable the configuration read-only mode, you cannot set the ModificationProtectionReason parameter. If the parameter is set, the value is cleared.
  * `ConsoleProtection` - enables the configuration read-only mode. After you enable the configuration read-only mode, you can set the ModificationProtectionReason parameter.
* `reason` - (Optional, Computed, Available in v1.132.0+) The reason for modification protection. This parameter must be 2 to 128 characters in length, and can contain letters, digits, periods, underscores, and hyphens. The reason must start with a letter. **Note:** This parameter takes effect only when `status` is set to `ConsoleProtection`.

#### Block access_log_config

The access_log_config supports the following: 

* `log_project` - (Optional) The log service that access logs are shipped to.
* `log_store` - (Optional) The log service that access logs are shipped to.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of Load Balancer.
* `status` - The load balancer status. Valid values: `Active`, `Configuring`, `CreateFailed`
* `dns_name` - The domain name of the ALB instance. **NOTE:** Available in v1.158.0+.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 2 mins) Used when create the Load Balancer.
* `update` - (Defaults to 2 mins) Used when update the Load Balancer.
* `delete` - (Defaults to 2 mins) Used when delete the Load Balancer.

## Import

ALB Load Balancer can be imported using the id, e.g.

```shell
$ terraform import alicloud_alb_load_balancer.example <id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-a0735855a241c3edef3e877d70d044ffd91e95d50095673817ad06b48667b090 -->