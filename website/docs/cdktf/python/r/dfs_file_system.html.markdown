---
subcategory: "Apsara File Storage for HDFS (DFS)"
layout: "alicloud"
page_title: "Alicloud: alicloud_dfs_file_system"
sidebar_current: "docs-alicloud-resource-dfs-file-system"
description: |-
  Provides a Alicloud DFS File System resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_dfs\_file\_system

Provides a DFS File System resource.

For information about DFS File System and how to use it, see [What is File System](https://www.alibabacloud.com/help/doc-detail/207144.htm).

-> **NOTE:** Available in v1.140.0+.

## Example Usage

Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        name = cdktf.TerraformVariable(self, "name",
            default="tf-testAccFileSystem"
        )
        data_alicloud_dfs_zones_default =
        alicloud.data_alicloud_dfs_zones.DataAlicloudDfsZones(self, "default")
        alicloud_dfs_file_system_default =
        alicloud.dfs_file_system.DfsFileSystem(self, "default_2",
            description=name.string_value,
            file_system_name=name.string_value,
            protocol_type="HDFS",
            space_capacity=cdktf.Token.as_number("1024"),
            storage_type=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_dfs_zones_default.zones, ["0", "options", "0", "storage_type"
                ])),
            throughput_mode="Standard",
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_dfs_zones_default.zones, ["0", "zone_id"
                ]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_dfs_file_system_default.override_logical_id("default")
```

## Argument Reference

The following arguments are supported:

* `description` - (Optional) The description of the File system.
* `file_system_name` - (Required) The name of the File system.
* `protocol_type` - (Required, ForceNew) The protocol type. Valid values: `HDFS`.
* `provisioned_throughput_in_mi_bps` - (Optional, ForceNew) The preset throughput of the File system. Valid values: `1` to `1024`, Unit: MB/s. **NOTE:** Only when `throughput_mode` is `Provisioned`, this param is valid.
* `space_capacity` - (Required) The capacity budget of the File system. **NOTE:** When the actual data storage reaches the file system capacity budget, the data cannot be written. The file system capacity budget does not support shrinking.
* `storage_type` - (Required, ForceNew) The storage specifications of the File system. Valid values: `PERFORMANCE`, `STANDARD`.
* `throughput_mode` - (Optional, Sensitive) The throughput mode of the File system. Valid values: `Provisioned`, `Standard`.
* `zone_id` - (Required, ForceNew) The zone ID of the File system.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of File System.

## Import

DFS File System can be imported using the id, e.g.

```shell
$ terraform import alicloud_dfs_file_system.example <id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-fb97a5116811d38b4049a09478816717b6ece4388a17c6bbfd1ac3e9a77d9dec -->