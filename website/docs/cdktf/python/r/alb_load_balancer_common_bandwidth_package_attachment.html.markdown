---
subcategory: "Application Load Balancer (ALB)"
layout: "alicloud"
page_title: "Alicloud: alicloud_alb_load_balancer_common_bandwidth_package_attachment"
sidebar_current: "docs-alicloud-resource-alb-load-balancer-common-bandwidth-package-attachment"
description: |-
  Provides a Alicloud Alb Load Balancer Common Bandwidth Package Attachment resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud_alb_load_balancer_common_bandwidth_package_attachment

Provides a Alb Load Balancer Common Bandwidth Package Attachment resource.

For information about Alb Load Balancer Common Bandwidth Package Attachment and how to use it, see [What is Load Balancer Common Bandwidth Package Attachment](https://www.alibabacloud.com/help/en/server-load-balancer/latest/attachcommonbandwidthpackagetoloadbalancer).

-> **NOTE:** Available in v1.200.0+.

## Example Usage

Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        name = cdktf.TerraformVariable(self, "name",
            default="example_name"
        )
        alicloud_common_bandwidth_package_default =
        alicloud.common_bandwidth_package.CommonBandwidthPackage(self, "default",
            bandwidth=cdktf.Token.as_string(3),
            internet_charge_type="PayByBandwidth"
        )
        data_alicloud_alb_zones_default =
        alicloud.data_alicloud_alb_zones.DataAlicloudAlbZones(self, "default_2")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_alb_zones_default.override_logical_id("default")
        data_alicloud_vpcs_default =
        alicloud.data_alicloud_vpcs.DataAlicloudVpcs(self, "default_3",
            name_regex="^default-NODELETING$"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vpcs_default.override_logical_id("default")
        data_alicloud_vswitches_default1 =
        alicloud.data_alicloud_vswitches.DataAlicloudVswitches(self, "default_1",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_alb_zones_default.zones, ["0", "id"]))
        )
        data_alicloud_vswitches_default2 =
        alicloud.data_alicloud_vswitches.DataAlicloudVswitches(self, "default_2_5",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_alb_zones_default.zones, ["1", "id"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vswitches_default2.override_logical_id("default_2")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        alicloud_vswitch_vswitch1_count = cdktf.TerraformCount.of(
            cdktf.Token.as_number(
                cdktf.conditional(
                    cdktf.Op.gt(cdktf.Fn.length_of(data_alicloud_vswitches_default1.ids), 0), 0, 1)))
        alicloud_vswitch_vswitch1 = alicloud.vswitch.Vswitch(self, "vswitch_1",
            cidr_block=cdktf.Fn.cidrsubnet(
                cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_vpcs_default.vpcs, ["0", "cidr_block"
                    ])), 8, 2),
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            vswitch_name=name.string_value,
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_alb_zones_default.zones, ["0", "id"])),
            count=alicloud_vswitch_vswitch1_count
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        alicloud_vswitch_vswitch2_count = cdktf.TerraformCount.of(
            cdktf.Token.as_number(
                cdktf.conditional(
                    cdktf.Op.gt(cdktf.Fn.length_of(data_alicloud_vswitches_default2.ids), 0), 0, 1)))
        alicloud_vswitch_vswitch2 = alicloud.vswitch.Vswitch(self, "vswitch_2",
            cidr_block=cdktf.Fn.cidrsubnet(
                cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_vpcs_default.vpcs, ["0", "cidr_block"
                    ])), 8, 4),
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            vswitch_name=name.string_value,
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_alb_zones_default.zones, ["1", "id"])),
            count=alicloud_vswitch_vswitch2_count
        )
        alicloud_alb_load_balancer_default =
        alicloud.alb_load_balancer.AlbLoadBalancer(self, "default_8",
            address_allocated_mode="Fixed",
            address_type="Internet",
            load_balancer_billing_config=AlbLoadBalancerLoadBalancerBillingConfig(
                pay_type="PayAsYouGo"
            ),
            load_balancer_edition="Standard",
            load_balancer_name=name.string_value,
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            zone_mappings=[AlbLoadBalancerZoneMappings(
                vswitch_id=cdktf.Token.as_string(
                    cdktf.conditional(
                        cdktf.Op.gt(
                            cdktf.Fn.length_of(data_alicloud_vswitches_default1.ids), 0),
                        cdktf.property_access(data_alicloud_vswitches_default1.ids, ["0"]),
                        cdktf.property_access(
                            cdktf.Fn.concat([
                                cdktf.property_access(alicloud_vswitch_vswitch1, ["*", "id"]), [""]
                            ]), ["0"]))),
                zone_id=cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_alb_zones_default.zones, ["0", "id"
                    ]))
            ), AlbLoadBalancerZoneMappings(
                vswitch_id=cdktf.Token.as_string(
                    cdktf.conditional(
                        cdktf.Op.gt(
                            cdktf.Fn.length_of(data_alicloud_vswitches_default2.ids), 0),
                        cdktf.property_access(data_alicloud_vswitches_default2.ids, ["0"]),
                        cdktf.property_access(
                            cdktf.Fn.concat([
                                cdktf.property_access(alicloud_vswitch_vswitch2, ["*", "id"]), [""]
                            ]), ["0"]))),
                zone_id=cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_alb_zones_default.zones, ["1", "id"
                    ]))
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_alb_load_balancer_default.override_logical_id("default")
        alicloud_alb_load_balancer_common_bandwidth_package_attachment_default =
        alicloud.alb_load_balancer_common_bandwidth_package_attachment.AlbLoadBalancerCommonBandwidthPackageAttachment(self, "default_9",
            bandwidth_package_id=cdktf.Token.as_string(alicloud_common_bandwidth_package_default.id),
            load_balancer_id=cdktf.Token.as_string(alicloud_alb_load_balancer_default.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_alb_load_balancer_common_bandwidth_package_attachment_default.override_logical_id("default")
```

## Argument Reference

The following arguments are supported:
* `bandwidth_package_id` - (Required,ForceNew) The ID of the bound shared bandwidth package.
* `dry_run` - (Optional) Whether to PreCheck this request only. Value:-**true**: sends a check request and does not bind the shared bandwidth package to the load balancing instance. Check items include whether required parameters, request format, and business restrictions have been filled in. If the check fails, the corresponding error is returned. If the check passes, the error code 'DryRunOperation' is returned '.-**false** (default): Sends a normal request, returns the HTTP 2xx status code after the check, and directly performs the operation.
* `load_balancer_id` - (Required,ForceNew) The ID of the applied server load balancer instance.



## Attributes Reference

The following attributes are exported:
* `id` - The `key` of the resource supplied above.The value is formulated as `<load_balancer_id>:<bandwidth_package_id>`.
* `status` - The status of the Application Load balancing instance. Value:-**Inactive**: Stopped, indicating that the instance listener will no longer forward traffic.-**Active**: running.-**Provisioning**: The project is being created.-**Configuring**: The configuration is being changed.-**CreateFailed**: The instance cannot be deleted without any charge.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:
* `create` - (Defaults to 5 mins) Used when create the Load Balancer Common Bandwidth Package Attachment.
* `delete` - (Defaults to 5 mins) Used when delete the Load Balancer Common Bandwidth Package Attachment.

## Import

Alb Load Balancer Common Bandwidth Package Attachment can be imported using the id, e.g.

```shell
$ terraform import alicloud_alb_load_balancer_common_bandwidth_package_attachment.example <load_balancer_id>:<bandwidth_package_id>
```
<!-- cache-key: cdktf-0.17.0-pre.15 input-e83a6c950ed9b4a97a261d9c38a2158f2f7420226165498ce7a3ab5e9f87e821 -->