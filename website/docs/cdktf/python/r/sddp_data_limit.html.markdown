---
subcategory: "Data Security Center (SDDP)"
layout: "alicloud"
page_title: "Alicloud: alicloud_sddp_data_limit"
sidebar_current: "docs-alicloud-resource-sddp-data-limit"
description: |-
  Provides a Alicloud Data Security Center Data Limit resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_sddp\_data\_limit

Provides a Data Security Center Data Limit resource.

For information about Data Security Center Data Limit and how to use it, see [What is Data Limit](https://www.alibabacloud.com/help/en/doc-detail/158987.html).

-> **NOTE:** Available in v1.159.0+.

## Example Usage

Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        database_name = cdktf.TerraformVariable(self, "database_name",
            default="tftestdatabase"
        )
        name = cdktf.TerraformVariable(self, "name",
            default="tfaccxinmutes"
        )
        password = cdktf.TerraformVariable(self, "password",
            default="Test12345"
        )
        region = cdktf.TerraformVariable(self, "region",
            default="cn-hangzhou"
        )
        data_alicloud_db_instance_classes_default =
        alicloud.data_alicloud_db_instance_classes.DataAlicloudDbInstanceClasses(self, "default",
            engine="MySQL",
            engine_version="5.6"
        )
        data_alicloud_db_zones_default =
        alicloud.data_alicloud_db_zones.DataAlicloudDbZones(self, "default_5")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_db_zones_default.override_logical_id("default")
        data_alicloud_vpcs_default =
        alicloud.data_alicloud_vpcs.DataAlicloudVpcs(self, "default_6",
            name_regex="default-NODELETING"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vpcs_default.override_logical_id("default")
        data_alicloud_vswitches_default =
        alicloud.data_alicloud_vswitches.DataAlicloudVswitches(self, "default_7",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_db_zones_default.zones, ["0", "id"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vswitches_default.override_logical_id("default")
        alicloud_db_instance_default = alicloud.db_instance.DbInstance(self, "default_8",
            engine="MySQL",
            engine_version="5.6",
            instance_name=name.string_value,
            instance_storage=cdktf.Token.as_number("10"),
            instance_type=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_db_instance_classes_default.instance_classes, ["0", "instance_class"])),
            vswitch_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vswitches_default.ids, ["0"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_db_instance_default.override_logical_id("default")
        alicloud_rds_account_default = alicloud.rds_account.RdsAccount(self, "default_9",
            account_name=database_name.string_value,
            account_password=password.string_value,
            db_instance_id=cdktf.Token.as_string(alicloud_db_instance_default.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_rds_account_default.override_logical_id("default")
        parent_id = cdktf.Fn.join(".",
            cdktf.Token.as_list([alicloud_db_instance_default.id, database_name.value]))
        alicloud_db_database_default = alicloud.db_database.DbDatabase(self, "default_10",
            instance_id=cdktf.Token.as_string(alicloud_db_instance_default.id),
            name=database_name.string_value
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_db_database_default.override_logical_id("default")
        alicloud_db_account_privilege_default =
        alicloud.db_account_privilege.DbAccountPrivilege(self, "default_11",
            account_name=cdktf.Token.as_string(alicloud_rds_account_default.name),
            db_names=[cdktf.Token.as_string(alicloud_db_database_default.name)],
            instance_id=cdktf.Token.as_string(alicloud_db_instance_default.id),
            privilege="ReadWrite"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_db_account_privilege_default.override_logical_id("default")
        alicloud_sddp_data_limit_default =
        alicloud.sddp_data_limit.SddpDataLimit(self, "default_12",
            audit_status=0,
            depends_on=[alicloud_db_account_privilege_default],
            engine_type="MySQL",
            parent_id=parent_id,
            password=password.string_value,
            port=3306,
            resource_type="RDS",
            service_region_id=region.string_value,
            user_name=database_name.string_value
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_sddp_data_limit_default.override_logical_id("default")
```

## Argument Reference

The following arguments are supported:

* `audit_status` - (Optional, Computed)  Whether to enable the log auditing feature. Valid values: `0`, `1`.
* `engine_type` - (Optional, ForceNew) The type of the database. Valid values: `MySQL`, `SQLServer`.
* `lang` - (Optional) The lang.
* `log_store_day` - (Optional) The retention period of raw logs after you enable the log auditing feature. Unit: day. Valid values: `180`, `30`, `365`, `90`. **NOTE:** The`log_store_day` is valid when the `audit_status` is `1`.
* `parent_id` - (Optional, ForceNew) The ID of the data asset.
* `password` - (Optional, ForceNew) The password that is used to connect to the database.
* `port` - (Optional, ForceNew) The port that is used to connect to the database.
* `resource_type` - (Required, ForceNew) The type of the service to which the data asset belongs. Valid values: `MaxCompute`, `OSS`, `RDS`.
* `service_region_id` - (Optional, ForceNew) The region ID of the data asset.
* `user_name` - (Optional, ForceNew) The name of the service to which the data asset belongs.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of Data Limit.

## Import

Data Security Center Data Limit can be imported using the id, e.g.

```shell
$ terraform import alicloud_sddp_data_limit.example <id>
```
<!-- cache-key: cdktf-0.17.0-pre.15 input-6fc6a9059472900097dd9cff25c91af7ffced8f0e470272eab00f8af8e4f7726 -->