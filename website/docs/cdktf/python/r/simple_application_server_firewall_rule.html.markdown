---
subcategory: "Simple Application Server"
layout: "alicloud"
page_title: "Alicloud: alicloud_simple_application_server_firewall_rule"
sidebar_current: "docs-alicloud-resource-simple-application-server-firewall-rule"
description: |-
  Provides a Alicloud Simple Application Server Firewall Rule resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_simple\_application\_server\_firewall\_rule

Provides a Simple Application Server Firewall Rule resource.

For information about Simple Application Server Firewall Rule and how to use it, see [What is Firewall Rule](https://www.alibabacloud.com/help/doc-detail/190449.htm).

-> **NOTE:** Available in v1.143.0+.

## Example Usage

Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_alicloud_simple_application_server_images_default =
        alicloud.data_alicloud_simple_application_server_images.DataAlicloudSimpleApplicationServerImages(self, "default")
        data_alicloud_simple_application_server_instances_default =
        alicloud.data_alicloud_simple_application_server_instances.DataAlicloudSimpleApplicationServerInstances(self, "default_1")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_simple_application_server_instances_default.override_logical_id("default")
        data_alicloud_simple_application_server_plans_default =
        alicloud.data_alicloud_simple_application_server_plans.DataAlicloudSimpleApplicationServerPlans(self, "default_2")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_simple_application_server_plans_default.override_logical_id("default")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        alicloud_simple_application_server_instance_default_count =
        cdktf.TerraformCount.of(
            cdktf.Token.as_number(
                cdktf.conditional(
                    cdktf.Op.gt(
                        cdktf.Fn.length_of(data_alicloud_simple_application_server_instances_default.ids), 0), 0, 1)))
        alicloud_simple_application_server_instance_default =
        alicloud.simple_application_server_instance.SimpleApplicationServerInstance(self, "default_3",
            data_disk_size=100,
            image_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_simple_application_server_images_default.images, ["0", "id"])),
            instance_name="tf-testaccswas-firewallrule",
            payment_type="Subscription",
            period=1,
            plan_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_simple_application_server_plans_default.plans, ["0", "id"])),
            count=alicloud_simple_application_server_instance_default_count
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_simple_application_server_instance_default.override_logical_id("default")
        alicloud_simple_application_server_firewall_rule_default =
        alicloud.simple_application_server_firewall_rule.SimpleApplicationServerFirewallRule(self, "default_4",
            instance_id=cdktf.Token.as_string(
                cdktf.conditional(
                    cdktf.Op.gt(
                        cdktf.Fn.length_of(data_alicloud_simple_application_server_instances_default.ids), 0),
                    cdktf.property_access(data_alicloud_simple_application_server_instances_default.ids, ["0"]),
                    cdktf.property_access(alicloud_simple_application_server_instance_default, ["0", "id"]))),
            port="9999",
            remark="example_value",
            rule_protocol="Tcp"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_simple_application_server_firewall_rule_default.override_logical_id("default")
```
## Argument Reference

The following arguments are supported:

* `instance_id` - (Required, ForceNew) Alibaba Cloud simple application server instance ID.
* `port` - (Required, ForceNew) The port range. Valid values of port numbers: `1` to `65535`. Specify a port range in the format of `<start port number>/<end port number>`. Example: `1024/1055`, which indicates the port range of `1024` through `1055`.
* `remark` - (Optional, ForceNew) The remarks of the firewall rule.
* `rule_protocol` - (Required, ForceNew) The transport layer protocol. Valid values: `Tcp`, `Udp`, `TcpAndUdp`.

## Attributes Reference

The following attributes are exported:

* `firewall_rule_id` - The ID of the firewall rule.
* `id` - The resource ID of Firewall Rule. The value formats as `<instance_id>:<firewall_rule_id>`.

## Import

Simple Application Server Firewall Rule can be imported using the id, e.g.

```shell
$ terraform import alicloud_simple_application_server_firewall_rule.example <instance_id>:<firewall_rule_id>
```
<!-- cache-key: cdktf-0.17.0-pre.15 input-32f0e772c00848a6914c1c1202ee78bd21eec6e5d00993922f1df9ecb8ce2dd8 -->