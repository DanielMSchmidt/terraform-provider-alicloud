---
subcategory: "Apsara File Storage for HDFS (DFS)"
layout: "alicloud"
page_title: "Alicloud: alicloud_dfs_mount_point"
sidebar_current: "docs-alicloud-resource-dfs-mount-point"
description: |-
  Provides a Alicloud DFS Mount Point resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_dfs\_mount\_point

Provides a DFS Mount Point resource.

For information about DFS Mount Point and how to use it, see [What is Mount Point](https://www.alibabacloud.com/help/doc-detail/207144.htm).

-> **NOTE:** Available in v1.140.0+.

## Example Usage

Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        name = cdktf.TerraformVariable(self, "name",
            default="example_name"
        )
        alicloud_dfs_access_group_default =
        alicloud.dfs_access_group.DfsAccessGroup(self, "default",
            access_group_name=name.string_value,
            description=name.string_value,
            network_type="VPC"
        )
        data_alicloud_dfs_zones_default =
        alicloud.data_alicloud_dfs_zones.DataAlicloudDfsZones(self, "default_2")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_dfs_zones_default.override_logical_id("default")
        data_alicloud_vpcs_default =
        alicloud.data_alicloud_vpcs.DataAlicloudVpcs(self, "default_3")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vpcs_default.override_logical_id("default")
        data_alicloud_vswitches_default =
        alicloud.data_alicloud_vswitches.DataAlicloudVswitches(self, "default_4",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_dfs_zones_default.zones, ["0", "zone_id"
                ]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vswitches_default.override_logical_id("default")
        alicloud_dfs_file_system_default =
        alicloud.dfs_file_system.DfsFileSystem(self, "default_5",
            description=name.string_value,
            file_system_name=name.string_value,
            protocol_type="HDFS",
            space_capacity=cdktf.Token.as_number("1024"),
            storage_type=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_dfs_zones_default.zones, ["0", "options", "0", "storage_type"
                ])),
            throughput_mode="Standard",
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_dfs_zones_default.zones, ["0", "zone_id"
                ]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_dfs_file_system_default.override_logical_id("default")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        alicloud_vswitch_default_count = cdktf.TerraformCount.of(
            cdktf.Token.as_number(
                cdktf.conditional(
                    cdktf.Op.gt(cdktf.Fn.length_of(data_alicloud_vswitches_default.ids), 0), 0, 1)))
        alicloud_vswitch_default = alicloud.vswitch.Vswitch(self, "default_6",
            cidr_block=cdktf.Fn.cidrsubnet(
                cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_vpcs_default.vpcs, ["0", "cidr_block"
                    ])), 8, 2),
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            vswitch_name=name.string_value,
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_dfs_zones_default.zones, ["0", "zone_id"
                ])),
            count=alicloud_vswitch_default_count
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_vswitch_default.override_logical_id("default")
        alicloud_dfs_mount_point_default =
        alicloud.dfs_mount_point.DfsMountPoint(self, "default_7",
            access_group_id=cdktf.Token.as_string(alicloud_dfs_access_group_default.id),
            description=name.string_value,
            file_system_id=cdktf.Token.as_string(alicloud_dfs_file_system_default.id),
            network_type="VPC",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            vswitch_id=cdktf.Token.as_string(
                cdktf.conditional(
                    cdktf.Op.gt(cdktf.Fn.length_of(data_alicloud_vswitches_default.ids), 0),
                    cdktf.property_access(data_alicloud_vswitches_default.ids, ["0"]),
                    cdktf.property_access(
                        cdktf.Fn.concat([
                            cdktf.property_access(alicloud_vswitch_default, ["*", "id"]), [""]
                        ]), ["0"])))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_dfs_mount_point_default.override_logical_id("default")
```

## Argument Reference

The following arguments are supported:

* `access_group_id` - (Required) The ID of the Access Group.
* `description` - (Optional) The description of the Mount Point.
* `file_system_id` - (Required, ForceNew) The ID of the File System.
* `network_type` - (Required, ForceNew) The network type of the Mount Point. Valid values: `VPC`.
* `status` - (Optional) The status of the Mount Point. Valid values: `Active`, `Inactive`.
* `vpc_id` - (Required, ForceNew) The vpc id.
* `vswitch_id` - (Required, ForceNew) The vswitch id.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID of the Mount Point. The value formats as `<file_system_id>:<mount_point_id>`.
* `mount_point_id` - The ID of the Mount Point.

## Import

DFS Mount Point can be imported using the id, e.g.

```shell
$ terraform import alicloud_dfs_mount_point.example <file_system_id>:<mount_point_id>
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-f7ca48fa2ef8b26c9e6f6cf41edec35a9d75efc097eead133ec516f86eccae52 -->