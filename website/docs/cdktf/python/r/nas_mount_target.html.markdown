---
subcategory: "Network Attached Storage (NAS)"
layout: "alicloud"
page_title: "Alicloud: alicloud_nas_mount_target"
sidebar_current: "docs-alicloud-resource-nas-mount-target"
description: |-
  Provides a Alicloud NAS MountTarget resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_nas_mount_target

Provides a NAS Mount Target resource.
For information about NAS Mount Target and how to use it, see [Manage NAS Mount Targets](https://www.alibabacloud.com/help/en/doc-detail/27531.htm).

-> **NOTE**: Available in v1.34.0+.

-> **NOTE**: Currently this resource support create a mount point in a classic network only when current region is China mainland regions.

-> **NOTE**: You must grant NAS with specific RAM permissions when creating a classic mount targets,
and it only can be achieved by creating a classic mount target mannually.
See [Add a mount point](https://www.alibabacloud.com/help/doc-detail/60431.htm) and [Why do I need RAM permissions to create a mount point in a classic network](https://www.alibabacloud.com/help/faq-detail/42176.htm).

## Example Usage

Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        alicloud_nas_access_group_example =
        alicloud.nas_access_group.NasAccessGroup(self, "example",
            access_group_name="terraform-example",
            access_group_type="Vpc",
            description="terraform-example",
            file_system_type="standard"
        )
        alicloud_vpc_example = alicloud.vpc.Vpc(self, "example_1",
            cidr_block="172.17.3.0/24",
            vpc_name="terraform-example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_vpc_example.override_logical_id("example")
        data_alicloud_nas_zones_example =
        alicloud.data_alicloud_nas_zones.DataAlicloudNasZones(self, "example_2",
            file_system_type="standard"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_nas_zones_example.override_logical_id("example")
        alicloud_nas_file_system_example =
        alicloud.nas_file_system.NasFileSystem(self, "example_3",
            description="terraform-example",
            encrypt_type=cdktf.Token.as_number("1"),
            protocol_type="NFS",
            storage_type="Performance",
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_nas_zones_example.zones, ["0", "zone_id"
                ]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_nas_file_system_example.override_logical_id("example")
        alicloud_vswitch_example = alicloud.vswitch.Vswitch(self, "example_4",
            cidr_block="172.17.3.0/24",
            vpc_id=cdktf.Token.as_string(alicloud_vpc_example.id),
            vswitch_name="terraform-example",
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_nas_zones_example.zones, ["0", "zone_id"
                ]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_vswitch_example.override_logical_id("example")
        alicloud_nas_mount_target_example =
        alicloud.nas_mount_target.NasMountTarget(self, "example_5",
            access_group_name=cdktf.Token.as_string(alicloud_nas_access_group_example.access_group_name),
            file_system_id=cdktf.Token.as_string(alicloud_nas_file_system_example.id),
            vswitch_id=cdktf.Token.as_string(alicloud_vswitch_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_nas_mount_target_example.override_logical_id("example")
```

## Argument Reference

The following arguments are supported:

* `file_system_id` - (Required, ForceNew) The ID of the file system.
* `access_group_name` - (Required) The name of the permission group that applies to the mount target.
* `vswitch_id` - (Optional, ForceNew) The ID of the VSwitch in the VPC where the mount target resides.
* `status` - (Optional) Whether the MountTarget is active. The status of the mount target. Valid values: `Active` and `Inactive`, Default value is `Active`. Before you mount a file system, make sure that the mount target is in the Active state.
* `security_group_id` - (Optional, ForceNew, Available in v1.95.0+.) The ID of security group.

## Attributes Reference

The following attributes are exported:

*`id` - This ID of this resource. It is formatted to `<file_system_id>:<mount_target_domain>`. Before version 1.95.0, the value is `<mount_target_domain>`.
* `mount_target_domain` - The IPv4 domain name of the mount target. **NOTE:** Available in v1.161.0+.
### Timeouts

-> **NOTE:** Available in v1.153.0+.

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 40 mins) Used when create the mount target (until it reaches the initial `Active` status).
* `delete` - (Defaults to 40 mins) Used when delete the mount target.


## Import

NAS MountTarget  can be imported using the id, e.g.

```shell
$ terraform import alicloud_nas_mount_target.foo 192094b415:192094b415-luw38.cn-beijing.nas.aliyuncs.com
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-2ad99cc659c8f4b50495440fecf96fd8237c78f40cec648d335a484273c062c6 -->