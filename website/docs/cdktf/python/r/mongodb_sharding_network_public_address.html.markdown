---
subcategory: "MongoDB"
layout: "alicloud"
page_title: "Alicloud: alicloud_mongodb_sharding_network_public_address"
sidebar_current: "docs-alicloud-resource-mongodb-sharding-network-public-address"
description: |-
  Provides a Alicloud MongoDB Sharding Network Public Address resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_mongodb\_sharding\_network\_public\_address

Provides a MongoDB Sharding Network Public Address resource.

For information about MongoDB Sharding Network Public Address and how to use it, see [What is Sharding Network Public Address](https://www.alibabacloud.com/help/doc-detail/67602.html).

-> **NOTE:** Available in v1.149.0+.

-> **NOTE:** This operation supports sharded cluster instances only.

## Example Usage

Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        name = cdktf.TerraformVariable(self, "name",
            default="tf-example"
        )
        data_alicloud_mongodb_zones_default =
        alicloud.data_alicloud_mongodb_zones.DataAlicloudMongodbZones(self, "default")
        data_alicloud_vpcs_default =
        alicloud.data_alicloud_vpcs.DataAlicloudVpcs(self, "default_2",
            name_regex="default-NODELETING"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vpcs_default.override_logical_id("default")
        data_alicloud_vswitches_default =
        alicloud.data_alicloud_vswitches.DataAlicloudVswitches(self, "default_3",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_mongodb_zones_default.zones, ["0", "id"
                ]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vswitches_default.override_logical_id("default")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        alicloud_vswitch_vswitch_count = cdktf.TerraformCount.of(
            cdktf.Token.as_number(
                cdktf.conditional(
                    cdktf.Op.gt(cdktf.Fn.length_of(data_alicloud_vswitches_default.ids), 0), 0, 1)))
        alicloud_vswitch_vswitch = alicloud.vswitch.Vswitch(self, "vswitch",
            cidr_block=cdktf.Fn.cidrsubnet(
                cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_vpcs_default.vpcs, ["0", "cidr_block"
                    ])), 8, 8),
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            vswitch_name="subnet-for-local-test",
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_mongodb_zones_default.zones, ["0", "id"
                ])),
            count=alicloud_vswitch_vswitch_count
        )
        alicloud_mongodb_sharding_instance_default =
        alicloud.mongodb_sharding_instance.MongodbShardingInstance(self, "default_5",
            engine_version="4.2",
            mongo_list=[MongodbShardingInstanceMongoList(
                node_class="dds.mongos.mid"
            ), MongodbShardingInstanceMongoList(
                node_class="dds.mongos.mid"
            )
            ],
            name=name.string_value,
            shard_list=[MongodbShardingInstanceShardList(
                node_class="dds.shard.mid",
                node_storage=10
            ), MongodbShardingInstanceShardList(
                node_class="dds.shard.mid",
                node_storage=10
            )
            ],
            vswitch_id=cdktf.Token.as_string(
                cdktf.conditional(
                    cdktf.Op.gt(
                        cdktf.Fn.length_of(data_alicloud_vswitches_default.ids), 0),
                    cdktf.property_access(data_alicloud_vswitches_default.ids, ["0"]),
                    cdktf.property_access(
                        cdktf.Fn.concat([
                            cdktf.property_access(alicloud_vswitch_vswitch, ["*", "id"]), [""]
                        ]), ["0"]))),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_mongodb_zones_default.zones, ["0", "id"
                ]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_mongodb_sharding_instance_default.override_logical_id("default")
        alicloud.mongodb_sharding_network_public_address.MongodbShardingNetworkPublicAddress(self, "example",
            db_instance_id=cdktf.Token.as_string(alicloud_mongodb_sharding_instance_default.id),
            node_id=cdktf.Token.as_string(
                cdktf.property_access(alicloud_mongodb_sharding_instance_default.mongo_list, ["0", "node_id"]))
        )
```

## Argument Reference

The following arguments are supported:

* `db_instance_id` - (Required, ForceNew) The ID of the instance.
* `node_id` - (Required, ForceNew) The ID of the `mongos`, `shard`, or `Configserver` node in the sharded cluster instance.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID of Sharding Network Public Address. The value formats as `<db_instance_id>:<node_id>`.
* `network_address` - An array that consists of the endpoints of ApsaraDB for MongoDB instances.
  * `network_type` - The network type.
  * `network_address` - The endpoint of the instance.
  * `node_type` - The type of the node.
  * `port` - The port number.
  * `role` - The role of the node.
  * `vpc_id` - The ID of the VPC.
  * `expired_time` - The remaining duration of the classic network address. Unit: `seconds`.
  * `ip_address` - The IP address of the instance.
  * `vswitch_id` - The vSwitch ID of the VPC.
  * `node_id` - The ID of the `mongos`, `shard`, or `Configserver` node in the sharded cluster instance.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 5 mins) Used when creating the MongoDB Sharding Network Public Address.
* `delete` - (Defaults to 5 mins) Used when terminating the MongoDB Sharding Network Public Address.

## Import

MongoDB Sharding Network Public Address can be imported using the id, e.g.

```shell
$ terraform import alicloud_mongodb_sharding_network_public_address.example <db_instance_id>:<node_id>
```
<!-- cache-key: cdktf-0.17.0-pre.15 input-ca5f32951246788e6dcf6225f8902f9a0c4dad4a0e84c9d963c1beebe91df086 -->