---
subcategory: "RDS"
layout: "alicloud"
page_title: "Alicloud: alicloud_db_account_privilege"
sidebar_current: "docs-alicloud-resource-db-account-privilege"
description: |-
  Provides an RDS account privilege resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_db\_account\_privilege

Provides an RDS account privilege resource and used to grant several database some access privilege. A database can be granted by multiple account.

-> **NOTE:** At present, a database can only have one database owner.

## Example Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        creation = cdktf.TerraformVariable(self, "creation",
            default="Rds"
        )
        name = cdktf.TerraformVariable(self, "name",
            default="dbaccountprivilegebasic"
        )
        alicloud_vpc_default = alicloud.vpc.Vpc(self, "default",
            cidr_block="172.16.0.0/16",
            vpc_name=name.string_value
        )
        data_alicloud_zones_default =
        alicloud.data_alicloud_zones.DataAlicloudZones(self, "default_3",
            available_resource_creation=creation.string_value
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_zones_default.override_logical_id("default")
        alicloud_vswitch_default = alicloud.vswitch.Vswitch(self, "default_4",
            cidr_block="172.16.0.0/24",
            vpc_id=cdktf.Token.as_string(alicloud_vpc_default.id),
            vswitch_name=name.string_value,
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_zones_default.zones, ["0", "id"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_vswitch_default.override_logical_id("default")
        alicloud_db_instance_instance = alicloud.db_instance.DbInstance(self, "instance",
            engine="MySQL",
            engine_version="5.6",
            instance_name=name.string_value,
            instance_storage=cdktf.Token.as_number("10"),
            instance_type="rds.mysql.s1.small",
            vswitch_id=cdktf.Token.as_string(alicloud_vswitch_default.id)
        )
        alicloud_db_account_account = alicloud.db_account.DbAccount(self, "account",
            description="from terraform",
            instance_id=cdktf.Token.as_string(alicloud_db_instance_instance.id),
            name="tftestprivilege",
            password="Test12345"
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        alicloud_db_database_db_count = cdktf.TerraformCount.of(
            cdktf.Token.as_number("2"))
        alicloud_db_database_db = alicloud.db_database.DbDatabase(self, "db",
            description="from terraform",
            instance_id=cdktf.Token.as_string(alicloud_db_instance_instance.id),
            name="tfaccountpri_${" + alicloud_db_database_db_count.index + "}",
            count=alicloud_db_database_db_count
        )
        alicloud.db_account_privilege.DbAccountPrivilege(self, "privilege",
            account_name=cdktf.Token.as_string(alicloud_db_account_account.name),
            db_names=cdktf.Token.as_list(
                cdktf.property_access(alicloud_db_database_db, ["*", "name"])),
            instance_id=cdktf.Token.as_string(alicloud_db_instance_instance.id),
            privilege="ReadOnly"
        )
```

## Argument Reference

The following arguments are supported:

* `instance_id` - (Required, ForceNew) The Id of instance in which account belongs.
* `account_name` - (Required, ForceNew) A specified account name.
* `privilege` - The privilege of one account access database. Valid values: 
    - ReadOnly: This value is only for MySQL, MariaDB and SQL Server
    - ReadWrite: This value is only for MySQL, MariaDB and SQL Server
    - DDLOnly: (Available in 1.64.0+) This value is only for MySQL and MariaDB
    - DMLOnly: (Available in 1.64.0+) This value is only for MySQL and MariaDB
    - DBOwner: (Available in 1.64.0+) This value is only for SQL Server and PostgreSQL.
     
   Default to "ReadOnly". 
* `db_names` - (Required) List of specified database name.

## Attributes Reference

The following attributes are exported:

* `id` - The current account resource ID. Composed of instance ID, account name and privilege with format `<instance_id>:<name>:<privilege>`.

## Import

RDS account privilege can be imported using the id, e.g.

```shell
$ terraform import alicloud_db_account_privilege.example "rm-12345:tf_account:ReadOnly"
```

<!-- cache-key: cdktf-0.17.0-pre.15 input-383a1d22f761a82f81bd8165fc8f8c8497af2e19b0a3ac48ede8326f1d1766e6 -->