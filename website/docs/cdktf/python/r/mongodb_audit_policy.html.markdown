---
subcategory: "MongoDB"
layout: "alicloud"
page_title: "Alicloud: alicloud_mongodb_audit_policy"
sidebar_current: "docs-alicloud-resource-mongodb-audit-policy"
description: |-
  Provides a Alicloud MongoDB Audit Policy resource.
---


<!-- Please do not edit this file, it is generated. -->
# alicloud\_mongodb\_audit\_policy

Provides a MongoDB Audit Policy resource.

For information about MongoDB Audit Policy and how to use it, see [What is Audit Policy](https://www.alibabacloud.com/help/doc-detail/131941.html).

-> **NOTE:** Available in v1.148.0+.

## Example Usage

Basic Usage

```python
import constructs as constructs
import cdktf as cdktf
# Provider bindings are generated by running cdktf get.
# See https://cdk.tf/provider-generation for more details.
import ...gen.providers.alicloud as alicloud
class MyConvertedCode(cdktf.TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        data_alicloud_mongodb_zones_default =
        alicloud.data_alicloud_mongodb_zones.DataAlicloudMongodbZones(self, "default")
        data_alicloud_vpcs_default =
        alicloud.data_alicloud_vpcs.DataAlicloudVpcs(self, "default_1",
            name_regex="default-NODELETING"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vpcs_default.override_logical_id("default")
        data_alicloud_vswitches_default =
        alicloud.data_alicloud_vswitches.DataAlicloudVswitches(self, "default_2",
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_mongodb_zones_default.zones, ["0", "id"
                ]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_alicloud_vswitches_default.override_logical_id("default")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        alicloud_vswitch_vswitch_count = cdktf.TerraformCount.of(
            cdktf.Token.as_number(
                cdktf.conditional(
                    cdktf.Op.gt(cdktf.Fn.length_of(data_alicloud_vswitches_default.ids), 0), 0, 1)))
        alicloud_vswitch_vswitch = alicloud.vswitch.Vswitch(self, "vswitch",
            cidr_block=cdktf.Fn.cidrsubnet(
                cdktf.Token.as_string(
                    cdktf.property_access(data_alicloud_vpcs_default.vpcs, ["0", "cidr_block"
                    ])), 8, 8),
            vpc_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_vpcs_default.ids, ["0"])),
            vswitch_name="subnet-for-local-test",
            zone_id=cdktf.Token.as_string(
                cdktf.property_access(data_alicloud_mongodb_zones_default.zones, ["0", "id"
                ])),
            count=alicloud_vswitch_vswitch_count
        )
        alicloud_mongodb_instance_default =
        alicloud.mongodb_instance.MongodbInstance(self, "default_4",
            db_instance_class="dds.mongo.mid",
            db_instance_storage=10,
            engine_version="3.4",
            name="example_value",
            tags={
                "Created": "TF",
                "For": "acceptance test"
            },
            vswitch_id=cdktf.Token.as_string(
                cdktf.conditional(
                    cdktf.Op.gt(cdktf.Fn.length_of(data_alicloud_vswitches_default.ids), 0),
                    cdktf.property_access(data_alicloud_vswitches_default.ids, ["0"]),
                    cdktf.property_access(
                        cdktf.Fn.concat([
                            cdktf.property_access(alicloud_vswitch_vswitch, ["*", "id"]), [""]
                        ]), ["0"])))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        alicloud_mongodb_instance_default.override_logical_id("default")
        alicloud.mongodb_audit_policy.MongodbAuditPolicy(self, "example",
            audit_status="disabled",
            db_instance_id=cdktf.Token.as_string(alicloud_mongodb_instance_default.id)
        )
```

## Argument Reference

The following arguments are supported:

* `db_instance_id` - (Required, ForceNew) The ID of the instance.
* `audit_status` - (Required) The status of the audit log. Valid values: `disabled`, `enable`.
* `storage_period` - (Optional) The retention period of audit logs. Valid values: `1` to `30`. Default value: `30`.

## Attributes Reference

The following attributes are exported:

* `id` - The resource ID in terraform of Audit Policy. Its value is same as `db_instance_id`.

### Timeouts

-> **NOTE:** Available in 1.161.0+.

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration-0-11/resources.html#timeouts) for certain actions:

* `create` - (Defaults to 5 mins) Used when create the Audit Policy.
* `update` - (Defaults to 5 mins) Used when update the Audit Policy.

## Import

MongoDB Audit Policy can be imported using the id, e.g.

```shell
$ terraform import alicloud_mongodb_audit_policy.example <db_instance_id>
```
<!-- cache-key: cdktf-0.17.0-pre.15 input-26470573ed12368dad9a7278789f21e756085744b369694ffa096edf1b11112b -->